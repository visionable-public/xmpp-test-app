{"version":3,"sources":["db.js","login.js","profile.js","sidebar.js","message.js","roster.js","messages.js","App.js","index.js"],"names":["db","Dexie","version","stores","messages","LoginView","loading","username","onChangeUsername","password","onChangePassword","server","onChangeServer","error","signIn","Stack","spacing","sx","width","maxWidth","my","mx","TextField","label","disabled","onChange","value","onKeyDown","e","key","type","helperText","Button","variant","onClick","Profile","client","me","signOut","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","statusList","color","icon","Circle","ListItem","disablePadding","ListItemIcon","IconButton","event","currentTarget","ml","Avatar","height","ListItemText","primary","name","primaryTypographyProps","textOverflow","overflow","whiteSpace","secondary","user_email","secondaryTypographyProps","title","config","jid","Menu","id","onClose","PaperProps","elevation","filter","mt","mr","content","display","position","top","right","bgcolor","transform","zIndex","transformOrigin","horizontal","vertical","anchorOrigin","MenuItem","Divider","map","s","status","sendPresence","fontSize","items","route","iconComponent","ContactsIcon","ChatIcon","SideBar","setNav","nav","List","flexDirection","minWidth","background","i","IconComponent","ListItemButton","Chat","message","mine","isRoom","from","includes","Box","className","blue","p","borderRadius","marginLeft","marginRight","style","timestamp","toLocaleString","body","createMeeting","API_BASE","jwt","a","url","mstart","parseInt","Date","getTime","formData","FormData","append","toString","fetch","method","headers","Authorization","then","res","json","AddUserToRoomPrompt","close","allUsers","room","user","setUser","Dialog","DialogTitle","DialogContent","Autocomplete","_","u","options","user_id","renderInput","params","DialogActions","setRoomAffiliation","Message","members","setMembers","setMessage","showAddUserToRoom","setShowAddUserToRoom","scrollRef","useRef","roomListAnchorEl","setRoomListAnchorEl","showRoomList","useLiveQuery","where","equals","or","sortBy","extendedMessages","find","removeContact","leaveRoom","removeRosterItem","unsubscribe","sendMessage","to","invite","uuid","memberList","getRoomMembers","muc","users","m","target","closeRoomList","useEffect","current","scrollTop","scrollHeight","flexGrow","direction","px","alignItems","MenuListProps","ref","placeholder","onKeyPress","InputProps","endAdornment","AddRoomPrompt","add","roomName","setRoomName","AddContactPrompt","newContact","setNewContact","userDisplayName","user_firstname","user_lastname","initials","split","slice","n","substr","Roster","roster","MUC_LIGHT_HOSTNAME","search","setSearch","subNav","setSubNav","showAddContact","setShowAddContact","showAddRoom","setShowAddRoom","showAddMenu","closeAddMenu","addRoom","crypto","randomUUID","joinRoom","console","log","configureRoom","fields","filteredRoster","r","toLowerCase","chatMessages","subscribe","Paper","size","fullWidth","ListItemAvatar","Messages","tos","orderBy","uniqueKeys","froms","jids","concat","v","indexOf","filteredUsers","window","Amplify","configure","Auth","region","userPoolId","userPoolWebClientId","resource","localStorage","getItem","setItem","initXMPP","hostname","XMPP","transports","websocket","IncomingInvites","accept","reject","invites","responses","getAllUsers","ok","userFullName","user_displayname","getAllMessages","start","after","paging","searchHistory","complete","last","App","setClient","setUsername","setPassword","setJid","setJwt","online","setOnline","setRoster","presence","setPresence","incomingInvites","setIncomingInvites","inviteResponses","setInviteResponses","setLoading","setError","setAllUsers","connected","setConnected","setServer","serviceName","domain","xmppHostname","mucHostname","clear","session","signInUserSession","idToken","jwtToken","xmpp","cognitoUsers","extendedUsers","on","enableKeepAlive","enableCarbons","getRoster","lastMessage","prev","put","group","mam","archive","item","delay","data","acceptSubscription","forEach","with","before","connect","Hub","listen","payload","extendedRoster","resources","Object","values","groups","match","reconnect","currentSession","credentials","disconnect","Snackbar","cursor","Alert","severity","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.3aa08a06.chunk.js","sourcesContent":["import Dexie from 'dexie';\n\nconst db = new Dexie('visionable-xmpp-test-app');\n\ndb.version(1).stores({\n  messages: '++id, group, from, to, body, type, timestamp',\n});\n\nexport default db;\n","import {\n  Button,\n  TextField,\n  Stack\n} from \"@mui/material\";\n\nconst LoginView = ({\n  loading,\n  username,\n  onChangeUsername,\n  password,\n  onChangePassword,\n  server,\n  onChangeServer,\n  error,\n  signIn\n  }) => (\n  <Stack spacing={3} sx={{ width: \"400px\", maxWidth: \"100%\", my: 3, mx: \"auto\" }}>\n    <TextField\n        label=\"Server\"\n        disabled\n        onChange={onChangeServer}\n        value={server}\n        error={!!error}\n        />\n\n    <TextField\n        label=\"Username\"\n        disabled={loading}\n        onChange={onChangeUsername}\n        value={username}\n        error={!!error}\n        />\n\n    <TextField\n        label=\"Password\"\n        disabled={loading}\n        onKeyDown={(e) => e.key === \"Enter\" && signIn()}\n        type=\"password\"\n        onChange={onChangePassword}\n        value={password}\n        error={!!error}\n        helperText={error && \"Invalid credentials\"}\n        />\n\n    <Button variant=\"contained\" disabled={loading} onClick={signIn}> Sign in </Button>\n  </Stack>\n);\n\nexport default LoginView;\n","import { useState } from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport Settings from '@mui/icons-material/Settings';\nimport Logout from '@mui/icons-material/Logout';\nimport Circle from '@mui/icons-material/Circle';\n\nconst Profile = ({ client, me, signOut }) => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const setStatus = (status) => {\n    client.sendPresence({ status });\n  };\n\n  const statusList = [\n    {\n      key: \"available\",\n      color: \"#53b397\",\n      label: \"Available\",\n      icon: Circle,\n    },\n    {\n      key: \"in-meeting\",\n      color: \"#ea3323\",\n      label: \"In a meeting\",\n      icon: Circle,\n    },\n    {\n      key: \"away\",\n      color: \"#f0a73e\",\n      label: \"Away\",\n      icon: Circle,\n    },\n  ]\n\n  return (\n    <>\n      <ListItem disablePadding>\n        <ListItemIcon>\n          <IconButton onClick={handleClick} sx={{ ml: 0.5 }}>\n            <Avatar sx={{ width: 32, height: 32 }}>M</Avatar>\n          </IconButton>\n        </ListItemIcon>\n\n        <ListItemText\n          primary={me.name}\n          primaryTypographyProps={{ color: \"white\", textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n          secondary={me.user_email}\n          secondaryTypographyProps={{ color: \"white\", textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n          title={client.config.jid}\n        />\n      </ListItem>\n\n      <Menu\n        anchorEl={anchorEl}\n        id=\"account-menu\"\n        open={open}\n        onClose={handleClose}\n        onClick={handleClose}\n        PaperProps={{\n          elevation: 0,\n          sx: {\n            overflow: 'visible',\n            filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))',\n            mt: 1.5,\n            '& .MuiAvatar-root': {\n              width: 32,\n              height: 32,\n              ml: -0.5,\n              mr: 1,\n            },\n            '&:before': {\n              content: '\"\"',\n              display: 'block',\n              position: 'absolute',\n              top: 0,\n              right: 14,\n              width: 10,\n              height: 10,\n              bgcolor: 'background.paper',\n              transform: 'translateY(-50%) rotate(45deg)',\n              zIndex: 0,\n            },\n          },\n        }}\n        transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n      >\n        <MenuItem disabled>\n          <Avatar /> Profile\n        </MenuItem>\n\n        <Divider />\n\n        {statusList.map((s) => (\n          <MenuItem key={s.key} onClick={() => setStatus(s.key)}>\n            <ListItemIcon>\n              <Circle fontSize=\"small\" sx={{ color: s.color }} />\n            </ListItemIcon>\n\n            <ListItemText primary={s.label} />\n          </MenuItem>\n        ))}\n\n        <Divider />\n\n        <MenuItem disabled>\n          <ListItemIcon>\n            <Settings fontSize=\"small\" />\n          </ListItemIcon>\n          Settings\n        </MenuItem>\n\n        <MenuItem onClick={signOut}>\n          <ListItemIcon>\n            <Logout fontSize=\"small\" />\n          </ListItemIcon>\n          Logout\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\n\nexport default Profile;\n","import {\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n} from \"@mui/material\";\n\nimport {\n  Contacts as ContactsIcon,\n  Chat as ChatIcon,\n  Logout as LogoutIcon,\n} from \"@mui/icons-material\";\n\nimport Profile from './profile';\n\nconst items = [\n  {\n    route: \"contacts\",\n    label: \"Contacts\",\n    iconComponent: ContactsIcon,\n  },\n  {\n    route: \"messages\",\n    label: \"Messages\",\n    iconComponent: ChatIcon,\n  },\n]\n\nconst SideBar = ({ client, me, setNav, nav, signOut }) => (\n  <List sx={{\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"200px\",\n    minWidth: \"200px\",\n    background: \"#091c38\",\n    color: \"white\"\n  }}>\n    <Profile client={client} me={me} signOut={signOut} />\n\n    {items.map(i => {\n      const IconComponent = i.iconComponent;\n\n      return (\n        <ListItem key={i.route} disablePadding sx={{ background: nav === i.route ? 'rgba(255,255,255,0.1)' : 'transparent' }}>\n          <ListItemButton onClick={() => setNav(i.route)}>\n            <ListItemIcon>\n              <IconComponent sx={{ color: \"white\" }} />\n            </ListItemIcon>\n\n            <ListItemText>\n              {i.label}\n            </ListItemText>\n          </ListItemButton>\n        </ListItem>\n      )})}\n\n    {/* <ListItem disablePadding sx={{ mt: \"auto\" }}> */}\n    {/*   <ListItemButton onClick={signOut}> */}\n    {/*     <ListItemIcon> */}\n    {/*       <LogoutIcon sx={{ color: \"white\" }} /> */}\n    {/*     </ListItemIcon> */}\n\n    {/*     <ListItemText> */}\n    {/*       Log Out */}\n    {/*     </ListItemText> */}\n    {/*   </ListItemButton> */}\n    {/* </ListItem> */}\n  </List>\n);\n\nexport default SideBar;\n","import {\n  Box,\n  Button,\n  Stack,\n  TextField,\n  IconButton,\n  Autocomplete,\n  Menu,\n  MenuItem,\n  Divider,\n} from \"@mui/material\";\nimport { useState, useEffect, useRef } from \"react\";\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport GroupAddIcon from '@mui/icons-material/GroupAdd';\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport VideoCameraFrontIcon from '@mui/icons-material/VideoCameraFront';\nimport { blue } from \"@mui/material/colors\";\n\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport db from './db';\n\nconst Message = ({ client, user, API_BASE, jwt, allUsers }) => {\n  const [members, setMembers] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [showAddUserToRoom, setShowAddUserToRoom] = useState(false);\n  const scrollRef = useRef(null);\n\n  const [roomListAnchorEl, setRoomListAnchorEl] = useState(null);\n  const showRoomList = Boolean(roomListAnchorEl);\n\n  const messages = useLiveQuery(() => \n    db.messages.where(\"from\").equals(user.jid).or(\"to\").equals(user.jid).sortBy(\"timestamp\"),\n  [user]) || [];\n\n  const extendedMessages = messages.map((message) => { // add user info\n    const user = allUsers.find((u) => message.from.includes(u.user_id));\n    const name = user?.name || message.from;\n\n    return { ...message, user, name };\n  });\n\n  const removeContact = async () => {\n    if (user.isRoom) {\n      // TODO: bare jid\n      await client.setRoomAffiliation(user.jid, client.jid, \"none\");\n      await client.leaveRoom(user.jid);\n    } else {\n      await client.removeRosterItem(user.jid);\n      await client.unsubscribe(user.jid);\n    }\n  };\n\n  const sendMessage = () => {\n    if (!message) {\n      return;\n    }\n\n    const type = user.isRoom ? 'groupchat' : 'chat';\n    client.sendMessage({ to: user.jid, body: message, type });\n    setMessage(\"\");\n  };\n\n  const invite = async () => {\n    const body = await createMeeting(API_BASE, jwt);\n    if (body.uuid) {\n      client.sendMessage({ to: user.jid, body: body.uuid, type: 'meeting-invite' });\n    }\n  };\n\n  const memberList = async (event) => {\n    const res = await client.getRoomMembers(user.jid);\n\n    setMembers(res.muc.users.map((m) => ({\n      ...m,\n      name: allUsers.find((u) => m.jid.includes(u.user_id))?.name,\n    })));\n\n    setRoomListAnchorEl(event.target);\n  };\n\n  const closeRoomList = () => setRoomListAnchorEl(null);\n  const openAddUser = () => {\n    closeRoomList();\n    setShowAddUserToRoom(true);\n  }\n\n  useEffect(() => {\n    scrollRef.current.scrollTop = scrollRef?.current?.scrollHeight;\n  }, [messages]);\n\n  return (\n    <Stack sx={{ flexGrow: 1 }}>\n      <AddUserToRoomPrompt\n        client={client}\n        room={user}\n        open={showAddUserToRoom}\n        close={() => setShowAddUserToRoom(false) }\n        allUsers={allUsers}\n      />\n\n      <Stack direction=\"row\" sx={{ px: 2, background: \"white\", alignItems: \"center\" }}>\n        <h2>{user.name}</h2>\n\n        <IconButton sx={{ ml: \"auto\" }} onClick={removeContact}>\n          <DeleteIcon fontSize=\"inherit\" />\n        </IconButton>\n\n        {user.isRoom && <>\n          <IconButton onClick={memberList}>\n            <GroupAddIcon fontSize=\"inherit\" />\n          </IconButton>\n\n          <Menu\n            id=\"basic-menu\"\n            anchorEl={roomListAnchorEl}\n            open={showRoomList}\n            onClose={closeRoomList}\n            MenuListProps={{\n              'aria-labelledby': 'basic-button',\n            }}\n          >\n            {members.map((m) => (\n              <MenuItem key={m.jid}>{m.name}</MenuItem>\n            ))}\n            <Divider />\n            <MenuItem onClick={openAddUser}>Add</MenuItem>\n          </Menu>\n        </>}\n\n        <IconButton onClick={invite}>\n          <VideoCameraFrontIcon fontSize=\"inherit\" />\n        </IconButton>\n      </Stack>\n\n      <Stack sx={{ background: \"#eee\", flexGrow: 1, overflow: \"auto\", px: \"10%\" }} ref={scrollRef}>\n        {extendedMessages.map(m => <Chat key={m.id} message={m} client={client} isRoom={user.isRoom} />)}\n      </Stack>\n\n      <Stack direction=\"row\" sx={{ p: 1 }}>\n        <TextField\n          onChange={(e) => setMessage(e.target.value)}\n          value={message}\n          sx={{ flexGrow: 1 }}\n          placeholder=\"Send a message...\"\n          onKeyPress={(e) => e.key === 'Enter' && sendMessage() }\n          InputProps={{ endAdornment: <Button onClick={sendMessage}>Send</Button> }}\n        />\n\n        {/* <Button variant=\"primary\" onClick={sendMessage}>Send</Button> */}\n      </Stack>\n    </Stack>\n  );\n};\n\nconst Chat = ({ message, client, isRoom }) => {\n  const mine = !message.from || message.from.includes(client.config.jid);\n\n  // if we're in a room, grab the user's jid from the `from` field\n  // if it's a direct chat, grab just the bare JID\n  // const jid = message.from?.split(\"/\")[isRoom ? 1 : 0];\n\n  return (\n    <Box\n      className={`chat-message ${mine ? \"mine\" : \"\"}`}\n      sx={{\n        background: mine ? blue[700] : \"white\",\n        color: mine ? \"white\" : \"black\",\n        p: 1.5,\n        mx: 2, my: 1,\n        borderRadius: 2,\n        marginLeft: mine ? \"auto\" : 0,\n        marginRight: mine ? 0 : \"auto\",\n      }}\n    >\n      <span style={{ fontSize: \"0.8em\" }}>\n        <b>{message.name}</b>\n        <span style={{ marginLeft: \"1em\", color: mine ? \"#eee\" : \"#666\" }}>{message.timestamp.toLocaleString()}</span>\n      </span>\n      <br />\n      {message.body}\n    </Box>\n  );\n}\n\nasync function createMeeting(API_BASE, jwt) {\n  const url = `${API_BASE}/api/meeting`;\n  const mstart = parseInt(new Date().getTime() / 1000);\n\n  const formData = new FormData();\n  formData.append(\"name\", \"Instant Meeting\");\n  formData.append(\"mstart\", mstart.toString());\n  formData.append(\"duration\", \"3600\");\n\n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: jwt,\n    },\n    body: formData,\n  }).then(res => res.json());\n};\n\nconst AddUserToRoomPrompt = ({ open, close, allUsers, client, room }) => {\n  const [user, setUser] = useState(\"\");\n\n  const onAdd = () => {\n    const jid = `${user}@saas-msg.visionable.one`; // TODO: use constant\n    client.setRoomAffiliation(room.jid, jid, \"member\")\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add User to Room</DialogTitle>\n\n      <DialogContent>\n        <Autocomplete\n          sx={{ width: 400, my: 1 }}\n          onChange={(_, u) => u && setUser(u.id)}\n          options={allUsers.map(u => ({\n            label: `${u.name} (${u.user_email})`,\n            id: u.user_id,\n          }))}\n          renderInput={(params) => <TextField {...params} label=\"User\" />}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default Message;\n","import { useState } from \"react\";\n\nimport {\n  Box,\n  Button,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemButton,\n  Avatar,\n  ListItemText,\n  TextField,\n  Paper,\n  Stack,\n  Autocomplete,\n  IconButton,\n  Menu,\n  MenuItem,\n} from \"@mui/material\";\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport AddIcon from '@mui/icons-material/Add';\nimport GroupsIcon from '@mui/icons-material/Groups';\n\nimport Message from './message';\n\nconst AddRoomPrompt = ({ open, close, add }) => {\n  const [roomName, setRoomName] = useState(\"\");\n\n  const onAdd = () => {\n    add(roomName);\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add Room</DialogTitle>\n\n      <DialogContent>\n        <TextField\n          sx={{ width: 400, my: 1 }}\n          onChange={(e) => setRoomName(e.target.value)}\n          label=\"Room name\"\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst AddContactPrompt = ({ open, close, add, allUsers }) => {\n  const [newContact, setNewContact] = useState(\"\");\n\n  const onAdd = () => {\n    add(newContact);\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add Contact</DialogTitle>\n\n      <DialogContent>\n        <Autocomplete\n          sx={{ width: 400, my: 1 }}\n          onChange={(_, u) => u && setNewContact(u.id)}\n          options={allUsers.map(u => ({\n            label: userDisplayName(u),\n            id: u.user_id,\n          }))}\n          renderInput={(params) => <TextField {...params} label=\"User\" />}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n// TODO use teh name property\nconst userDisplayName = (u) => `${u.user_firstname} ${u.user_lastname} (${u.user_email})`;\n\nconst Roster = ({\n  roster,\n  client,\n  allUsers,\n  API_BASE,\n  MUC_LIGHT_HOSTNAME,\n  jwt,\n}) => {\n  const [search, setSearch] = useState(\"\");\n  const [subNav, setSubNav] = useState(null);\n  const [showAddContact, setShowAddContact] = useState(false);\n  const [showAddRoom, setShowAddRoom] = useState(false);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const showAddMenu = Boolean(anchorEl);\n\n  const openAddMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const closeAddMenu = () => {\n    setAnchorEl(null);\n  };\n\n  const addContact = (uuid) => {\n    const jid = `${uuid}@${client.config.server}`;\n    client.subscribe(jid);\n  }\n\n  // TODO: this will use the Room API in the future\n  const addRoom = async (name) => {\n    const uuid = crypto.randomUUID();\n    const jid = `${uuid}@${MUC_LIGHT_HOSTNAME}`;\n    const res = await client.joinRoom(jid);\n    console.log(\"created room!\", res);\n    client.configureRoom(jid, { fields: [ { name: 'roomname', value: name } ] });\n  }\n\n  // filter by search\n  const filteredRoster = roster.filter(r =>\n    r.name?.toLowerCase().includes(search.toLowerCase()) || r.jid?.includes(search));\n\n  const messages = {}; // TODO\n\n  const chatMessages = subNav && messages[subNav.jid]\n    ? messages[subNav.jid]\n    : [];\n\n  return (\n    <>\n      <AddContactPrompt\n        add={addContact}\n        close={() => setShowAddContact(false)}\n        open={showAddContact}\n        allUsers={allUsers}\n      />\n\n      <AddRoomPrompt\n        add={addRoom}\n        close={() => setShowAddRoom(false)}\n        open={showAddRoom}\n      />\n\n      <Paper className=\"scroll-list-container\" sx={{ width: 300 }}>\n        <Box sx={{ px: 2 }}>\n          <Stack direction=\"row\" sx={{ alignItems: \"center\" }}>\n            <h2>Contacts</h2>\n\n            <IconButton sx={{ ml: \"auto\" }} onClick={openAddMenu}>\n              <AddIcon fontSize=\"inherit\" />\n            </IconButton>\n\n            <Menu\n              id=\"basic-menu\"\n              anchorEl={anchorEl}\n              open={showAddMenu}\n              onClose={closeAddMenu}\n              MenuListProps={{\n                'aria-labelledby': 'basic-button',\n              }}\n            >\n              <MenuItem onClick={() => { closeAddMenu(); setShowAddContact(true)}}>Add Contact</MenuItem>\n              <MenuItem onClick={() => { closeAddMenu(); setShowAddRoom(true)}}>Add Room</MenuItem>\n            </Menu>\n          </Stack>\n\n          <TextField\n            type=\"search\"\n            label=\"Search\"\n            variant=\"filled\"\n            size=\"small\"\n            fullWidth\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </Box>\n\n        <List className=\"scroll-list\">\n          {filteredRoster.map((u) => (\n            <ListItem key={u.jid} disablePadding>\n              <ListItemButton onClick={() => setSubNav(u)}>\n                <ListItemAvatar>\n                  <Avatar>\n                    {u.isRoom\n                      ? <GroupsIcon />\n                      : initials(u)}\n                  </Avatar>\n                </ListItemAvatar>\n\n                <ListItemText\n                  primary={u.name}\n                  primaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  secondary={u.user?.user_email}\n                  secondaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  title={u.jid}\n                />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n\n      <Paper className=\"right-section\">\n        {subNav && <Message allUsers={allUsers} client={client} user={subNav} messages={chatMessages} API_BASE={API_BASE} jwt={jwt} />}\n      </Paper>\n    </>\n  );\n};\n\n// TODO put this is allUsers state\nfunction initials(u) {\n  return u.name?.split(\" \")?.slice(0, 2)?.map(n => n.substr(0, 1));\n}\n\nexport default Roster;\n","import { useState } from 'react';\nimport {\n  Box,\n  TextField,\n  Paper,\n  Stack,\n  // Divider,\n  // Dialog,\n  // DialogTitle,\n  // DialogContent,\n  // DialogActions,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemAvatar,\n  ListItemText,\n  Avatar,\n  // Autocomplete,\n} from \"@mui/material\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\n\nimport GroupsIcon from '@mui/icons-material/Groups';\n\nimport Message from \"./message\";\n\nimport db from \"./db\";\n\nconst Messages = ({ client, allUsers, roster, jwt, API_BASE }) => {\n  const [search, setSearch] = useState(\"\");\n  const [subNav, setSubNav] = useState(null);\n\n  // pull out all of the unique IDs from all of the messages\n  const tos = useLiveQuery(() => db.messages.orderBy(\"to\").uniqueKeys()) || [];\n  const froms = useLiveQuery(() => db.messages.orderBy(\"from\").uniqueKeys()) || [];\n  const jids = tos.concat(froms).filter((v, i, a) => a.indexOf(v) === i); // all unique jids\n\n  const users = jids?.map(jid => { // add names\n    const user = allUsers.find((u) => jid.includes(u.user_id));\n    const name = user?.name // user names come from all users\n      || roster.find((r) => r.jid === jid)?.name // room names will be in your roster\n      || jid;\n\n    return { jid, user, name };\n  });\n\n  const filteredUsers = users?.filter((u) => { // filter by search\n    const s = search.toLowerCase();\n    return u.name?.toLowerCase().includes(s)\n      || s.includes(u.name?.toLowerCase())\n      || u.user?.user_email?.includes(s)\n      || s.includes(u.user?.user_email);\n  });\n\n  return (\n    <>\n      <Paper className=\"scroll-list-container\" sx={{ width: 300 }}>\n        <Box sx={{ px: 2 }}>\n          <Stack direction=\"row\" sx={{ alignItems: \"center\" }}>\n            <h2>Chat</h2>\n          </Stack>\n\n          <TextField\n            type=\"search\"\n            label=\"Search\"\n            variant=\"filled\"\n            size=\"small\"\n            fullWidth\n            onChange={(e) => setSearch(e.target.value)}\n            />\n        </Box>\n\n        <List className=\"scroll-list\">\n          {filteredUsers.map((u) => (\n            <ListItem key={u.jid} disablePadding>\n              <ListItemButton onClick={() => setSubNav(u)}>\n                <ListItemAvatar>\n                  <Avatar>\n                    {u.isRoom\n                      ? <GroupsIcon />\n                      : initials(u)}\n                  </Avatar>\n                </ListItemAvatar>\n\n                <ListItemText\n                  primary={u.name}\n                  primaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  secondary={u.user?.user_email}\n                  secondaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  title={u.jid}\n                />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n\n      <Paper className=\"right-section\">\n        {subNav && <Message allUsers={allUsers} client={client} user={subNav} API_BASE={API_BASE} jwt={jwt} />}\n      </Paper>\n    </>\n  );\n};\n\n// TODO put this is allUsers state\nfunction initials(u) {\n  return u.name?.split(\" \")?.slice(0, 2)?.map(n => n.substr(0, 1));\n}\n\nexport default Messages;\n","import { useState, useEffect, createContext, useContext } from \"react\";\nimport * as XMPP from \"stanza\";\nimport Amplify, { Auth, Hub } from \"aws-amplify\";\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Snackbar,\n  Alert,\n} from \"@mui/material\";\n\nimport db from \"./db\";\nimport \"./App.css\";\nimport Login from \"./login\";\nimport SideBar from \"./sidebar\";\nimport Roster from \"./roster\";\nimport Messages from \"./messages\";\n\nwindow.db = db;\n\n// AWS Config\nconst REGION = \"us-east-1\";\nconst USER_POOL_ID = \"us-east-1_ESYPvGhN3\";\nconst USER_POOL_WEB_CLIENT_ID = \"5ai2feek1rgpso497om1kbj4ug\";\nconst API_BASE = \"https://saas-api.visionable.one\";\n\n// XMPP Config\n// const HOSTNAME = \"saas-msg.visionable.one\";\nconst PROTOCOL = \"wss\";\nconst PORT = \"5443\";\nconst ENDPOINT = \"ws-xmpp\";\n// const MUC_LIGHT_HOSTNAME = `muclight.${HOSTNAME}`;\n\nAmplify.configure({\n  Auth: {\n    region: REGION,\n    userPoolId: USER_POOL_ID,\n    userPoolWebClientId: USER_POOL_WEB_CLIENT_ID,\n  },\n});\n\nconst resource = localStorage.getItem(\"xmpp-resource\") || crypto.randomUUID();\nlocalStorage.setItem(\"xmpp-resource\", resource);\n\nconst initXMPP = async (jid, password, hostname) =>\n  XMPP.createClient({\n    jid,\n    password,\n    resource,\n    transports: {\n      websocket: `${PROTOCOL}://${hostname}:${PORT}/${ENDPOINT}`,\n    },\n  });\n\nconst App = () => {\n  const [client, setClient] = useState(null);\n  const [username, setUsername] = useState(localStorage.getItem(\"username\") || \"\");\n  const [password, setPassword] = useState(\"Green12345!\");\n  const [jid, setJid] = useState(\"\");\n  const [jwt, setJwt] = useState(\"\");\n  const [online, setOnline] = useState(false);\n  const [roster, setRoster] = useState([]);\n  const [presence, setPresence] = useState({});\n  const [incomingInvites, setIncomingInvites] = useState([]);\n  const [inviteResponses, setInviteResponses] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [allUsers, setAllUsers] = useState([]);\n  const [nav, setNav] = useState(\"contacts\");\n  const [connected, setConnected] = useState(false);\n  const [server, setServer] = useState(\"saas.visionable.one\");\n  const [config, setConfig] = useState({});\n\n  useEffect(() => {\n    (async function () {\n      // setConfig(await getServiceConfig(server));\n    })();\n  }, [server])\n\n  const [serviceName, ...[domain]] = server.split(/\\.(.*)/s); // split out the serviceName from the rest of the host\n  const xmppHostname = `${serviceName}-msg.${domain}`; // e.g. saas-msg.visionable.one\n  const mucHostname = `muclight.${xmppHostname}`; // e.g. muclight.saas-msg.visionable.one\n\n  const signIn = async () => {\n    setError(\"\");\n    setLoading(true);\n\n    if (localStorage.getItem(\"username\") !== username) {\n      await db.messages.clear();\n    }\n\n    localStorage.setItem(\"username\", username);\n\n    try {\n      const { username: uuid, signInUserSession: session } = await Auth.signIn(username, password);\n      const jwt = session.idToken.jwtToken;\n      setJwt(jwt);\n      const jid = `${uuid}@${xmppHostname}`;\n      setJid(jid);\n      const xmpp = await initXMPP(jid, jwt, xmppHostname);\n\n      setClient(xmpp);\n      setLoading(false);\n      setConnected(true);\n\n      const cognitoUsers = await getAllUsers(jwt);\n      const extendedUsers = cognitoUsers.map((u) => ({ ...u, name: userFullName(u) }));\n      setAllUsers(extendedUsers);\n\n      window.client = xmpp;\n\n      xmpp.on(\"session:started\", async () => {\n        xmpp.sendPresence();\n        xmpp.enableKeepAlive();\n        xmpp.enableCarbons();\n        setOnline(true);\n\n        const roster = (await xmpp.getRoster()).items;\n        setRoster(roster);\n\n        // Get all of the messages up until the last one I've seen\n        const lastMessage = await db.messages.orderBy(\"timestamp\").last();\n        getAllMessages({ client: xmpp, start: lastMessage?.timestamp });\n      });\n\n      xmpp.on(\"message\", (message) => {\n        if (message.type === 'meeting-invite') {\n          setIncomingInvites((prev) => [...prev, message]);\n        } else if (message.type === \"chat\") {\n          const [from] = message.from.split(\"/\");\n\n          db.messages.put({\n            id: message.id,\n            from,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group: null,\n            timestamp: new Date(),\n          }, message.id)\n        } else if (message.type === \"groupchat\") {\n          // TODO: DRY up this code, same as regular chat?\n          const [room, user] = message.from.split(\"/\");\n          console.log(\"GOT A GROUPCHAT\", room, user);\n        }\n      });\n\n      xmpp.on(\"message:sent\", (message) => {\n        if (message.type === 'meeting-invite') {\n          // TODO: display something in the chat\n        } else if (message.type === \"chat\") {\n          db.messages.put({\n            id: message.id,\n            from: xmpp.config.jid,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group: null, // TODO\n            timestamp: new Date(),\n          }, message.id)\n        } else if (message.type === \"groupchat\") {\n          // TODO: just seems to work??\n        }\n      });\n\n      xmpp.on(\"mam:item\", (mam) => {\n        // TODO groupchat\n        const message = mam.archive?.item?.message;\n        const timestamp = mam.archive?.item?.delay?.timestamp;\n        if (message.type === 'chat') {\n          const { to } = message;\n          const [from] = message.from.split(\"/\");\n          const fullUser = to?.includes(xmpp.config.jid) ? from : to;\n          if (!fullUser) {\n            console.log(\"NO FULL USER\", message);\n            return;\n          }\n\n          db.messages.put({\n            id: message.id,\n            from,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group: null,\n            timestamp,\n          }, message.id)\n        }\n      });\n\n      xmpp.on(\"subscribe\", (data) => { // if someone subscribes to us..\n        xmpp.acceptSubscription(data.from); // auto accept\n        // xmpp.subscribe(data.from); // TODO: and auto add them to ours?\n      });\n\n      xmpp.on(\"unsubscribe\", (data) => { // if someone removes me from their roster\n        // xmpp.unsubscribe(data.from); // remove them from ours?\n      });\n\n      xmpp.on(\"roster:update\", async (data) => { // roster item change\n        data.roster.items.forEach((r) => {\n          // setMessages((prev) => ({ ...prev, [r.jid]: [] })); // delete any messages from them\n          xmpp.searchHistory({ with: r.jid, paging: { before: \"\" }}); // and replace\n        });\n\n        setRoster((await xmpp.getRoster()).items)\n      });\n\n      // if someone adds you to a room, auto accept it\n      xmpp.on(\"muc:invite\", (data) => {\n        client.joinRoom(data.room);\n      });\n\n      // created or added to a room\n      xmpp.on(\"muc:available\", async () =>\n        setRoster((await xmpp.getRoster()).items)\n      );\n\n      // no longer in a room\n      xmpp.on(\"muc:unavailable\", async () =>\n        setRoster((await xmpp.getRoster()).items)\n      );\n\n      xmpp.on(\"presence\", (data) => {\n        setPresence((prev) => ({ ...prev, [data.from]: data }))\n      });\n\n      /*\n      xmpp.on(\"available\", (data) => {\n        const jid = data.from.replace(/\\/.*$/, \"\");\n        setPresence((prev) => ({ ...prev, [jid]: 'Available' }));\n      });\n*/\n\n      xmpp.on(\"*\", async (type, data) => {\n        console.log(type, data);\n      });\n\n      // on disconnect, retry\n      xmpp.on(\"disconnected\", () => {\n        setConnected(false);\n        // setTimeout(xmpp.connect, 3000)\n      })\n\n      xmpp.on(\"connected\", () => {\n        setConnected(true);\n      })\n\n      xmpp.connect();\n    } catch (e) {\n      console.error(\"caught\", e);\n      setLoading(false);\n      setError(e.message);\n    }\n  };\n\n  // TODO: re-authenticate when our JWT refreshes\n  useEffect(() => {\n    Hub.listen('auth', async (data) => {\n      if (data.payload.event === \"tokenRefresh\") {\n        console.log(\"token refreshed\", data);\n        // client.config.credentials.password = (await Auth.currentSession()).idToken.jwtToken;\n        // client.connect();\n      }\n    });\n  }, []);\n\n  // extend the roster with info from the User API, presence, etc.\n  const extendedRoster = roster.map(r => {\n    const user = allUsers.find(u => r.jid.includes(u.user_id));\n    const name = r.name // if the roster item has a name\n      ? r.name // use that\n      : user // otherwise, if there's a corresponding user from the User API\n        ? userFullName(user) // get the name of that\n        : r.jid;// otherwise, just show their JID\n\n    // grab all of the resources that we've been given presence for this user\n    const resources = Object.values(presence)\n      .filter((p) => p.from.includes(r.jid))\n      .map((u) => u.from.split(\"/\")?.[1]);\n\n    return {\n      ...r,\n      user,\n      name, \n      resources,\n      isRoom: !!r.groups?.[0]?.includes(\"muc\"),\n    };\n  });\n\n  // console.log('new presence list', presence);\n  // console.log(\"extended roster\", extendedRoster);\n\n  // find my own user from the User API\n  const me = allUsers.find((u) => client.jid.match(u.user_id));\n\n  const reconnect = async () => {\n    client.config.credentials.password = (await Auth.currentSession()).idToken.jwtToken;\n    client.connect();\n  };\n\n  const signOut = async () => {\n    client.disconnect();\n    setOnline(false);\n    setConnected(false);\n    setRoster([]);\n    setPresence({});\n    db.messages.clear();\n\n    try {\n      await Auth.signOut();\n    } catch (error) {\n      console.log(\"error signing out: \", error);\n    }\n  };\n\n  const acceptInvite = (message) => {\n    setInviteResponses((prev) => ({ ...prev, [message.id]: \"accept\" }))\n    client.sendMessage({ to: message.from, body: message.id, type: 'meeting-invite-accept' });\n  };\n\n  const rejectInvite = (message) => {\n    setInviteResponses((prev) => ({ ...prev, [message.id]: \"reject\" }))\n    client.sendMessage({ to: message.from, body: message.id, type: 'meeting-invite-reject' });\n  };\n\n  const onChangeUsername = (e) => {\n    setUsername(e.target.value);\n    setError(null);\n  };\n\n  const onChangePassword = (e) => {\n    setPassword(e.target.value);\n    setError(null);\n  };\n\n  const onChangeServer = (e) => {\n    setServer(e.target.value);\n    setError(null);\n  };\n\n  /*\n  const changeName = () => {\n    client.publishVCard({ fullName: newName });\n  };\n\n  const getVCard = async () => {\n    try {\n      const card = await client.getVCard(jid);\n      console.log(\"my card\", card);\n      setNewName(card?.fullName);\n    } catch (e) {\n      console.error(\"Error getting vcard\", e);\n    }\n  };\n\n  const getMUCLightRooms = async () => {\n    const res = await client.getDiscoItems(MUC_LIGHT_HOSTNAME);\n  }\n\n  const uploadFile = (e) => {\n    Array.from(e.target.files).forEach(async (f) => {\n      const { name, size, type: mediaType } = f; // TODO files with spaces in name fail\n      console.log('file', name, size, mediaType);\n      const service = await client.getUploadService();\n      console.log('service', service);\n      const slot = await client.getUploadSlot(service.jid, { name, size, mediaType })\n      console.log('slot', slot);\n      const { download: downloadUrl, upload: { url: uploadUrl } } = slot;\n      console.log('got urls', downloadUrl, uploadUrl);\n      const res = await fetch(uploadUrl, {\n        method: \"PUT\",\n        body: f,\n        headers: { \"x-amz-acl\": \"public-read\" },\n      });\n      console.log('res', res);\n\n      if (to) { // send notification\n        client.sendMessage({ to, body: downloadUrl, type: 'file-upload' });\n      }\n    })\n  }\n*/\n\n  if (!online) {\n    return (\n      <div className=\"App\">\n        <Login loading={loading} username={username} onChangeUsername={onChangeUsername} password={password} onChangePassword={onChangePassword} error={error} signIn={signIn} server={server} onChangeServer={onChangeServer} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <SideBar nav={nav} setNav={setNav} signOut={signOut} client={client} me={me} />\n\n      <Snackbar\n        onClick={reconnect}\n        open={!connected}\n        anchorOrigin={{ horizontal: \"center\", vertical: \"bottom\" }}\n        sx={{ cursor: \"pointer\" }}\n      >\n        <Alert severity=\"error\" sx={{ width: '100%' }}>Disconnected. Click here to reconnect</Alert>\n      </Snackbar>\n\n      <IncomingInvites\n        accept={acceptInvite}\n        reject={rejectInvite}\n        invites={incomingInvites}\n        responses={inviteResponses} />\n\n      <Box className=\"main\">\n        {nav === 'contacts'\n          ? <Roster\n              roster={extendedRoster}\n              // presence={presence}\n              allUsers={allUsers}\n              client={client}\n              API_BASE={API_BASE}\n              MUC_LIGHT_HOSTNAME={mucHostname}\n              jwt={jwt}\n            />\n          : nav === 'messages'\n            ? <Messages\n                roster={extendedRoster}\n                // presence={presence}\n                allUsers={allUsers}\n                client={client}\n                API_BASE={API_BASE}\n                MUC_LIGHT_HOSTNAME={mucHostname}\n                jwt={jwt}\n              />\n            : null}\n      </Box>\n    </div>\n  );\n};\n\nconst IncomingInvites = ({ accept, reject, invites, responses }) =>\n  invites.filter((m) => !responses[m.id]).map((m) => (\n    <Dialog key={m.id} open={true}>\n      <DialogTitle>Meeting Invite</DialogTitle>\n      <DialogContent>\n        <p>Invite ID: {m.id}</p>\n        <p>From: {m.from}</p>\n        <p>Meeting ID: {m.body}</p>\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"error\" onClick={() => reject(m)}>Reject</Button>\n        <Button onClick={() => accept(m)}>Accept</Button>\n      </DialogActions>\n    </Dialog>\n  ));\n\nconst getAllUsers = async (jwt) => {\n  const res = await fetch(`${API_BASE}/api/user`, { headers: { Authorization: jwt } });\n  return res.ok ? res.json() : [];\n}\n\nfunction userFullName(user) {\n  return user?.name\n  ? user.name\n    : user?.user_displayname\n      ? user.user_displayname\n      : user?.user_firstname\n        ? `${user.user_firstname} ${user.user_lastname}`\n        : \"[No Name]\";\n}\n\nasync function getServiceConfig(hostname) {\n  try {\n    const res = await fetch(`https://${hostname}/config.json`);\n    return await res.json();\n  } catch(e) {\n    console.log(e);\n    alert(\"Error requesting configuration data for this service\");\n  }\n}\n\nasync function getAllMessages({ client, start, after }) {\n  const paging = after ? { after } : {};\n  const { complete, paging: { last } } = await client.searchHistory({ start, paging });\n\n  if (!complete) {\n    getAllMessages({ client, after: last });\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}