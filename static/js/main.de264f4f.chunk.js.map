{"version":3,"sources":["db.js","profile.js","sidebar.js","message.js","roster.js","messages.js","inbox.ts","App.js","index.js"],"names":["db","Dexie","version","stores","messages","initials","u","name","split","slice","map","n","substr","Profile","client","me","signOut","useState","setStatus","anchorEl","setAnchorEl","activity","setActivity","open","Boolean","handleClose","statusList","key","color","label","icon","Circle","ListItem","disablePadding","onClick","event","currentTarget","sx","mx","Avatar","ListItemText","primary","primaryTypographyProps","textOverflow","overflow","whiteSpace","secondary","user_email","secondaryTypographyProps","title","config","jid","Menu","id","onClose","s","MenuItem","status","sendPresence","changeStatus","ListItemIcon","fontSize","text","prompt","publishActivity","Divider","disabled","items","route","iconComponent","ContactsIcon","ChatIcon","SideBar","setNav","nav","List","display","flexDirection","width","minWidth","background","i","IconComponent","ListItemButton","Chat","message","mine","isRoom","from","includes","Box","className","blue","p","my","borderRadius","marginLeft","marginRight","style","timestamp","toLocaleString","body","createMeeting","API_BASE","jwt","a","url","mstart","parseInt","Date","getTime","formData","FormData","append","toString","fetch","method","headers","Authorization","then","res","json","AddUserToRoomPrompt","close","allUsers","room","user","setUser","Dialog","DialogTitle","DialogContent","Autocomplete","onChange","_","options","user_id","renderInput","params","TextField","DialogActions","Button","setRoomAffiliation","Message","console","log","members","setMembers","setMessage","showAddUserToRoom","setShowAddUserToRoom","scrollRef","useRef","roomListAnchorEl","setRoomListAnchorEl","showRoomList","useLiveQuery","where","equals","sortBy","or","and","m","group","extendedMessages","find","removeContact","leaveRoom","removeRosterItem","unsubscribe","sendMessage","type","to","invite","uuid","memberList","getRoomMembers","muc","users","target","closeRoomList","useEffect","current","scrollTop","scrollHeight","allOtherUsers","filter","Stack","flexGrow","direction","px","alignItems","IconButton","ml","MenuListProps","ref","e","value","placeholder","onKeyPress","InputProps","endAdornment","AddRoomPrompt","add","roomName","setRoomName","AddContactPrompt","newContact","setNewContact","userDisplayName","user_firstname","user_lastname","Roster","roster","MUC_LIGHT_HOSTNAME","search","setSearch","subNav","setSubNav","showAddContact","setShowAddContact","showAddRoom","setShowAddRoom","tab","setTab","showAddMenu","closeAddMenu","addRoom","crypto","randomUUID","joinRoom","configureRoom","fields","filteredRoster","r","toLowerCase","chatMessages","server","subscribe","Paper","variant","size","fullWidth","borderBottom","borderColor","Tabs","idx","Tab","index","available","away","unavailable","ListItemAvatar","Badge","componentsProps","badge","backgroundColor","border","height","overlap","badgeContent","invisible","anchorOrigin","vertical","horizontal","AddChatPrompt","Messages","showAddChat","setShowAddChat","tos","orderBy","uniqueKeys","froms","jids","concat","v","indexOf","filteredUsers","stanzas","define","element","unread","JXT","attribute","queryid","namespace","path","result","getInbox","sendIQ","inbox","on","msg","emit","window","resource","localStorage","getItem","setItem","initXMPP","password","hostname","XMPP","transports","websocket","IncomingInvites","accept","reject","invites","responses","getAllUsers","ok","userFullName","user_displayname","getAllMessages","start","after","paging","searchHistory","complete","last","App","signOutAWS","setClient","setJwt","setRoster","presence","setPresence","activities","setActivities","incomingInvites","setIncomingInvites","inviteResponses","setInviteResponses","setAllUsers","connected","setConnected","serviceName","domain","xmppHostname","mucHostname","signIn","username","clear","session","signInUserSession","idToken","jwtToken","xmpp","use","IqInbox","cognitoUsers","extendedUsers","updateCaps","legacyCapabilities","disco","getCaps","enableKeepAlive","enableCarbons","getRoster","lastMessage","prev","before","put","mam","archive","item","delay","forwarded","stamp","data","acceptSubscription","forEach","with","connect","addEventListener","disconnect","error","extendedRoster","statuses","Object","values","length","some","every","groups","match","reconnect","updateConfig","credentials","removeItem","Snackbar","cursor","Alert","severity","Context","createContext","HOSTNAME_KEY","AppContainer","setConfig","configure","getServiceConfig","Amplify","Auth","region","userPoolId","userPoolWebClientId","Provider","Authenticator","mode","alert","location","reload","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"2XAEMA,EAAK,I,OAAIC,SAAM,4BAErBD,EAAGE,QAAQ,GAAGC,OAAO,CACnBC,SAAU,iDAGGJ,Q,yKC2Hf,SAASK,EAASC,GAAI,IAAD,MACnB,iBAAOA,EAAEC,YAAT,iBAAO,EAAQC,MAAM,YAArB,iBAAO,EAAoBC,MAAM,EAAG,UAApC,aAAO,EAAiCC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,OAAO,EAAG,MAGhDC,MAxHC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,QAC7B,EAA4BC,mBAAS,aAArC,mBAAeC,GAAf,WACA,EAAgCD,mBAAS,MAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KAEA,EAAgCH,mBAAS,IAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KACMC,EAAOC,QAAQL,GAMfM,EAAc,WAClBL,EAAY,OAuBRM,EAAa,CACjB,CACEC,IAAK,YACLC,MAAO,UACPC,MAAO,YACPC,KAAMC,KAER,CACEJ,IAAK,aACLC,MAAO,UACPC,MAAO,eACPC,KAAMC,KAER,CACEJ,IAAK,OACLC,MAAO,UACPC,MAAO,OACPC,KAAMC,MAIV,OACE,qCACE,eAACC,EAAA,EAAD,CAAUC,gBAAc,EAAxB,UACE,cAAC,IAAD,CAAgBC,QApDF,SAACC,GACnBf,EAAYe,EAAMC,gBAmDwBC,GAAI,CAAEC,GAAI,GAAhD,SACE,cAAC,IAAD,UACE,cAACC,EAAA,EAAD,UAASlC,EAASU,SAItB,cAACyB,EAAA,EAAD,CACEC,QAAS1B,EAAGR,KACZmC,uBAAwB,CAAEd,MAAO,QAASe,aAAc,WAAYC,SAAU,SAAUC,WAAY,UACpGC,UAAW/B,EAAGgC,WACdC,yBAA0B,CAAEpB,MAAO,QAASe,aAAc,WAAYC,SAAU,SAAUC,WAAY,UACtGI,MAAOnC,EAAOoC,OAAOC,SAIzB,eAACC,EAAA,EAAD,CACEjC,SAAUA,EACVkC,GAAG,eACH9B,KAAMA,EACN+B,QAAS7B,EACTS,QAAST,EALX,UAOGC,EAAWhB,KAAI,SAAC6C,GAAD,OACd,eAACC,EAAA,EAAD,CAAsBtB,QAAS,kBAnElB,SAACuB,GACpBvC,EAAUuC,GACV3C,EAAO4C,aAAa,CAAED,WAiEqBE,CAAaJ,EAAE5B,MAApD,UACE,cAACiC,EAAA,EAAD,UACE,cAAC,IAAD,CAAQC,SAAS,QAAQxB,GAAI,CAAET,MAAO2B,EAAE3B,WAG1C,cAACY,EAAA,EAAD,CAAcC,QAASc,EAAE1B,UALZ0B,EAAE5B,QASnB,cAAC6B,EAAA,EAAD,CAAUtB,QAvEO,WACrB,IAAM4B,EAAOC,OAAO,0BAGpBjD,EAAOkD,gBAAgB,CAAEF,SACzBxC,EAAYwC,IAkER,SACGzC,GAAY,iDAGf,cAAC4C,EAAA,EAAD,IAEA,eAACT,EAAA,EAAD,CAAUU,UAAQ,EAAlB,UACE,cAACN,EAAA,EAAD,UACE,cAAC,IAAD,CAAUC,SAAS,YAFvB,cAOA,eAACL,EAAA,EAAD,CAAUtB,QAASlB,EAAnB,UACE,cAAC4C,EAAA,EAAD,UACE,cAAC,IAAD,CAAQC,SAAS,YAFrB,mBCxGFM,EAAQ,CACZ,CACEC,MAAO,WACPvC,MAAO,WACPwC,cAAeC,KAEjB,CACEF,MAAO,WACPvC,MAAO,WACPwC,cAAeE,MA8CJC,EA1CC,SAAC,GAAD,IAAG1D,EAAH,EAAGA,OAAQC,EAAX,EAAWA,GAAI0D,EAAf,EAAeA,OAAQC,EAAvB,EAAuBA,IAAK1D,EAA5B,EAA4BA,QAA5B,OACd,eAAC2D,EAAA,EAAD,CAAMtC,GAAI,CACRuC,QAAS,OACTC,cAAe,SACfC,MAAO,QACPC,SAAU,QACVC,WAAY,UACZpD,MAAO,SANT,UAQE,cAAC,EAAD,CAASd,OAAQA,EAAQC,GAAIA,EAAIC,QAASA,IAEzCmD,EAAMzD,KAAI,SAAAuE,GACT,IAAMC,EAAgBD,EAAEZ,cAExB,OACE,cAACrC,EAAA,EAAD,CAAwBC,gBAAc,EAACI,GAAI,CAAE2C,WAAYN,IAAQO,EAAEb,MAAQ,wBAA0B,eAArG,SACE,eAACe,EAAA,EAAD,CAAgBjD,QAAS,kBAAMuC,EAAOQ,EAAEb,QAAxC,UACE,cAACR,EAAA,EAAD,UACE,cAACsB,EAAD,CAAe7C,GAAI,CAAET,MAAO,aAG9B,cAACY,EAAA,EAAD,UACGyC,EAAEpD,YAPMoD,EAAEb,c,gNCwHnBgB,GAAO,SAAC,GAAiC,IAAD,EAA9BC,EAA8B,EAA9BA,QAASvE,EAAqB,EAArBA,OACjBwE,GADsC,EAAbC,QACjBF,EAAQG,MAAQH,EAAQG,KAAKC,SAAS3E,EAAOoC,OAAOC,MAMlE,OACE,eAACuC,EAAA,EAAD,CACEC,UAAS,uBAAkBL,EAAO,OAAS,IAC3CjD,GAAI,CACF2C,WAAYM,EAAOM,KAAK,KAAO,QAC/BhE,MAAO0D,EAAO,QAAU,QACxBO,EAAG,IACHvD,GAAI,EAAGwD,GAAI,EACXC,aAAc,EACdC,WAAYV,EAAO,OAAS,EAC5BW,YAAaX,EAAO,EAAI,QAT5B,UAYE,uBAAMY,MAAO,CAAErC,SAAU,SAAzB,UACE,4BAAIwB,EAAQ9E,OACZ,sBAAM2F,MAAO,CAAEF,WAAY,MAAOpE,MAAO0D,EAAO,OAAS,QAAzD,mBAAoED,EAAQc,iBAA5E,aAAoE,EAAmBC,sBAEzF,uBACCf,EAAQgB,S,SAKAC,G,mFAAf,WAA6BC,EAAUC,GAAvC,mBAAAC,EAAA,6DACQC,EADR,UACiBH,EADjB,gBAEQI,EAASC,UAAS,IAAIC,MAAOC,UAAY,MAEzCC,EAAW,IAAIC,UACZC,OAAO,OAAQ,mBACxBF,EAASE,OAAO,SAAUN,EAAOO,YACjCH,EAASE,OAAO,WAAY,QAP9B,kBASSE,MAAMT,EAAK,CAChBU,OAAQ,OACRC,QAAS,CACPC,cAAed,GAEjBH,KAAMU,IACLQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WAfrB,4C,sBAkBA,IAAMC,GAAsB,SAAC,GAA6C,IAA3CnG,EAA0C,EAA1CA,KAAMoG,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,SAAU9G,EAAmB,EAAnBA,OAAQ+G,EAAW,EAAXA,KAC5D,EAAwB5G,mBAAS,IAAjC,mBAAO6G,EAAP,KAAaC,EAAb,KAQA,OACE,eAACC,EAAA,EAAD,CAAQzG,KAAMA,EAAM+B,QAASqE,EAA7B,UACE,cAACM,EAAA,EAAD,+BAEA,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACE9F,GAAI,CAAEyC,MAAO,IAAKgB,GAAI,GACtBsC,SAAU,SAACC,EAAG/H,GAAJ,OAAUA,GAAKyH,EAAQzH,EAAE+C,KACnCiF,QAASV,EAASlH,KAAI,SAAAJ,GAAC,MAAK,CAC1BuB,MAAM,GAAD,OAAKvB,EAAEC,KAAP,aAAgBD,EAAEyC,WAAlB,KACLM,GAAI/C,EAAEiI,YAERC,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuB5G,MAAM,eAI1D,eAAC8G,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQ1G,QAASyF,EAAjB,oBACA,cAACiB,EAAA,EAAD,CAAQ1G,QAxBA,WACZ,IAAMiB,EAAG,UAAM2E,EAAN,4BACThH,EAAO+H,mBAAmBhB,EAAK1E,IAAKA,EAAK,UACzCwE,KAqBI,wBAMOmB,GA3NC,SAAC,GAA+C,IAA7ChI,EAA4C,EAA5CA,OAAQgH,EAAoC,EAApCA,KAAMvB,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,IAAKoB,EAAe,EAAfA,SAC9CmB,QAAQC,IAAI,oBAAqBlB,GACjC,MAA8B7G,mBAAS,IAAvC,mBAAOgI,EAAP,KAAgBC,EAAhB,KACA,EAA8BjI,mBAAS,IAAvC,mBAAOoE,EAAP,KAAgB8D,EAAhB,KACA,EAAkDlI,oBAAS,GAA3D,mBAAOmI,EAAP,KAA0BC,EAA1B,KACMC,EAAYC,iBAAO,MAEzB,EAAgDtI,mBAAS,MAAzD,mBAAOuI,EAAP,KAAyBC,EAAzB,KACMC,EAAelI,QAAQgI,GAEvBpJ,EAAWuJ,yBAAa,kBAC5B7B,EAAKvC,OACDvF,EAAGI,SAASwJ,MAAM,SAASC,OAAO/B,EAAK3E,KAAK2G,OAAO,aACnD9J,EAAGI,SAASwJ,MAAM,QAAQC,OAAO/B,EAAK3E,KAAK4G,GAAG,MAAMF,OAAO/B,EAAK3E,KAAK6G,KAAI,SAACC,GAAD,OAAQA,EAAEC,SAAOJ,OAAO,eACrG,CAAChC,GAAO,IAEJqC,EAAmB/J,EACtBM,KAAI,SAAC2E,GACJ,IAAMyC,EAAOF,EAASwC,MAAK,SAAC9J,GAAD,uBAAO+E,EAAQG,YAAf,aAAO,EAAcC,SAASnF,EAAEiI,YACrDhI,GAAW,OAAJuH,QAAI,IAAJA,OAAA,EAAAA,EAAMvH,OAAQ8E,EAAQG,KAEnC,OAAO,2BAAKH,GAAZ,IAAqByC,OAAMvH,YAGzB8J,EAAa,uCAAG,sBAAA5D,EAAA,0DAChBqB,EAAKvC,OADW,gCAEZzE,EAAO+H,mBAAmBf,EAAK3E,IAAKrC,EAAOoC,OAAOC,IAAK,QAF3C,uBAGZrC,EAAOwJ,UAAUxC,EAAK3E,KAHV,8CAKZrC,EAAOyJ,iBAAiBzC,EAAK3E,KALjB,wBAMZrC,EAAO0J,YAAY1C,EAAK3E,KANZ,4CAAH,qDAUbsH,EAAc,WAClB,GAAKpF,EAAL,CAIA,IAAMqF,EAAO5C,EAAKvC,OAAS,YAAc,OACzCzE,EAAO2J,YAAY,CAAEE,GAAI7C,EAAK3E,IAAKkD,KAAMhB,EAASqF,SAClDvB,EAAW,MAGPyB,EAAM,uCAAG,4BAAAnE,EAAA,sEACMH,GAAcC,EAAUC,GAD9B,QACPH,EADO,QAEJwE,MACP/J,EAAO2J,YAAY,CAAEE,GAAI7C,EAAK3E,IAAKkD,KAAMA,EAAKwE,KAAMH,KAAM,mBAH/C,2CAAH,qDAONI,EAAU,uCAAG,WAAO3I,GAAP,eAAAsE,EAAA,sEACC3F,EAAOiK,eAAejD,EAAK3E,KAD5B,OACXqE,EADW,OAGjB0B,EAAW1B,EAAIwD,IAAIC,MAAMvK,KAAI,SAACuJ,GAAD,yBAAC,eACzBA,GADwB,IAE3B1J,KAAI,UAAEqH,EAASwC,MAAK,SAAC9J,GAAD,OAAO2J,EAAE9G,IAAIsC,SAASnF,EAAEiI,mBAAxC,aAAE,EAAiDhI,WAGzDkJ,EAAoBtH,EAAM+I,QART,2CAAH,sDAWVC,EAAgB,kBAAM1B,EAAoB,OAMhD2B,qBAAU,WAAO,IAAD,EACd9B,EAAU+B,QAAQC,UAAlB,OAA8BhC,QAA9B,IAA8BA,GAA9B,UAA8BA,EAAW+B,eAAzC,aAA8B,EAAoBE,eACjD,CAACnL,IAEJ,IAAMoL,EAAgB5D,EAAS6D,QAAO,SAACnL,GAAD,OAAQQ,EAAOoC,OAAOC,IAAIsC,SAASnF,EAAEiI,YAE3E,OACE,eAACmD,EAAA,EAAD,CAAOrJ,GAAI,CAAEsJ,SAAU,GAAvB,UACE,cAAC,GAAD,CACE7K,OAAQA,EACR+G,KAAMC,EACNvG,KAAM6H,EACNzB,MAAO,kBAAM0B,GAAqB,IAClCzB,SAAU4D,IAGZ,eAACE,EAAA,EAAD,CAAOE,UAAU,MAAMvJ,GAAI,CAAEwJ,GAAI,EAAG7G,WAAY,QAAS8G,WAAY,UAArE,UACE,6BAAKhE,EAAKvH,OAEV,cAACwL,EAAA,EAAD,CAAY1J,GAAI,CAAE2J,GAAI,QAAU9J,QAASmI,EAAzC,SACE,cAAC,KAAD,CAAYxG,SAAS,cAGtBiE,EAAKvC,QAAU,qCACd,cAACwG,EAAA,EAAD,CAAY7J,QAAS4I,EAArB,SACE,cAAC,KAAD,CAAcjH,SAAS,cAGzB,eAACT,EAAA,EAAD,CACEC,GAAG,aACHlC,SAAUqI,EACVjI,KAAMmI,EACNpG,QAAS6H,EACTc,cAAe,CACb,kBAAmB,gBANvB,UASGhD,EAAQvI,KAAI,SAACuJ,GAAD,OACX,cAACzG,EAAA,EAAD,UAAuByG,EAAE1J,MAAV0J,EAAE9G,QAEnB,cAACc,EAAA,EAAD,IACA,cAACT,EAAA,EAAD,CAAUtB,QA9CA,WAClBiJ,IACA9B,GAAqB,IA4Cb,uBAIJ,cAAC0C,EAAA,EAAD,CAAY7J,QAAS0I,EAArB,SACE,cAAC,KAAD,CAAsB/G,SAAS,iBAInC,cAAC6H,EAAA,EAAD,CAAOrJ,GAAI,CAAE2C,WAAY,OAAQ2G,SAAU,EAAG/I,SAAU,OAAQiJ,GAAI,OAASK,IAAK5C,EAAlF,SACGa,EAAiBzJ,KAAI,SAAAuJ,GAAC,OAAI,cAAC,GAAD,CAAiB5E,QAAS4E,EAAGnJ,OAAQA,EAAQyE,OAAQuC,EAAKvC,QAA/C0E,EAAE5G,SAG1C,cAACqI,EAAA,EAAD,CAAOE,UAAU,MAAMvJ,GAAI,CAAEwD,EAAG,GAAhC,SACE,cAAC6C,EAAA,EAAD,CACEN,SAAU,SAAC+D,GAAD,OAAOhD,EAAWgD,EAAEjB,OAAOkB,QACrCA,MAAO/G,EACPhD,GAAI,CAAEsJ,SAAU,GAChBU,YAAY,oBACZC,WAAY,SAACH,GAAD,MAAiB,UAAVA,EAAExK,KAAmB8I,KACxC8B,WAAY,CAAEC,aAAc,cAAC5D,EAAA,EAAD,CAAQ1G,QAASuI,EAAjB,2BC1HhCgC,GAAgB,SAAC,GAA0B,IAAxBlL,EAAuB,EAAvBA,KAAMoG,EAAiB,EAAjBA,MAAO+E,EAAU,EAAVA,IACpC,EAAgCzL,mBAAS,IAAzC,mBAAO0L,EAAP,KAAiBC,EAAjB,KAOA,OACE,eAAC5E,EAAA,EAAD,CAAQzG,KAAMA,EAAM+B,QAASqE,EAA7B,UACE,cAACM,EAAA,EAAD,wBAEA,cAACC,EAAA,EAAD,UACE,cAACQ,EAAA,EAAD,CACErG,GAAI,CAAEyC,MAAO,IAAKgB,GAAI,GACtBsC,SAAU,SAAC+D,GAAD,OAAOS,EAAYT,EAAEjB,OAAOkB,QACtCvK,MAAM,iBAIV,eAAC8G,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQ1G,QAASyF,EAAjB,oBACA,cAACiB,EAAA,EAAD,CAAQ1G,QAnBA,WACZwK,EAAIC,GACJhF,KAiBI,wBAMFkF,GAAmB,SAAC,GAAoC,IAAlCtL,EAAiC,EAAjCA,KAAMoG,EAA2B,EAA3BA,MAAO+E,EAAoB,EAApBA,IAAK9E,EAAe,EAAfA,SAC5C,EAAoC3G,mBAAS,IAA7C,mBAAO6L,EAAP,KAAmBC,EAAnB,KAOA,OACE,eAAC/E,EAAA,EAAD,CAAQzG,KAAMA,EAAM+B,QAASqE,EAA7B,UACE,cAACM,EAAA,EAAD,0BAEA,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACE9F,GAAI,CAAEyC,MAAO,IAAKgB,GAAI,GACtBsC,SAAU,SAACC,EAAG/H,GAAJ,OAAUA,GAAKyM,EAAczM,EAAE+C,KACzCiF,QAASV,EAASlH,KAAI,SAACJ,GAAD,MAAQ,CAC5BuB,MAAOmL,GAAgB1M,GACvB+C,GAAI/C,EAAEiI,YAERC,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuB5G,MAAM,eAI1D,eAAC8G,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQ1G,QAASyF,EAAjB,oBACA,cAACiB,EAAA,EAAD,CAAQ1G,QAvBA,WACZwK,EAAII,GACJnF,KAqBI,wBAOFqF,GAAkB,SAAC1M,GAAD,gBAAUA,EAAE2M,eAAZ,YAA8B3M,EAAE4M,cAAhC,aAAkD5M,EAAEyC,WAApD,MA6KxB,SAAS1C,GAASC,GAAI,IAAD,MACnB,iBAAOA,EAAEC,YAAT,iBAAO,EAAQC,MAAM,YAArB,iBAAO,EAAoBC,MAAM,EAAG,UAApC,aAAO,EAAiCC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,OAAO,EAAG,MAGhDuM,OA/KA,SAAC,GAOT,IANLC,EAMI,EANJA,OACAtM,EAKI,EALJA,OACA8G,EAII,EAJJA,SACArB,EAGI,EAHJA,SACA8G,EAEI,EAFJA,mBACA7G,EACI,EADJA,IAEA,EAA4BvF,mBAAS,IAArC,mBAAOqM,EAAP,KAAeC,EAAf,KACA,EAA4BtM,mBAAS,MAArC,mBAAOuM,EAAP,KAAeC,EAAf,KACA,EAA4CxM,oBAAS,GAArD,mBAAOyM,EAAP,KAAuBC,EAAvB,KACA,EAAsC1M,oBAAS,GAA/C,mBAAO2M,EAAP,KAAoBC,EAApB,KACA,EAAsB5M,mBAAS,GAA/B,mBAAO6M,EAAP,KAAYC,EAAZ,KAEA,EAAgC9M,mBAAS,MAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACM4M,EAAcxM,QAAQL,GAMtB8M,EAAe,WACnB7M,EAAY,OASR8M,EAAO,uCAAG,WAAO3N,GAAP,mBAAAkG,EAAA,6DACRoE,EAAOsD,OAAOC,aACdjL,EAFQ,UAEC0H,EAFD,YAESwC,GAFT,SAGIvM,EAAOuN,SAASlL,GAHpB,OAGRqE,EAHQ,OAIduB,QAAQC,IAAI,gBAAiBxB,GAC7B1G,EAAOwN,cAAcnL,EAAK,CAAEoL,OAAQ,CAAE,CAAEhO,KAAM,WAAY6L,MAAO7L,MALnD,2CAAH,sDASPiO,EAAiBpB,EAAO3B,QAAO,SAAAgD,GAAC,eACpC,UAAAA,EAAElO,YAAF,eAAQmO,cAAcjJ,SAAS6H,EAAOoB,kBAAtC,UAAwDD,EAAEtL,WAA1D,aAAwD,EAAOsC,SAAS6H,OACzE7B,QAAO,SAAAgD,GAAC,OAAa,IAARX,IAAcW,EAAElJ,QAAoB,IAARuI,GAAaW,EAAElJ,UAEnDnF,EAAW,GAEXuO,GAAenB,GAAUpN,EAASoN,EAAOrK,KAC3C/C,EAASoN,EAAOrK,KAChB,GAEEqI,GAAgB5D,EAAS6D,QAAO,SAACnL,GAAD,OAAQQ,EAAOoC,OAAOC,IAAIsC,SAASnF,EAAEiI,YAE3E,OACE,qCACE,cAAC,GAAD,CACEmE,IA9Ba,SAAC7B,GAClB,IAAM1H,EAAG,UAAM0H,EAAN,YAAc/J,EAAOoC,OAAO0L,QACrC9N,EAAO+N,UAAU1L,IA6BbwE,MAAO,kBAAMgG,GAAkB,IAC/BpM,KAAMmM,EACN9F,SAAU4D,KAGZ,cAAC,GAAD,CACEkB,IAAKwB,EACLvG,MAAO,kBAAMkG,GAAe,IAC5BtM,KAAMqM,IAGR,eAACkB,EAAA,EAAD,CAAOnJ,UAAU,wBAAwBtD,GAAI,CAAEyC,MAAO,KAAtD,UACE,eAACY,EAAA,EAAD,CAAKrD,GAAI,CAAEwJ,GAAI,GAAf,UACE,eAACH,EAAA,EAAD,CAAOE,UAAU,MAAMvJ,GAAI,CAAEyJ,WAAY,UAAzC,UACE,0CAEA,cAACC,EAAA,EAAD,CAAY1J,GAAI,CAAE2J,GAAI,QAAU9J,QAvDtB,SAACC,GACnBf,EAAYe,EAAMC,gBAsDV,SACE,cAAC,KAAD,CAASyB,SAAS,cAGpB,eAACT,EAAA,EAAD,CACEC,GAAG,aACHlC,SAAUA,EACVI,KAAMyM,EACN1K,QAAS2K,EACThC,cAAe,CACb,kBAAmB,gBANvB,UASE,cAACzI,EAAA,EAAD,CAAUtB,QAAS,WAAQ+L,IAAgBN,GAAkB,IAA7D,yBACA,cAACnK,EAAA,EAAD,CAAUtB,QAAS,WAAQ+L,IAAgBJ,GAAe,IAA1D,6BAIJ,cAACnF,EAAA,EAAD,CACEgC,KAAK,SACL7I,MAAM,SACNkN,QAAQ,SACRC,KAAK,QACLC,WAAS,EACT7G,SAAU,SAAC+D,GAAD,OAAOoB,EAAUpB,EAAEjB,OAAOkB,aAIxC,cAAC1G,EAAA,EAAD,CAAKrD,GAAI,CAAE6M,aAAc,EAAGC,YAAa,WAAzC,SACE,eAACC,EAAA,EAAD,CAAMhD,MAAO0B,EAAK1F,SAAU,SAACC,EAAGgH,GAAJ,OAAYtB,EAAOsB,IAAM,aAAW,qBAAhE,UACE,cAACC,GAAA,EAAD,CAAKzN,MAAM,WAAW0N,MAAO,IAC7B,cAACD,GAAA,EAAD,CAAKzN,MAAM,SAAS0N,MAAO,SAI/B,cAAC5K,EAAA,EAAD,CAAMgB,UAAU,cAAhB,SACG6I,EAAe9N,KAAI,SAACJ,GAAO,IAAD,EAEnBsB,EAAQ,CACZ4N,UAAW,UACXC,KAAM,UACNC,YAAa,OACb,aAAc,WALDpP,EAAEiF,OAAS,GAAKjF,EAAEmD,SAMpB,OAEb,OACE,cAACzB,EAAA,EAAD,CAAsBC,gBAAc,EAApC,SACE,eAACkD,EAAA,EAAD,CAAgBjD,QAAS,kBAAMuL,EAAUnN,IAAzC,UACE,cAACqP,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,CACEC,gBAAiB,CACfC,MAAO,CACLzN,GAAI,CACF0N,gBAAiBnO,EACjBoO,OAAQ,kBACRlL,MAAO,GACPmL,OAAQ,GACRlK,aAAc,KAIpBmK,QAAQ,WACRC,aAAa,IACbC,UAAW9P,EAAEiF,OACbwJ,QAAQ,MACRsB,aAAc,CACZC,SAAU,SACVC,WAAY,SAlBhB,SAqBE,cAAChO,EAAA,EAAD,UACGjC,EAAEiF,OACC,cAAC,KAAD,IACAlF,GAASC,SAKnB,cAACkC,EAAA,EAAD,CACEC,QAASnC,EAAEC,KACXmC,uBAAwB,CAAEC,aAAc,WAAYC,SAAU,SAAUC,WAAY,UACpFC,UAAS,UAAExC,EAAEwH,YAAJ,aAAE,EAAQ/E,WACnBC,yBAA0B,CAAEL,aAAc,WAAYC,SAAU,SAAUC,WAAY,UACtFI,MAAO3C,EAAE6C,KAAO7C,EAAEe,SAAW,MAAQf,EAAEe,SAAW,UArCzCf,EAAE6C,aA6CzB,cAAC2L,EAAA,EAAD,CAAOnJ,UAAU,gBAAjB,SACG6H,GAAU,cAAC,GAAD,CAAS5F,SAAUA,EAAU9G,OAAQA,EAAQgH,KAAM0F,EAAQpN,SAAUuO,GAAcpI,SAAUA,EAAUC,IAAKA,UCtOzHgK,GAAgB,SAAC,GAAoC,IAAlCjP,EAAiC,EAAjCA,KAAMoG,EAA2B,EAA3BA,MAAO+E,EAAoB,EAApBA,IAAK9E,EAAe,EAAfA,SACzC,EAAoC3G,mBAAS,IAA7C,mBAAO6L,EAAP,KAAmBC,EAAnB,KAOA,OACE,eAAC/E,EAAA,EAAD,CAAQzG,KAAMA,EAAM+B,QAASqE,EAA7B,UACE,cAACM,EAAA,EAAD,0BAEA,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACE9F,GAAI,CAAEyC,MAAO,IAAKgB,GAAI,GACtBsC,SAAU,SAACC,EAAG/H,GAAJ,OAAUA,GAAKyM,EAAczM,EAAE+C,KACzCiF,QAASV,EAASlH,KAAI,SAAAJ,GAAC,MAAK,CAC1BuB,MAAOmL,GAAgB1M,GACvB+C,GAAI/C,EAAEiI,YAERC,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuB5G,MAAM,eAI1D,eAAC8G,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQ1G,QAASyF,EAAjB,oBACA,cAACiB,EAAA,EAAD,CAAQ1G,QAvBA,WACZwK,EAAII,GACJnF,KAqBI,wBAOFqF,GAAkB,SAAC1M,GAAD,gBAAUA,EAAE2M,eAAZ,YAA8B3M,EAAE4M,cAAhC,aAAkD5M,EAAEyC,WAApD,MAmGxB,SAAS1C,GAASC,GAAI,IAAD,MACnB,iBAAOA,EAAEC,YAAT,iBAAO,EAAQC,MAAM,YAArB,iBAAO,EAAoBC,MAAM,EAAG,UAApC,aAAO,EAAiCC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,OAAO,EAAG,MAGhD6P,OArGE,SAAC,GAAiD,IAA/C3P,EAA8C,EAA9CA,OAAQ8G,EAAsC,EAAtCA,SAAUwF,EAA4B,EAA5BA,OAAQ5G,EAAoB,EAApBA,IAAKD,EAAe,EAAfA,SACjD,EAA4BtF,mBAAS,IAArC,mBAAOqM,EAAP,KAAeC,EAAf,KACA,EAA4BtM,mBAAS,MAArC,mBAAOuM,EAAP,KAAeC,EAAf,KACA,EAAsCxM,oBAAS,GAA/C,mBAAOyP,EAAP,KAAoBC,EAApB,KAGMC,EAAMjH,yBAAa,kBAAM3J,EAAGI,SAASyQ,QAAQ,MAAMC,iBAAiB,GACpEC,EAAQpH,yBAAa,kBAAM3J,EAAGI,SAASyQ,QAAQ,QAAQC,iBAAiB,GACxEE,EAAOJ,EAAIK,OAAOF,GACvBtF,QAAO,SAACyF,EAAGjM,EAAGwB,GAAP,OAAaA,EAAE0K,QAAQD,KAAOjM,KACrCwG,QAAO,SAACtI,GAAD,OAASA,IAAQrC,EAAOoC,OAAOC,OAEjC8H,EAAK,OAAG+F,QAAH,IAAGA,OAAH,EAAGA,EAAMtQ,KAAI,SAAAyC,GAAQ,IAAD,EACvB2E,EAAOF,EAASwC,MAAK,SAAC9J,GAAD,OAAO6C,EAAIsC,SAASnF,EAAEiI,YAC3ChI,GAAW,OAAJuH,QAAI,IAAJA,OAAA,EAAAA,EAAMvH,QAAN,UACR6M,EAAOhD,MAAK,SAACqE,GAAD,OAAOA,EAAEtL,MAAQA,YADrB,aACR,EAAmC5C,OACnC4C,EAEL,MAAO,CAAEA,MAAK2E,OAAMvH,WAGhB6Q,EAAa,OAAGnG,QAAH,IAAGA,OAAH,EAAGA,EAAOQ,QAAO,SAACnL,GAAO,IAAD,UACnCiD,EAAI+J,EAAOoB,cACjB,OAAO,UAAApO,EAAEC,YAAF,eAAQmO,cAAcjJ,SAASlC,KACjCA,EAAEkC,SAAF,UAAWnF,EAAEC,YAAb,aAAW,EAAQmO,iBADjB,UAEFpO,EAAEwH,YAFA,iBAEF,EAAQ/E,kBAFN,aAEF,EAAoB0C,SAASlC,KAC7BA,EAAEkC,SAAF,UAAWnF,EAAEwH,YAAb,aAAW,EAAQ/E,eAU1B,OACE,qCACE,cAAC,GAAD,CACE2J,IAVU,SAAC7B,GACf9B,QAAQC,IAAI,UAAW6B,GACvB,IAAM1H,EAAG,UAAM0H,EAAN,YAAc/J,EAAOoC,OAAO0L,QACrC7F,QAAQC,IAAI,MAAO7F,IAQfwE,MAAO,kBAAMgJ,GAAe,IAC5BpP,KAAMmP,EACN9I,SAAUA,IAGZ,eAACkH,EAAA,EAAD,CAAOnJ,UAAU,wBAAwBtD,GAAI,CAAEyC,MAAO,KAAtD,UACE,eAACY,EAAA,EAAD,CAAKrD,GAAI,CAAEwJ,GAAI,GAAf,UACE,cAACH,EAAA,EAAD,CAAOE,UAAU,MAAMvJ,GAAI,CAAEyJ,WAAY,UAAzC,SACE,wCAMF,cAACpD,EAAA,EAAD,CACEgC,KAAK,SACL7I,MAAM,SACNkN,QAAQ,SACRC,KAAK,QACLC,WAAS,EACT7G,SAAU,SAAC+D,GAAD,OAAOoB,EAAUpB,EAAEjB,OAAOkB,aAIxC,cAACzH,EAAA,EAAD,CAAMgB,UAAU,cAAhB,SACGyL,EAAc1Q,KAAI,SAACJ,GAAD,aACjB,cAAC0B,EAAA,EAAD,CAAsBC,gBAAc,EAApC,SACE,eAACkD,EAAA,EAAD,CAAgBjD,QAAS,kBAAMuL,EAAUnN,IAAzC,UACE,cAACqP,GAAA,EAAD,UACE,cAACpN,EAAA,EAAD,UACGjC,EAAEiF,OACC,cAAC,KAAD,IACAlF,GAASC,OAIjB,cAACkC,EAAA,EAAD,CACEC,QAASnC,EAAEC,KACXmC,uBAAwB,CAAEC,aAAc,WAAYC,SAAU,SAAUC,WAAY,UACpFC,UAAS,UAAExC,EAAEwH,YAAJ,aAAE,EAAQ/E,WACnBC,yBAA0B,CAAEL,aAAc,WAAYC,SAAU,SAAUC,WAAY,UACtFI,MAAO3C,EAAE6C,UAfA7C,EAAE6C,aAuBvB,cAAC2L,EAAA,EAAD,CAAOnJ,UAAU,gBAAjB,SACG6H,GAAU,cAAC,GAAD,CAAS5F,SAAUA,EAAU9G,OAAQA,EAAQgH,KAAM0F,EAAQjH,SAAUA,EAAUC,IAAKA,UCjHxF,YAAU1F,EAAeuQ,GAGpCA,EAAQC,OAAO,CACXC,QAAS,SACThD,OAAQ,CACJiD,OAAQC,IAAIC,UAAU,UACtBC,QAASF,IAAIC,UAAU,YAE3BE,UAAW,oCACXC,KAAM,mBAGVR,EAAQC,OAAO,CACXC,QAAS,YACThD,OAAQ,CACJiD,OAAQC,IAAIC,UAAU,WAE1BE,UAAW,qBACXC,KAAM,6BAGVR,EAAQC,OAAO,CACXC,QAAS,QACThD,OAAQ,CACJuD,OAAQL,IAAI3N,QAEhB8N,UAAW,oCACXC,KAAM,aAIV/Q,EAAOiR,SAAW,WACd,OAAOjR,EAAOkR,OAAO,CACjBtH,KAAM,MACNuH,MAAO,UAKfnR,EAAOoR,GAAG,WAAW,SAAAC,GACbA,EAAIL,QACJhR,EAAOsR,KAAK,QAASD,OC7DjCE,OAAOrS,GAAKA,EAEZ,IAAMuG,GAAW,kCAKX+L,GAAWC,aAAaC,QAAQ,kBAAoBrE,OAAOC,aACjEmE,aAAaE,QAAQ,gBAAiBH,IAEtC,IAAMI,GAAQ,uCAAG,WAAOvP,EAAKwP,EAAUC,GAAtB,SAAAnM,EAAA,+EACfoM,IAAkB,CAChB1P,MACAwP,WACAL,YACAQ,WAAY,CACVC,UAAU,GAAD,OAbE,MAaF,cAAmBH,EAAnB,YAZF,OAYE,YAXE,eAKA,2CAAH,0DA0YRI,GAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,UAA5B,OACtBD,EAAQ1H,QAAO,SAACxB,GAAD,OAAQmJ,EAAUnJ,EAAE5G,OAAK3C,KAAI,SAACuJ,GAAD,OAC1C,eAACjC,EAAA,EAAD,CAAmBzG,MAAM,EAAzB,UACE,cAAC0G,EAAA,EAAD,6BACA,eAACC,EAAA,EAAD,WACE,4CAAe+B,EAAE5G,MACjB,uCAAU4G,EAAEzE,QACZ,6CAAgByE,EAAE5D,WAEpB,eAACsC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQhH,MAAM,QAAQM,QAAS,kBAAMgR,EAAOjJ,IAA5C,oBACA,cAACrB,EAAA,EAAD,CAAQ1G,QAAS,kBAAM+Q,EAAOhJ,IAA9B,yBATSA,EAAE5G,QAcbgQ,GAAW,uCAAG,WAAO7M,GAAP,eAAAC,EAAA,sEACAU,MAAM,GAAD,OAAIZ,GAAJ,aAAyB,CAAEc,QAAS,CAAEC,cAAed,KAD1D,cACZgB,EADY,yBAEXA,EAAI8L,GAAK9L,EAAIC,OAAS,IAFX,2CAAH,sDAKjB,SAAS8L,GAAazL,GACpB,OAAW,OAAJA,QAAI,IAAJA,KAAMvH,KACXuH,EAAKvH,KACC,OAAJuH,QAAI,IAAJA,KAAM0L,iBACJ1L,EAAK0L,iBACD,OAAJ1L,QAAI,IAAJA,KAAMmF,eAAN,UACKnF,EAAKmF,eADV,YAC4BnF,EAAKoF,eAC/B,Y,SAGKuG,G,iFAAf,yCAAAhN,EAAA,6DAAgC3F,EAAhC,EAAgCA,OAAQ4S,EAAxC,EAAwCA,MAAOC,EAA/C,EAA+CA,MACvCC,EAASD,EAAQ,CAAEA,SAAU,GADrC,SAE+C7S,EAAO+S,cAAc,CAAEH,QAAOE,WAF7E,gBAEUE,EAFV,EAEUA,SAAoBC,EAF9B,EAEoBH,OAAUG,KAEvBD,GACHL,GAAe,CAAE3S,SAAQ6S,MAAOI,IALpC,4C,sBASeC,OAxaH,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,WAAYnM,EAAW,EAAXA,KACzB,EAA4B7G,mBAAS,MAArC,mBAAOH,EAAP,KAAeoT,EAAf,KACA,EAAsBjT,mBAAS,IAA/B,mBAAOuF,EAAP,KAAY2N,EAAZ,KACA,EAA4BlT,mBAAS,IAArC,mBAAOmM,EAAP,KAAegH,EAAf,KACA,EAAgCnT,mBAAS,IAAzC,mBAAOoT,EAAP,KAAiBC,EAAjB,KACA,EAAoCrT,mBAAS,IAA7C,mBAAOsT,EAAP,KAAmBC,EAAnB,KACA,EAA8CvT,mBAAS,IAAvD,mBAAOwT,EAAP,KAAwBC,EAAxB,KACA,EAA8CzT,mBAAS,IAAvD,mBAAO0T,EAAP,KAAwBC,EAAxB,KACA,EAAgC3T,mBAAS,IAAzC,mBAAO2G,EAAP,KAAiBiN,EAAjB,KACA,EAAsB5T,mBAAS,YAA/B,mBAAOyD,EAAP,KAAYD,EAAZ,KACA,EAAkCxD,oBAAS,GAA3C,oBAAO6T,GAAP,MAAkBC,GAAlB,MACA,GAAiB9T,mBAAS,uBAE1B,GAFA,qBAE0CT,MAAM,eAAhD,mBAAOwU,GAAP,MAAwBC,GAAxB,8BACMC,GAAY,UAAMF,GAAN,gBAAyBC,IACrCE,GAAW,mBAAeD,IAE1BE,GAAM,uCAAG,sCAAA3O,EAAA,0DACT3F,EADS,oDAKTyR,aAAaC,QAAQ,cAAgB1K,EAAKuN,SALjC,gCAMLrV,EAAGI,SAASkV,QANP,cAQb/C,aAAaE,QAAQ,WAAY3K,EAAKuN,UARzB,SAWgBE,EAAYzN,EAA/B0N,kBACFhP,EAAM+O,EAAQE,QAAQC,SAC5BvB,EAAO3N,GACDrD,EAdK,UAcI2E,EAAKuN,SAdT,YAcqBH,IAdrB,UAeQxC,GAASvP,EAAKqD,EAAK0O,IAf3B,eAeLS,EAfK,QAiBNC,IAAIC,IAET3B,EAAUyB,GACVZ,IAAa,GApBF,UAsBgB1B,GAAY7M,GAtB5B,QAsBLsP,EAtBK,OAuBLC,EAAgBD,EAAapV,KAAI,SAACJ,GAAD,mBAAC,eAAYA,GAAb,IAAgBC,KAAMgT,GAAajT,QAC1EuU,EAAYkB,GAEZ1D,OAAOvR,OAAS6U,EAEhBA,EAAKzD,GAAG,kBAAR,sBAA2B,8BAAAzL,EAAA,6DACzBkP,EAAKK,aACLL,EAAKjS,aAAa,CAChBuS,mBAAoBN,EAAKO,MAAMC,YAEjCR,EAAKS,kBACLT,EAAKU,gBANoB,SAQHV,EAAKW,YARF,cAQnBlJ,EARmB,OAQejJ,MACxCiQ,EAAUhH,GATe,UAgBCpN,EAAGI,SAASyQ,QAAQ,aAAakD,OAhBlC,QAgBnBwC,EAhBmB,OAiBzB9C,GAAe,CAAE3S,OAAQ6U,EAAMjC,MAAK,OAAE6C,QAAF,IAAEA,OAAF,EAAEA,EAAapQ,YAjB1B,6CAoB3BwP,EAAKzD,GAAG,WAAW,SAAC7M,GAClB,GAAqB,mBAAjBA,EAAQqF,KACVgK,GAAmB,SAAC8B,GAAD,4BAAcA,GAAd,CAAoBnR,YAClC,GAAqB,SAAjBA,EAAQqF,MAAoC,cAAjBrF,EAAQqF,KAAsB,CAClE,MAAwBrF,EAAQG,KAAKhF,MAAM,KAA3C,mBAAOiW,EAAP,KAAe9C,EAAf,KACMzJ,EAAyB,SAAjB7E,EAAQqF,KAAkB,KAAO+L,EACzCjR,EAAwB,SAAjBH,EAAQqF,KAAkB+L,EAAS9C,EAEhD3T,EAAGI,SAASsW,IAAI,CACdrT,GAAIgC,EAAQhC,GACZmC,OACAmF,GAAItF,EAAQsF,GACZtE,KAAMhB,EAAQgB,KACdqE,KAAMrF,EAAQqF,KACdR,QACA/D,UAAW,IAAIU,MACdxB,EAAQhC,QAIfsS,EAAKzD,GAAG,gBAAgB,SAAC7M,GACF,mBAAjBA,EAAQqF,MAEgB,SAAjBrF,EAAQqF,MAEjB1K,EAAGI,SAASsW,IAAI,CACdrT,GAAIgC,EAAQhC,GACZmC,KAAMmQ,EAAKzS,OAAOC,IAClBwH,GAAItF,EAAQsF,GACZtE,KAAMhB,EAAQgB,KACdqE,KAAMrF,EAAQqF,KACdR,MAAO,KACP/D,UAAW,IAAIU,MACdxB,EAAQhC,OAIfsS,EAAKzD,GAAG,YAAY,SAACyE,GAAS,IAAD,UACrBtR,EAAO,UAAGsR,EAAIC,eAAP,iBAAG,EAAaC,YAAhB,aAAG,EAAmBxR,QACpB,UAAGsR,EAAIC,eAAP,iBAAG,EAAaC,YAAhB,iBAAG,EAAmBC,aAAtB,OAAG,EAA0B3Q,UAC5C,GAAqB,SAAjBd,EAAQqF,MAAoC,cAAjBrF,EAAQqF,KAAsB,CAC3D,MAAwBrF,EAAQG,KAAKhF,MAAM,KAA3C,mBAAOiW,EAAP,KAAe9C,EAAf,KACMzJ,EAAyB,SAAjB7E,EAAQqF,KAAkB,KAAO+L,EACzCjR,EAAwB,SAAjBH,EAAQqF,KAAkB+L,EAAS9C,EAEhD3T,EAAGI,SAASsW,IAAI,CACdrT,GAAIgC,EAAQhC,GACZmC,OACAmF,GAAItF,EAAQsF,GACZtE,KAAMhB,EAAQgB,KACdqE,KAAMrF,EAAQqF,KACdR,QACA/D,UAAW,IAAIU,MACdxB,EAAQhC,QAIfsS,EAAKzD,GAAG,SAAS,SAACC,GAAS,IAAD,UAClBhM,EAAS,UAAGgM,EAAIL,cAAP,iBAAG,EAAYiF,iBAAf,iBAAG,EAAuBD,aAA1B,aAAG,EAA8BE,MAC1C3R,EAAO,UAAG8M,EAAIL,cAAP,iBAAG,EAAYiF,iBAAf,aAAG,EAAuB1R,QAGvC,GAFA0D,QAAQC,IAAI,gBAAiB3D,GAExBA,EAAL,CACeA,EAAPsF,GAER,GAAqB,SAAjBtF,EAAQqF,KAAiB,CAC3B,MAAerF,EAAQG,KAAKhF,MAAM,KAA3BgF,EAAP,oBAEAxF,EAAGI,SAASsW,IAAI,CACdrT,GAAIgC,EAAQhC,GACZmC,OACAmF,GAAItF,EAAQsF,GACZtE,KAAMhB,EAAQgB,KACdqE,KAAMrF,EAAQqF,KACdR,MAAO,KACP/D,aACCd,EAAQhC,SACFgC,EAAQqF,SAKrBiL,EAAKzD,GAAG,aAAa,SAAC+E,GACpBtB,EAAKuB,mBAAmBD,EAAKzR,MAC7BmQ,EAAK9G,UAAUoI,EAAKzR,SAGtBmQ,EAAKzD,GAAG,eAAe,eAIvByD,EAAKzD,GAAG,gBAAR,uCAAyB,WAAO+E,GAAP,SAAAxQ,EAAA,6DACvBwQ,EAAK7J,OAAOjJ,MAAMgT,SAAQ,SAAC1I,GACzBkH,EAAK9B,cAAc,CAAEuD,KAAM3I,EAAEtL,IAAKyQ,OAAQ,CAAE6C,OAAQ,SAF/B,KAKvBrC,EALuB,SAKNuB,EAAKW,YALC,mBAKYnS,OALZ,yDAAzB,uDASAwR,EAAKzD,GAAG,cAAc,SAAC+E,GACrBnW,EAAOuN,SAAS4I,EAAKpP,SAIvB8N,EAAKzD,GAAG,gBAAR,sBAAyB,sBAAAzL,EAAA,kEACvB2N,EADuB,SACNuB,EAAKW,YADC,0BACYnS,MADZ,8EAKzBwR,EAAKzD,GAAG,kBAAR,sBAA2B,sBAAAzL,EAAA,kEACzB2N,EADyB,SACRuB,EAAKW,YADG,0BACUnS,MADV,8EAI3BwR,EAAKzD,GAAG,YAAY,SAAC+E,GACnB3C,GAAY,SAACkC,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBS,EAAKzR,KAAOyR,UAGjDtB,EAAKzD,GAAG,YAAY,SAAC+E,GACnB,IAAQ9T,EAA4B8T,EAA5B9T,IAAiBW,EAAWmT,EAAvB5V,SAAYyC,KACzBiF,QAAQC,IAAI,WAAY7F,EAAKW,GAC7B0Q,GAAc,SAACgC,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBrT,EAAMW,UAG7C6R,EAAKzD,GAAG,IAAR,uCAAa,WAAOxH,EAAMuM,GAAb,SAAAxQ,EAAA,sDACXsC,QAAQC,IAAI0B,EAAMuM,GADP,2CAAb,yDAKAtB,EAAKzD,GAAG,gBAAgB,WACtBnJ,QAAQC,IAAI,gBACZ+L,IAAa,MAIfY,EAAKzD,GAAG,aAAa,WACnB6C,IAAa,MAGfY,EAAK0B,UAELhF,OAAOiF,iBAAiB,gBAAgB,SAASnV,GAC/C4G,QAAQC,IAAI,uBACZ2M,EAAK4B,gBA/LI,kDAkMXxO,QAAQyO,MAAM,SAAd,MAlMW,0DAAH,qDAsMZpM,oBAAUgK,GAAQ,CAACtN,IAGnB,IAAM2P,GAAiBrK,EAAO1M,KAAI,SAAA+N,GAAM,IAAD,IAC/B3G,EAAOF,EAASwC,MAAK,SAAA9J,GAAC,OAAImO,EAAEtL,IAAIsC,SAASnF,EAAEiI,YAC3ChI,EAAOkO,EAAElO,KACXkO,EAAElO,KACFuH,EACEyL,GAAazL,GACb2G,EAAEtL,IAGFuU,EAAWC,OAAOC,OAAOvD,GAC5B5I,QAAO,SAACnL,GAAD,OAAOA,EAAEkF,KAAKC,SAASgJ,EAAEtL,QAChCsI,QAAO,SAACnL,GAAD,MAAkB,gBAAXA,EAAEoK,QAChBhK,KAAI,SAACJ,GAAD,OAAOA,EAAEmD,QAAU,eAEpBA,EAA6B,IAApBiU,EAASG,OACpB,cACAH,EAASI,MAAK,SAACvU,GAAD,MAAa,eAANA,KACnB,aACAmU,EAASK,OAAM,SAACxU,GAAD,MAAa,SAANA,KACpB,QACAmU,EAASK,OAAM,SAACxU,GAAD,MAAa,cAANA,KACpB,aAGV,OAAO,2BACFkL,GADL,IAEE3G,OACAvH,OACAkD,SACAiU,WACArW,SAAUkT,EAAW9F,EAAEtL,KACvBoC,SAAS,UAACkJ,EAAEuJ,cAAH,iBAAC,EAAW,UAAZ,QAAC,EAAevS,SAAS,aAGtC4M,OAAOgC,SAAWA,EAClBhC,OAAOjF,OAASqK,GAChBpF,OAAOkC,WAAaA,EAEpBxL,QAAQC,IAAI,oBAAqBqL,GACjCtL,QAAQC,IAAI,kBAAmByO,IAG/B,IAAM1W,GAAK6G,EAASwC,MAAK,SAAC9J,GAAD,OAAOQ,EAAOqC,IAAI8U,MAAM3X,EAAEiI,aAAa,GAE1D2P,GAAS,uCAAG,sBAAAzR,EAAA,sDAChBsC,QAAQC,IAAI,gBAEZlI,EAAOqX,aAAP,2BAA0BrX,EAAOoC,OAAOkV,aAAxC,IAAsDzF,SAAU7K,EAAK0N,kBAAkBC,QAAQC,YAC/F5U,EAAOuW,UAJS,2CAAH,qDAOTrW,GAAO,uCAAG,sBAAAyF,EAAA,sDACd3F,EAAOyW,aACPxC,IAAa,GACbX,EAAU,IACVE,EAAY,IACZtU,EAAGI,SAASkV,QACZ/C,aAAa8F,WAAW,4BACxBpE,IAPc,2CAAH,qDA+Db,OAAKnT,EAOH,sBAAK6E,UAAU,MAAf,UACE,cAAC,EAAD,CAASjB,IAAKA,EAAKD,OAAQA,EAAQzD,QAASA,GAASF,OAAQA,EAAQC,GAAIA,KAEzE,cAACuX,EAAA,EAAD,CACEpW,QAASgW,GACT3W,MAAOuT,GACPzE,aAAc,CAAEE,WAAY,SAAUD,SAAU,UAChDjO,GAAI,CAAEkW,OAAQ,WAJhB,SAME,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAQpW,GAAI,CAAEyC,MAAO,QAArC,qDAGF,cAAC,GAAD,CACEmO,OAzEe,SAAC5N,GACpBuP,GAAmB,SAAC4B,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBnR,EAAQhC,GAAK,cACvDvC,EAAO2J,YAAY,CAAEE,GAAItF,EAAQG,KAAMa,KAAMhB,EAAQhC,GAAIqH,KAAM,2BAwE3DwI,OArEe,SAAC7N,GACpBuP,GAAmB,SAAC4B,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBnR,EAAQhC,GAAK,cACvDvC,EAAO2J,YAAY,CAAEE,GAAItF,EAAQG,KAAMa,KAAMhB,EAAQhC,GAAIqH,KAAM,2BAoE3DyI,QAASsB,EACTrB,UAAWuB,IAEb,cAACjP,EAAA,EAAD,CAAKC,UAAU,OAAf,SACW,aAARjB,EACG,cAAC,GAAD,CACA0I,OAAQqK,GAER7P,SAAUA,EACV9G,OAAQA,EACRyF,SAAUA,GACV8G,mBAAoB8H,GACpB3O,IAAKA,IAEG,aAAR9B,EACE,cAAC,GAAD,CACA0I,OAAQqK,GAER7P,SAAUA,EACV9G,OAAQA,EACRyF,SAAUA,GACV8G,mBAAoB8H,GACpB3O,IAAKA,IAEL,UA5CR,qBAAKb,UAAU,MAAf,sB,6BC/WA+S,I,OAAUC,wBAAc,KAExBC,GAAe,2BAEfhG,GADeL,aAAaC,QAAQoG,KACT7U,OAAO,iBAAkB,uBAC1DwO,aAAaE,QAAQmG,GAAchG,IAEnC,IAAMiG,GAAe,WACnB,MAA4B5X,mBAAS,MAArC,mBAAOiC,EAAP,KAAe4V,EAAf,KAEMC,EAAS,uCAAG,4BAAAtS,EAAA,sEACGuS,GAAiBpG,IADpB,OACVnL,EADU,OAGhBwR,WAAQF,UAAU,CAChBG,KAAM,CACJC,OAAQ1R,EAAK,cACb2R,WAAY3R,EAAK,oBACjB4R,oBAAqB5R,EAAK,8BAI9BqR,EAAUrR,GAXM,2CAAH,qDAcf2D,qBAAU,kBAAM2N,MAAa,IAE7B,IAAM3M,EAAQ,CACZwM,iBAGF,OAAQ1V,EAGJ,cAACwV,GAAQY,SAAT,CAAkBlN,MAAOA,EAAzB,SACE,cAACmN,GAAA,EAAD,UACG,gBAAGvY,EAAH,EAAGA,QAAS8G,EAAZ,EAAYA,KAAZ,OACC,cAAC,GAAD,CAAKmM,WAAYjT,EAAS8G,KAAMA,SALtC,M,SAoBSkR,G,iFAAf,WAAgCpG,GAAhC,eAAAnM,EAAA,+EAEsBU,MAAM,WAAD,OAAYyL,EAAZ,gBAAoC,CAAE4G,KAAM,SAFvE,cAEUhS,EAFV,gBAGiBA,EAAIC,OAHrB,wEAKIsB,QAAQC,IAAR,MACAyQ,MAAM,wDACNlH,aAAa8F,WAAWO,IACxBvG,OAAOqH,SAASC,SARpB,0D,sBARAC,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAACC,GAAA,EAAD,IACA,cAAC,GAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.de264f4f.chunk.js","sourcesContent":["import Dexie from 'dexie';\n\nconst db = new Dexie('visionable-xmpp-test-app');\n\ndb.version(1).stores({\n  messages: '++id, group, from, to, body, type, timestamp',\n});\n\nexport default db;\n","import { useState } from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport ListItemAvatar from '@mui/material/Avatar';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Divider from '@mui/material/Divider';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemButton from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport Settings from '@mui/icons-material/Settings';\nimport Logout from '@mui/icons-material/Logout';\nimport Circle from '@mui/icons-material/Circle';\n\nconst Profile = ({ client, me, signOut }) => {\n  const [status, setStatus] = useState(\"available\");\n  const [anchorEl, setAnchorEl] = useState(null);\n  // const [newActivity, setNewActivity] = useState(\"\");\n  const [activity, setActivity] = useState(\"\"); // TODO: get last activity\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const changeStatus = (status) => {\n    setStatus(status);\n    client.sendPresence({ status });\n  };\n\n  const activityPrompt = () => { // TODO: use mui\n    const text = prompt(\"Enter a custom message\");\n    // setNewActivity(text);\n    // sendActivity();\n    client.publishActivity({ text })\n    setActivity(text);\n  }\n\n  /*\n  const sendActivity = () => {\n    client.publishActivity({ text: activity })\n    setActivity(newActivity);\n  }\n*/\n\n  const statusList = [\n    {\n      key: \"available\",\n      color: \"#53b397\",\n      label: \"Available\",\n      icon: Circle,\n    },\n    {\n      key: \"in-meeting\",\n      color: \"#ea3323\",\n      label: \"In a meeting\",\n      icon: Circle,\n    },\n    {\n      key: \"away\",\n      color: \"#f0a73e\",\n      label: \"Away\",\n      icon: Circle,\n    },\n  ]\n\n  return (\n    <>\n      <ListItem disablePadding>\n        <ListItemButton onClick={handleClick} sx={{ mx: 1 }}>\n          <ListItemAvatar>\n            <Avatar>{initials(me)}</Avatar>\n          </ListItemAvatar>\n        </ListItemButton>\n\n        <ListItemText\n          primary={me.name}\n          primaryTypographyProps={{ color: \"white\", textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n          secondary={me.user_email}\n          secondaryTypographyProps={{ color: \"white\", textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n          title={client.config.jid}\n        />\n      </ListItem>\n\n      <Menu\n        anchorEl={anchorEl}\n        id=\"account-menu\"\n        open={open}\n        onClose={handleClose}\n        onClick={handleClose}\n      >\n        {statusList.map((s) => (\n          <MenuItem key={s.key} onClick={() => changeStatus(s.key)}>\n            <ListItemIcon>\n              <Circle fontSize=\"small\" sx={{ color: s.color }} />\n            </ListItemIcon>\n\n            <ListItemText primary={s.label} />\n          </MenuItem>\n        ))}\n\n        <MenuItem onClick={activityPrompt}>\n          {activity || <i>Custom message</i>}\n        </MenuItem>\n\n        <Divider />\n\n        <MenuItem disabled>\n          <ListItemIcon>\n            <Settings fontSize=\"small\" />\n          </ListItemIcon>\n          Settings\n        </MenuItem>\n\n        <MenuItem onClick={signOut}>\n          <ListItemIcon>\n            <Logout fontSize=\"small\" />\n          </ListItemIcon>\n          Logout\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\n\n// TODO put this is allUsers state\nfunction initials(u) {\n  return u.name?.split(\" \")?.slice(0, 2)?.map(n => n.substr(0, 1));\n}\n\nexport default Profile;\n","import {\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n} from \"@mui/material\";\n\nimport {\n  Contacts as ContactsIcon,\n  Chat as ChatIcon,\n} from \"@mui/icons-material\";\n\nimport Profile from './profile';\n\nconst items = [\n  {\n    route: \"contacts\",\n    label: \"Contacts\",\n    iconComponent: ContactsIcon,\n  },\n  {\n    route: \"messages\",\n    label: \"Messages\",\n    iconComponent: ChatIcon,\n  },\n]\n\nconst SideBar = ({ client, me, setNav, nav, signOut }) => (\n  <List sx={{\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"240px\",\n    minWidth: \"240px\",\n    background: \"#091c38\",\n    color: \"white\"\n  }}>\n    <Profile client={client} me={me} signOut={signOut} />\n\n    {items.map(i => {\n      const IconComponent = i.iconComponent;\n\n      return (\n        <ListItem key={i.route} disablePadding sx={{ background: nav === i.route ? 'rgba(255,255,255,0.1)' : 'transparent' }}>\n          <ListItemButton onClick={() => setNav(i.route)}>\n            <ListItemIcon>\n              <IconComponent sx={{ color: \"white\" }} />\n            </ListItemIcon>\n\n            <ListItemText>\n              {i.label}\n            </ListItemText>\n          </ListItemButton>\n        </ListItem>\n      )})}\n\n    {/* <ListItem disablePadding sx={{ mt: \"auto\" }}> */}\n    {/*   <ListItemButton onClick={signOut}> */}\n    {/*     <ListItemIcon> */}\n    {/*       <LogoutIcon sx={{ color: \"white\" }} /> */}\n    {/*     </ListItemIcon> */}\n\n    {/*     <ListItemText> */}\n    {/*       Log Out */}\n    {/*     </ListItemText> */}\n    {/*   </ListItemButton> */}\n    {/* </ListItem> */}\n  </List>\n);\n\nexport default SideBar;\n","import {\n  Box,\n  Button,\n  Stack,\n  TextField,\n  IconButton,\n  Autocomplete,\n  Menu,\n  MenuItem,\n  Divider,\n} from \"@mui/material\";\nimport { useState, useEffect, useRef } from \"react\";\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport GroupAddIcon from '@mui/icons-material/GroupAdd';\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport VideoCameraFrontIcon from '@mui/icons-material/VideoCameraFront';\nimport { blue } from \"@mui/material/colors\";\n\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport db from './db';\n\nconst Message = ({ client, user, API_BASE, jwt, allUsers }) => {\n  console.log(\"Message component\", user)\n  const [members, setMembers] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [showAddUserToRoom, setShowAddUserToRoom] = useState(false);\n  const scrollRef = useRef(null);\n\n  const [roomListAnchorEl, setRoomListAnchorEl] = useState(null);\n  const showRoomList = Boolean(roomListAnchorEl);\n\n  const messages = useLiveQuery(() => \n    user.isRoom\n      ? db.messages.where(\"group\").equals(user.jid).sortBy(\"timestamp\")\n      : db.messages.where(\"from\").equals(user.jid).or(\"to\").equals(user.jid).and((m) => !m.group).sortBy(\"timestamp\"),\n    [user], []);\n\n  const extendedMessages = messages\n    .map((message) => { // add user info\n      const user = allUsers.find((u) => message.from?.includes(u.user_id));\n      const name = user?.name || message.from;\n\n      return { ...message, user, name };\n    });\n\n  const removeContact = async () => {\n    if (user.isRoom) {\n      await client.setRoomAffiliation(user.jid, client.config.jid, \"none\");\n      await client.leaveRoom(user.jid);\n    } else {\n      await client.removeRosterItem(user.jid);\n      await client.unsubscribe(user.jid);\n    }\n  };\n\n  const sendMessage = () => {\n    if (!message) {\n      return;\n    }\n\n    const type = user.isRoom ? 'groupchat' : 'chat';\n    client.sendMessage({ to: user.jid, body: message, type });\n    setMessage(\"\");\n  };\n\n  const invite = async () => {\n    const body = await createMeeting(API_BASE, jwt);\n    if (body.uuid) {\n      client.sendMessage({ to: user.jid, body: body.uuid, type: 'meeting-invite' });\n    }\n  };\n\n  const memberList = async (event) => {\n    const res = await client.getRoomMembers(user.jid);\n\n    setMembers(res.muc.users.map((m) => ({\n      ...m,\n      name: allUsers.find((u) => m.jid.includes(u.user_id))?.name,\n    })));\n\n    setRoomListAnchorEl(event.target);\n  };\n\n  const closeRoomList = () => setRoomListAnchorEl(null);\n  const openAddUser = () => {\n    closeRoomList();\n    setShowAddUserToRoom(true);\n  }\n\n  useEffect(() => {\n    scrollRef.current.scrollTop = scrollRef?.current?.scrollHeight;\n  }, [messages]);\n\n  const allOtherUsers = allUsers.filter((u) => !client.config.jid.includes(u.user_id));\n\n  return (\n    <Stack sx={{ flexGrow: 1 }}>\n      <AddUserToRoomPrompt\n        client={client}\n        room={user}\n        open={showAddUserToRoom}\n        close={() => setShowAddUserToRoom(false) }\n        allUsers={allOtherUsers}\n      />\n\n      <Stack direction=\"row\" sx={{ px: 2, background: \"white\", alignItems: \"center\" }}>\n        <h2>{user.name}</h2>\n\n        <IconButton sx={{ ml: \"auto\" }} onClick={removeContact}>\n          <DeleteIcon fontSize=\"inherit\" />\n        </IconButton>\n\n        {user.isRoom && <>\n          <IconButton onClick={memberList}>\n            <GroupAddIcon fontSize=\"inherit\" />\n          </IconButton>\n\n          <Menu\n            id=\"basic-menu\"\n            anchorEl={roomListAnchorEl}\n            open={showRoomList}\n            onClose={closeRoomList}\n            MenuListProps={{\n              'aria-labelledby': 'basic-button',\n            }}\n          >\n            {members.map((m) => (\n              <MenuItem key={m.jid}>{m.name}</MenuItem>\n            ))}\n            <Divider />\n            <MenuItem onClick={openAddUser}>Add</MenuItem>\n          </Menu>\n        </>}\n\n        <IconButton onClick={invite}>\n          <VideoCameraFrontIcon fontSize=\"inherit\" />\n        </IconButton>\n      </Stack>\n\n      <Stack sx={{ background: \"#eee\", flexGrow: 1, overflow: \"auto\", px: \"10%\" }} ref={scrollRef}>\n        {extendedMessages.map(m => <Chat key={m.id} message={m} client={client} isRoom={user.isRoom} />)}\n      </Stack>\n\n      <Stack direction=\"row\" sx={{ p: 1 }}>\n        <TextField\n          onChange={(e) => setMessage(e.target.value)}\n          value={message}\n          sx={{ flexGrow: 1 }}\n          placeholder=\"Send a message...\"\n          onKeyPress={(e) => e.key === 'Enter' && sendMessage() }\n          InputProps={{ endAdornment: <Button onClick={sendMessage}>Send</Button> }}\n        />\n\n        {/* <Button variant=\"primary\" onClick={sendMessage}>Send</Button> */}\n      </Stack>\n    </Stack>\n  );\n};\n\nconst Chat = ({ message, client, isRoom }) => {\n  const mine = !message.from || message.from.includes(client.config.jid);\n\n  // if we're in a room, grab the user's jid from the `from` field\n  // if it's a direct chat, grab just the bare JID\n  // const jid = message.from?.split(\"/\")[isRoom ? 1 : 0];\n\n  return (\n    <Box\n      className={`chat-message ${mine ? \"mine\" : \"\"}`}\n      sx={{\n        background: mine ? blue[700] : \"white\",\n        color: mine ? \"white\" : \"black\",\n        p: 1.5,\n        mx: 2, my: 1,\n        borderRadius: 2,\n        marginLeft: mine ? \"auto\" : 0,\n        marginRight: mine ? 0 : \"auto\",\n      }}\n    >\n      <span style={{ fontSize: \"0.8em\" }}>\n        <b>{message.name}</b>\n        <span style={{ marginLeft: \"1em\", color: mine ? \"#eee\" : \"#666\" }}>{message.timestamp?.toLocaleString()}</span>\n      </span>\n      <br />\n      {message.body}\n    </Box>\n  );\n}\n\nasync function createMeeting(API_BASE, jwt) {\n  const url = `${API_BASE}/api/meeting`;\n  const mstart = parseInt(new Date().getTime() / 1000);\n\n  const formData = new FormData();\n  formData.append(\"name\", \"Instant Meeting\");\n  formData.append(\"mstart\", mstart.toString());\n  formData.append(\"duration\", \"3600\");\n\n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: jwt,\n    },\n    body: formData,\n  }).then(res => res.json());\n};\n\nconst AddUserToRoomPrompt = ({ open, close, allUsers, client, room }) => {\n  const [user, setUser] = useState(\"\");\n\n  const onAdd = () => {\n    const jid = `${user}@saas-msg.visionable.one`; // TODO: use constant\n    client.setRoomAffiliation(room.jid, jid, \"member\")\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add User to Room</DialogTitle>\n\n      <DialogContent>\n        <Autocomplete\n          sx={{ width: 400, my: 1 }}\n          onChange={(_, u) => u && setUser(u.id)}\n          options={allUsers.map(u => ({\n            label: `${u.name} (${u.user_email})`,\n            id: u.user_id,\n          }))}\n          renderInput={(params) => <TextField {...params} label=\"User\" />}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default Message;\n","import { useState } from \"react\";\n\nimport {\n  Badge,\n  Box,\n  Button,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemButton,\n  Avatar,\n  ListItemText,\n  TextField,\n  Paper,\n  Stack,\n  Autocomplete,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tabs,\n  Tab\n} from \"@mui/material\";\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport AddIcon from '@mui/icons-material/Add';\nimport GroupsIcon from '@mui/icons-material/Groups';\n\nimport Message from './message';\n\nconst AddRoomPrompt = ({ open, close, add }) => {\n  const [roomName, setRoomName] = useState(\"\");\n\n  const onAdd = () => {\n    add(roomName);\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add Group</DialogTitle>\n\n      <DialogContent>\n        <TextField\n          sx={{ width: 400, my: 1 }}\n          onChange={(e) => setRoomName(e.target.value)}\n          label=\"Group name\"\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst AddContactPrompt = ({ open, close, add, allUsers }) => {\n  const [newContact, setNewContact] = useState(\"\");\n\n  const onAdd = () => {\n    add(newContact);\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add Contact</DialogTitle>\n\n      <DialogContent>\n        <Autocomplete\n          sx={{ width: 400, my: 1 }}\n          onChange={(_, u) => u && setNewContact(u.id)}\n          options={allUsers.map((u) => ({\n            label: userDisplayName(u),\n            id: u.user_id,\n          }))}\n          renderInput={(params) => <TextField {...params} label=\"User\" />}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n// TODO use teh name property\nconst userDisplayName = (u) => `${u.user_firstname} ${u.user_lastname} (${u.user_email})`;\n\nconst Roster = ({\n  roster,\n  client,\n  allUsers,\n  API_BASE,\n  MUC_LIGHT_HOSTNAME,\n  jwt,\n}) => {\n  const [search, setSearch] = useState(\"\");\n  const [subNav, setSubNav] = useState(null);\n  const [showAddContact, setShowAddContact] = useState(false);\n  const [showAddRoom, setShowAddRoom] = useState(false);\n  const [tab, setTab] = useState(0);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const showAddMenu = Boolean(anchorEl);\n\n  const openAddMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const closeAddMenu = () => {\n    setAnchorEl(null);\n  };\n\n  const addContact = (uuid) => {\n    const jid = `${uuid}@${client.config.server}`;\n    client.subscribe(jid);\n  }\n\n  // TODO: this will use the Room API in the future\n  const addRoom = async (name) => {\n    const uuid = crypto.randomUUID();\n    const jid = `${uuid}@${MUC_LIGHT_HOSTNAME}`;\n    const res = await client.joinRoom(jid);\n    console.log(\"created room!\", res);\n    client.configureRoom(jid, { fields: [ { name: 'roomname', value: name } ] });\n  }\n\n  // filter by search\n  const filteredRoster = roster.filter(r =>\n    r.name?.toLowerCase().includes(search.toLowerCase()) || r.jid?.includes(search))\n  .filter(r => (tab === 0 && !r.isRoom) || (tab === 1 && r.isRoom));\n\n  const messages = {}; // TODO\n\n  const chatMessages = subNav && messages[subNav.jid]\n    ? messages[subNav.jid]\n    : [];\n\n  const allOtherUsers = allUsers.filter((u) => !client.config.jid.includes(u.user_id));\n\n  return (\n    <>\n      <AddContactPrompt\n        add={addContact}\n        close={() => setShowAddContact(false)}\n        open={showAddContact}\n        allUsers={allOtherUsers}\n      />\n\n      <AddRoomPrompt\n        add={addRoom}\n        close={() => setShowAddRoom(false)}\n        open={showAddRoom}\n      />\n\n      <Paper className=\"scroll-list-container\" sx={{ width: 300 }}>\n        <Box sx={{ px: 2 }}>\n          <Stack direction=\"row\" sx={{ alignItems: \"center\" }}>\n            <h2>Contacts</h2>\n\n            <IconButton sx={{ ml: \"auto\" }} onClick={openAddMenu}>\n              <AddIcon fontSize=\"inherit\" />\n            </IconButton>\n\n            <Menu\n              id=\"basic-menu\"\n              anchorEl={anchorEl}\n              open={showAddMenu}\n              onClose={closeAddMenu}\n              MenuListProps={{\n                'aria-labelledby': 'basic-button',\n              }}\n            >\n              <MenuItem onClick={() => { closeAddMenu(); setShowAddContact(true)}}>Add Contact</MenuItem>\n              <MenuItem onClick={() => { closeAddMenu(); setShowAddRoom(true)}}>Add Group</MenuItem>\n            </Menu>\n          </Stack>\n\n          <TextField\n            type=\"search\"\n            label=\"Search\"\n            variant=\"filled\"\n            size=\"small\"\n            fullWidth\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </Box>\n\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={tab} onChange={(_, idx) => setTab(idx)} aria-label=\"basic tabs example\">\n            <Tab label=\"Contacts\" index={0} />\n            <Tab label=\"Groups\" index={1} />\n          </Tabs>\n        </Box>\n\n        <List className=\"scroll-list\">\n          {filteredRoster.map((u) => {\n            const status = u.isRoom ? '' : u.status;\n            const color = {\n              available: \"#51b397\",\n              away: \"#f0a73e\",\n              unavailable: \"gray\",\n              \"in-meeting\": \"#ea3323\",\n            }[status] || \"gray\";\n\n            return (\n              <ListItem key={u.jid} disablePadding>\n                <ListItemButton onClick={() => setSubNav(u)}>\n                  <ListItemAvatar>\n                    <Badge\n                      componentsProps={{\n                        badge: {\n                          sx: {\n                            backgroundColor: color,\n                            border: \"2px solid white\",\n                            width: 14,\n                            height: 14,\n                            borderRadius: 7,\n                          },\n                        },\n                      }}\n                      overlap=\"circular\"\n                      badgeContent=\" \"\n                      invisible={u.isRoom}\n                      variant=\"dot\"\n                      anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'right',\n                      }}\n                    >\n                      <Avatar>\n                        {u.isRoom\n                          ? <GroupsIcon />\n                          : initials(u)}\n                      </Avatar>\n                    </Badge>\n                  </ListItemAvatar>\n\n                  <ListItemText\n                    primary={u.name}\n                    primaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                    secondary={u.user?.user_email}\n                    secondaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                    title={u.jid + (u.activity ? \" - \" + u.activity : \"\")}\n                    />\n                </ListItemButton>\n              </ListItem>\n            )})}\n        </List>\n      </Paper>\n\n      <Paper className=\"right-section\">\n        {subNav && <Message allUsers={allUsers} client={client} user={subNav} messages={chatMessages} API_BASE={API_BASE} jwt={jwt} />}\n      </Paper>\n    </>\n  );\n};\n\n// TODO put this is allUsers state\nfunction initials(u) {\n  return u.name?.split(\" \")?.slice(0, 2)?.map(n => n.substr(0, 1));\n}\n\nexport default Roster;\n","import { useState } from 'react';\nimport {\n  Box,\n  Button,\n  TextField,\n  Paper,\n  Stack,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemAvatar,\n  ListItemText,\n  Avatar,\n  Autocomplete,\n} from \"@mui/material\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\n\nimport AddIcon from '@mui/icons-material/Add';\nimport GroupsIcon from '@mui/icons-material/Groups';\n\nimport Message from \"./message\";\n\nimport db from \"./db\";\n\nconst AddChatPrompt = ({ open, close, add, allUsers }) => {\n  const [newContact, setNewContact] = useState(\"\");\n\n  const onAdd = () => {\n    add(newContact);\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Find a User</DialogTitle>\n\n      <DialogContent>\n        <Autocomplete\n          sx={{ width: 400, my: 1 }}\n          onChange={(_, u) => u && setNewContact(u.id)}\n          options={allUsers.map(u => ({\n            label: userDisplayName(u),\n            id: u.user_id,\n          }))}\n          renderInput={(params) => <TextField {...params} label=\"User\" />}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n// TODO use teh name property\nconst userDisplayName = (u) => `${u.user_firstname} ${u.user_lastname} (${u.user_email})`;\n\nconst Messages = ({ client, allUsers, roster, jwt, API_BASE }) => {\n  const [search, setSearch] = useState(\"\");\n  const [subNav, setSubNav] = useState(null);\n  const [showAddChat, setShowAddChat] = useState(false);\n\n  // pull out all of the unique IDs from all of the messages\n  const tos = useLiveQuery(() => db.messages.orderBy(\"to\").uniqueKeys()) || [];\n  const froms = useLiveQuery(() => db.messages.orderBy(\"from\").uniqueKeys()) || [];\n  const jids = tos.concat(froms)\n  .filter((v, i, a) => a.indexOf(v) === i) // all unique jids\n  .filter((jid) => jid !== client.config.jid); // that aren't you\n\n  const users = jids?.map(jid => { // add names\n    const user = allUsers.find((u) => jid.includes(u.user_id));\n    const name = user?.name // user names come from all users\n      || roster.find((r) => r.jid === jid)?.name // room names will be in your roster\n      || jid;\n\n    return { jid, user, name };\n  });\n\n  const filteredUsers = users?.filter((u) => { // filter by search\n    const s = search.toLowerCase();\n    return u.name?.toLowerCase().includes(s)\n      || s.includes(u.name?.toLowerCase())\n      || u.user?.user_email?.includes(s)\n      || s.includes(u.user?.user_email);\n  });\n\n  const addChat = (uuid) => {\n    console.log(\"addChat\", uuid);\n    const jid = `${uuid}@${client.config.server}`;\n    console.log(\"jid\", jid);\n    // TODO\n  };\n\n  return (\n    <>\n      <AddChatPrompt\n        add={addChat}\n        close={() => setShowAddChat(false)}\n        open={showAddChat}\n        allUsers={allUsers}\n      />\n\n      <Paper className=\"scroll-list-container\" sx={{ width: 300 }}>\n        <Box sx={{ px: 2 }}>\n          <Stack direction=\"row\" sx={{ alignItems: \"center\" }}>\n            <h2>Chat</h2>\n            {/* <IconButton sx={{ ml: \"auto\" }} onClick={() => setShowAddChat(true)}> */}\n            {/*   <AddIcon fontSize=\"inherit\" /> */}\n            {/* </IconButton> */}\n          </Stack>\n\n          <TextField\n            type=\"search\"\n            label=\"Search\"\n            variant=\"filled\"\n            size=\"small\"\n            fullWidth\n            onChange={(e) => setSearch(e.target.value)}\n            />\n        </Box>\n\n        <List className=\"scroll-list\">\n          {filteredUsers.map((u) => (\n            <ListItem key={u.jid} disablePadding>\n              <ListItemButton onClick={() => setSubNav(u)}>\n                <ListItemAvatar>\n                  <Avatar>\n                    {u.isRoom\n                      ? <GroupsIcon />\n                      : initials(u)}\n                  </Avatar>\n                </ListItemAvatar>\n\n                <ListItemText\n                  primary={u.name}\n                  primaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  secondary={u.user?.user_email}\n                  secondaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  title={u.jid}\n                />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n\n      <Paper className=\"right-section\">\n        {subNav && <Message allUsers={allUsers} client={client} user={subNav} API_BASE={API_BASE} jwt={jwt} />}\n      </Paper>\n    </>\n  );\n};\n\n// TODO put this is allUsers state\nfunction initials(u) {\n  return u.name?.split(\" \")?.slice(0, 2)?.map(n => n.substr(0, 1));\n}\n\nexport default Messages;\n","import { Agent, JXT } from 'stanza';\nimport { IQ, ReceivedMessage } from 'stanza/protocol';\n\n// 1. Declare our new custom stanza extension type\nexport interface InboxMessage extends ReceivedMessage {\n  result?: InboxResult;\n}\n\nexport interface InboxResult {\n  forwarded?: InboxMessage;\n}\n\nexport interface InboxMessage {\n  message?: string;\n}\n\n// 2. Begin injecting our plugin's type information into StanzaJS.\ndeclare module 'stanza' {\n\n    // 3. Declare a new method for the StanzaJS agent\n    export interface Agent {\n        getInbox(): Promise<IQ>\n    }\n\n    // 4. Declare our event types. (Event names are the fields in AgentEvents.)\n    export interface AgentEvents {\n      inbox: InboxMessage;\n    }\n\n    // 5. Stanza definitions MUST be placed in the Stanzas namespace\n    namespace Stanzas {\n\n        // 6. Attach our new definition to Message stanzas\n        export interface Message {\n            result?: InboxResult;\n        }\n    }\n}\n\n\n// 7. Create a plugin function\nexport default function (client: Agent, stanzas: JXT.Registry) {\n\n    // 8. Create and register our custom stanza definition\n    stanzas.define({\n        element: 'result',\n        fields: {\n            unread: JXT.attribute('unread'),\n            queryid: JXT.attribute('queryid'),\n        },\n        namespace: 'erlang-solutions.com:xmpp:inbox:0',\n        path: 'message.result'\n    });\n\n    stanzas.define({\n        element: 'forwarded',\n        fields: {\n            unread: JXT.attribute('unread')\n        },\n        namespace: 'urn:xmpp:forward:0',\n        path: 'message.result.forwarded'\n    });\n\n    stanzas.define({\n        element: 'inbox',\n        fields: {\n            result: JXT.text()\n        },\n        namespace: 'erlang-solutions.com:xmpp:inbox:0',\n        path: 'iq.inbox'\n    });\n\n    // 9. Add API to the StanzaJS agent for sending\n    client.getInbox = () => {\n        return client.sendIQ({\n            type: 'set',\n            inbox: \"test\",\n        });\n    };\n\n    // 10. Listen for incoming inbox data and emit our own event\n    client.on('message', msg => {\n        if (msg.result) {\n            client.emit('inbox', msg);\n        }\n    });\n};\n","import { useState, useEffect, useContext } from \"react\";\nimport * as XMPP from \"stanza\";\n\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Snackbar,\n  Alert,\n} from \"@mui/material\";\n\nimport db from \"./db\";\nimport \"./App.css\";\nimport SideBar from \"./sidebar\";\nimport Roster from \"./roster\";\nimport Messages from \"./messages\";\n\nimport IqInbox from './inbox.ts';\n\nwindow.db = db;\n\nconst API_BASE = \"https://saas-api.visionable.one\";\nconst PROTOCOL = \"wss\";\nconst PORT = \"5443\";\nconst ENDPOINT = \"ws-xmpp\";\n\nconst resource = localStorage.getItem(\"xmpp-resource\") || crypto.randomUUID();\nlocalStorage.setItem(\"xmpp-resource\", resource);\n\nconst initXMPP = async (jid, password, hostname) =>\n  XMPP.createClient({\n    jid,\n    password,\n    resource,\n    transports: {\n      websocket: `${PROTOCOL}://${hostname}:${PORT}/${ENDPOINT}`,\n    },\n  });\n\nconst App = ({ signOutAWS, user }) => {\n  const [client, setClient] = useState(null);\n  const [jwt, setJwt] = useState(\"\");\n  const [roster, setRoster] = useState([]);\n  const [presence, setPresence] = useState({});\n  const [activities, setActivities] = useState({});\n  const [incomingInvites, setIncomingInvites] = useState([]);\n  const [inviteResponses, setInviteResponses] = useState({});\n  const [allUsers, setAllUsers] = useState([]);\n  const [nav, setNav] = useState(\"contacts\");\n  const [connected, setConnected] = useState(false);\n  const [server] = useState(\"saas.visionable.one\");\n\n  const [serviceName, ...[domain]] = server.split(/\\.(.*)/s); // split out the serviceName from the rest of the host\n  const xmppHostname = `${serviceName}-msg.${domain}`; // e.g. saas-msg.visionable.one\n  const mucHostname = `muclight.${xmppHostname}`; // e.g. muclight.saas-msg.visionable.one\n\n  const signIn = async () => {\n    if (client) {\n      return; // only sign in once\n    }\n\n    if (localStorage.getItem(\"username\") !== user.username) {\n      await db.messages.clear();\n    }\n    localStorage.setItem(\"username\", user.username);\n\n    try {\n      const { signInUserSession: session } = user;\n      const jwt = session.idToken.jwtToken;\n      setJwt(jwt);\n      const jid = `${user.username}@${xmppHostname}`;\n      const xmpp = await initXMPP(jid, jwt, xmppHostname);\n\n      xmpp.use(IqInbox);\n\n      setClient(xmpp);\n      setConnected(true);\n\n      const cognitoUsers = await getAllUsers(jwt);\n      const extendedUsers = cognitoUsers.map((u) => ({ ...u, name: userFullName(u) }));\n      setAllUsers(extendedUsers);\n\n      window.client = xmpp;\n\n      xmpp.on(\"session:started\", async () => {\n        xmpp.updateCaps();\n        xmpp.sendPresence({\n          legacyCapabilities: xmpp.disco.getCaps() // have to enable this to get PEP notifications\n        });\n        xmpp.enableKeepAlive();\n        xmpp.enableCarbons();\n\n        const roster = (await xmpp.getRoster()).items;\n        setRoster(roster);\n\n        // get \"inbox\"\n        // const res = await xmpp.getInbox();\n        // console.log(\"INBOX RES\", res);\n\n        // Get all of the messages up until the last one I've seen\n        const lastMessage = await db.messages.orderBy(\"timestamp\").last();\n        getAllMessages({ client: xmpp, start: lastMessage?.timestamp });\n      });\n\n      xmpp.on(\"message\", (message) => {\n        if (message.type === 'meeting-invite') {\n          setIncomingInvites((prev) => [...prev, message]);\n        } else if (message.type === \"chat\" || message.type === \"groupchat\") {\n          const [before, after] = message.from.split(\"/\");\n          const group = message.type === \"chat\" ? null : before;\n          const from = message.type === \"chat\" ? before : after;\n\n          db.messages.put({\n            id: message.id,\n            from,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group,\n            timestamp: new Date(),\n          }, message.id)\n        }\n      });\n\n      xmpp.on(\"message:sent\", (message) => {\n        if (message.type === 'meeting-invite') {\n          // TODO: display something in the chat\n        } else if (message.type === \"chat\") {\n          // TODO: until acked, put a pending status\n          db.messages.put({\n            id: message.id,\n            from: xmpp.config.jid,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group: null,\n            timestamp: new Date(),\n          }, message.id)\n        }\n      });\n\n      xmpp.on(\"mam:item\", (mam) => {\n        const message = mam.archive?.item?.message;\n        const timestamp = mam.archive?.item?.delay?.timestamp;\n        if (message.type === \"chat\" || message.type === \"groupchat\") {\n          const [before, after] = message.from.split(\"/\");\n          const group = message.type === \"chat\" ? null : before;\n          const from = message.type === \"chat\" ? before : after;\n\n          db.messages.put({\n            id: message.id,\n            from,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group,\n            timestamp: new Date(),\n          }, message.id)\n        }\n      });\n\n      xmpp.on(\"inbox\", (msg) => {\n        const timestamp = msg.result?.forwarded?.delay?.stamp;\n        const message = msg.result?.forwarded?.message;\n        console.log(\"inbox message\", message)\n\n        if (!message) { return; }\n        const { to } = message;\n\n        if (message.type === \"chat\") {\n          const [from] = message.from.split(\"/\");\n\n          db.messages.put({\n            id: message.id,\n            from,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group: null,\n            timestamp,\n          }, message.id)\n        } else if (message.type === \"groupchat\") {\n\n        }\n      });\n\n      xmpp.on(\"subscribe\", (data) => { // if someone subscribes to us..\n        xmpp.acceptSubscription(data.from); // auto accept\n        xmpp.subscribe(data.from);\n      });\n\n      xmpp.on(\"unsubscribe\", () => { // if someone removes me from their roster\n        // xmpp.unsubscribe(data.from); // remove them from ours?\n      });\n\n      xmpp.on(\"roster:update\", async (data) => { // roster item change\n        data.roster.items.forEach((r) => {\n          xmpp.searchHistory({ with: r.jid, paging: { before: \"\" }}); // get the last few messages\n        });\n\n        setRoster((await xmpp.getRoster()).items)\n      });\n\n      // if someone adds you to a room, auto accept it\n      xmpp.on(\"muc:invite\", (data) => {\n        client.joinRoom(data.room);\n      });\n\n      // created or added to a room\n      xmpp.on(\"muc:available\", async () =>\n        setRoster((await xmpp.getRoster()).items)\n      );\n\n      // no longer in a room\n      xmpp.on(\"muc:unavailable\", async () =>\n        setRoster((await xmpp.getRoster()).items)\n      );\n\n      xmpp.on(\"presence\", (data) => {\n        setPresence((prev) => ({ ...prev, [data.from]: data }))\n      });\n\n      xmpp.on(\"activity\", (data) => {\n        const { jid, activity: { text } } = data;\n        console.log(\"ACTIVITY\", jid, text);\n        setActivities((prev) => ({ ...prev, [jid]: text }));\n      });\n\n      xmpp.on(\"*\", async (type, data) => {\n        console.log(type, data);\n      });\n\n      // on disconnect, retry\n      xmpp.on(\"disconnected\", () => {\n        console.log(\"DISCONNECTED\");\n        setConnected(false);\n        // setTimeout(xmpp.connect, 3000)\n      })\n\n      xmpp.on(\"connected\", () => {\n        setConnected(true);\n      })\n\n      xmpp.connect();\n\n      window.addEventListener('beforeunload', function(event) {\n        console.log('window.beforeunload');\n        xmpp.disconnect();\n      });\n    } catch (e) {\n      console.error(\"caught\", e);\n    }\n  };\n\n  useEffect(signIn, [user]);\n\n  // extend the roster with info from the User API, presence, etc.\n  const extendedRoster = roster.map(r => {\n    const user = allUsers.find(u => r.jid.includes(u.user_id));\n    const name = r.name // if the roster item has a name\n      ? r.name // use that\n      : user // otherwise, if there's a corresponding user from the User API\n        ? userFullName(user) // get the name of that\n        : r.jid;// otherwise, just show their JID\n\n    // grab all of the resources that we've been given presence for this user\n    const statuses = Object.values(presence)\n      .filter((u) => u.from.includes(r.jid))\n      .filter((u) => u.type !== 'unavailable')\n      .map((u) => u.status || 'available');\n\n    const status = statuses.length === 0 // if they have no resources online\n      ? 'unavailable' // they're unavailable\n      : statuses.some((s) => s === 'in-meeting') // if _any_ resource is in a meeting\n        ? 'in-meeting' // show in-meeting\n        : statuses.every((s) => s === 'away') // if _all_ of their resources are away\n          ? 'away' // show away\n          : statuses.every((s) => s === 'available') // if _all_ of their resources are available\n            ? 'available' // show available\n            : 'available'; // otherwise, if they have other online resources, show available\n\n    return {\n      ...r,\n      user,\n      name,\n      status,\n      statuses,\n      activity: activities[r.jid],\n      isRoom: !!r.groups?.[0]?.includes(\"muc\"),\n    };\n  });\n  window.presence = presence;\n  window.roster = extendedRoster;\n  window.activities = activities;\n\n  console.log('new presence list', presence);\n  console.log(\"extended roster\", extendedRoster);\n\n  // find my own user from the User API\n  const me = allUsers.find((u) => client.jid.match(u.user_id)) || {};\n\n  const reconnect = async () => {\n    console.log(\"reconnecting\");\n    // client.config.credentials.password = user.signInUserSession.idToken.jwtToken;\n    client.updateConfig({ ...(client.config.credentials), password: user.signInUserSession.idToken.jwtToken });\n    client.connect();\n  };\n\n  const signOut = async () => {\n    client.disconnect();\n    setConnected(false);\n    setRoster([]);\n    setPresence({});\n    db.messages.clear();\n    localStorage.removeItem(\"visionable-xmpp-hostname\"); // grab this from context\n    signOutAWS();\n  };\n\n  const acceptInvite = (message) => {\n    setInviteResponses((prev) => ({ ...prev, [message.id]: \"accept\" }))\n    client.sendMessage({ to: message.from, body: message.id, type: 'meeting-invite-accept' });\n  };\n\n  const rejectInvite = (message) => {\n    setInviteResponses((prev) => ({ ...prev, [message.id]: \"reject\" }))\n    client.sendMessage({ to: message.from, body: message.id, type: 'meeting-invite-reject' });\n  };\n\n  /*\n  const changeName = () => {\n    client.publishVCard({ fullName: newName });\n  };\n\n  const getVCard = async () => {\n    try {\n      const card = await client.getVCard(jid);\n      console.log(\"my card\", card);\n      setNewName(card?.fullName);\n    } catch (e) {\n      console.error(\"Error getting vcard\", e);\n    }\n  };\n\n  const getMUCLightRooms = async () => {\n    const res = await client.getDiscoItems(MUC_LIGHT_HOSTNAME);\n  }\n\n  const uploadFile = (e) => {\n    Array.from(e.target.files).forEach(async (f) => {\n      const { name, size, type: mediaType } = f; // TODO files with spaces in name fail\n      console.log('file', name, size, mediaType);\n      const service = await client.getUploadService();\n      console.log('service', service);\n      const slot = await client.getUploadSlot(service.jid, { name, size, mediaType })\n      console.log('slot', slot);\n      const { download: downloadUrl, upload: { url: uploadUrl } } = slot;\n      console.log('got urls', downloadUrl, uploadUrl);\n      const res = await fetch(uploadUrl, {\n        method: \"PUT\",\n        body: f,\n        headers: { \"x-amz-acl\": \"public-read\" },\n      });\n      console.log('res', res);\n\n      if (to) { // send notification\n        client.sendMessage({ to, body: downloadUrl, type: 'file-upload' });\n      }\n    })\n  }\n*/\n\n  if (!client) {\n    return (\n      <div className=\"App\">Loading</div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <SideBar nav={nav} setNav={setNav} signOut={signOut} client={client} me={me} />\n\n      <Snackbar\n        onClick={reconnect}\n        open={!connected}\n        anchorOrigin={{ horizontal: \"center\", vertical: \"bottom\" }}\n        sx={{ cursor: \"pointer\" }}\n      >\n        <Alert severity=\"error\" sx={{ width: '100%' }}>Disconnected. Click here to reconnect</Alert>\n      </Snackbar>\n\n      <IncomingInvites\n        accept={acceptInvite}\n        reject={rejectInvite}\n        invites={incomingInvites}\n        responses={inviteResponses} />\n\n      <Box className=\"main\">\n        {nav === 'contacts'\n          ? <Roster\n            roster={extendedRoster}\n            // presence={presence}\n            allUsers={allUsers}\n            client={client}\n            API_BASE={API_BASE}\n            MUC_LIGHT_HOSTNAME={mucHostname}\n            jwt={jwt}\n            />\n          : nav === 'messages'\n            ? <Messages\n              roster={extendedRoster}\n              // presence={presence}\n              allUsers={allUsers}\n              client={client}\n              API_BASE={API_BASE}\n              MUC_LIGHT_HOSTNAME={mucHostname}\n              jwt={jwt}\n              />\n            : null}\n      </Box>\n    </div>\n  );\n};\n\nconst IncomingInvites = ({ accept, reject, invites, responses }) =>\n  invites.filter((m) => !responses[m.id]).map((m) => (\n    <Dialog key={m.id} open={true}>\n      <DialogTitle>Meeting Invite</DialogTitle>\n      <DialogContent>\n        <p>Invite ID: {m.id}</p>\n        <p>From: {m.from}</p>\n        <p>Meeting ID: {m.body}</p>\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"error\" onClick={() => reject(m)}>Reject</Button>\n        <Button onClick={() => accept(m)}>Accept</Button>\n      </DialogActions>\n    </Dialog>\n  ));\n\nconst getAllUsers = async (jwt) => {\n  const res = await fetch(`${API_BASE}/api/user`, { headers: { Authorization: jwt } });\n  return res.ok ? res.json() : [];\n}\n\nfunction userFullName(user) {\n  return user?.name\n  ? user.name\n    : user?.user_displayname\n      ? user.user_displayname\n      : user?.user_firstname\n        ? `${user.user_firstname} ${user.user_lastname}`\n        : \"[No Name]\";\n}\n\nasync function getAllMessages({ client, start, after }) {\n  const paging = after ? { after } : {};\n  const { complete, paging: { last } } = await client.searchHistory({ start, paging });\n\n  if (!complete) {\n    getAllMessages({ client, after: last });\n  }\n}\n\nexport default App;\n","import React, { useState, useEffect, createContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nimport Amplify from \"aws-amplify\";\nimport { Authenticator } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\nconst Context = createContext({});\n\nconst HOSTNAME_KEY = \"visionable-xmpp-hostname\";\nconst lastHostname = localStorage.getItem(HOSTNAME_KEY);\nconst hostname = lastHostname || prompt(\"Enter hostname\", \"saas.visionable.one\");\nlocalStorage.setItem(HOSTNAME_KEY, hostname);\n\nconst AppContainer = () => {\n  const [config, setConfig] = useState(null);\n\n  const configure = async () => {\n    const json = await getServiceConfig(hostname)\n\n    Amplify.configure({\n      Auth: {\n        region: json['aws-region'],\n        userPoolId: json['aws-user-pool-id'],\n        userPoolWebClientId: json['aws-user-pool-client-id'],\n      },\n    });\n\n    setConfig(json);\n  };\n\n  useEffect(() => configure(), []);\n\n  const value = {\n    HOSTNAME_KEY\n  };\n\n  return !config\n    ? null\n    : (\n      <Context.Provider value={value}>\n        <Authenticator>\n          {({ signOut, user }) => (\n            <App signOutAWS={signOut} user={user} />\n          )}\n        </Authenticator>\n      </Context.Provider>\n    );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nasync function getServiceConfig(hostname) {\n  try {\n    const res = await fetch(`https://${hostname}/config.json`, { mode: \"cors\" });\n    return await res.json();\n  } catch(e) {\n    console.log(e);\n    alert(\"Error requesting configuration data for this service\");\n    localStorage.removeItem(HOSTNAME_KEY);\n    window.location.reload();\n  }\n}\n"],"sourceRoot":""}