{"version":3,"sources":["db.js","profile.js","sidebar.js","message.js","roster.js","messages.js","App.js","index.js"],"names":["db","Dexie","version","stores","messages","Profile","client","me","signOut","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","statusList","key","color","label","icon","Circle","ListItem","disablePadding","ListItemIcon","IconButton","onClick","event","currentTarget","sx","ml","Avatar","width","height","ListItemText","primary","name","primaryTypographyProps","textOverflow","overflow","whiteSpace","secondary","user_email","secondaryTypographyProps","title","config","jid","Menu","id","onClose","PaperProps","elevation","filter","mt","mr","content","display","position","top","right","bgcolor","transform","zIndex","transformOrigin","horizontal","vertical","anchorOrigin","MenuItem","disabled","Divider","map","s","status","sendPresence","fontSize","items","route","iconComponent","ContactsIcon","ChatIcon","SideBar","setNav","nav","List","flexDirection","minWidth","background","i","IconComponent","ListItemButton","Chat","message","mine","isRoom","from","includes","Box","className","blue","p","mx","my","borderRadius","marginLeft","marginRight","style","timestamp","toLocaleString","body","createMeeting","API_BASE","jwt","a","url","mstart","parseInt","Date","getTime","formData","FormData","append","toString","fetch","method","headers","Authorization","then","res","json","AddUserToRoomPrompt","close","allUsers","room","user","setUser","Dialog","DialogTitle","DialogContent","Autocomplete","onChange","_","u","options","user_id","renderInput","params","TextField","DialogActions","Button","setRoomAffiliation","Message","members","setMembers","setMessage","showAddUserToRoom","setShowAddUserToRoom","scrollRef","useRef","roomListAnchorEl","setRoomListAnchorEl","showRoomList","useLiveQuery","where","equals","or","sortBy","extendedMessages","find","removeContact","leaveRoom","removeRosterItem","unsubscribe","sendMessage","type","to","invite","uuid","memberList","getRoomMembers","muc","users","m","target","closeRoomList","useEffect","current","scrollTop","scrollHeight","Stack","flexGrow","direction","px","alignItems","MenuListProps","ref","e","value","placeholder","onKeyPress","InputProps","endAdornment","AddRoomPrompt","add","roomName","setRoomName","AddContactPrompt","newContact","setNewContact","userDisplayName","user_firstname","user_lastname","initials","split","slice","n","substr","Roster","roster","MUC_LIGHT_HOSTNAME","search","setSearch","subNav","setSubNav","showAddContact","setShowAddContact","showAddRoom","setShowAddRoom","showAddMenu","closeAddMenu","addRoom","crypto","randomUUID","joinRoom","console","log","configureRoom","fields","filteredRoster","r","toLowerCase","chatMessages","server","subscribe","Paper","variant","size","fullWidth","ListItemAvatar","Messages","tos","orderBy","uniqueKeys","froms","jids","concat","v","indexOf","filteredUsers","window","resource","localStorage","getItem","setItem","initXMPP","password","hostname","XMPP","transports","websocket","IncomingInvites","accept","reject","invites","responses","getAllUsers","ok","userFullName","user_displayname","getAllMessages","start","after","paging","searchHistory","complete","last","App","signOutAWS","setClient","setJwt","setRoster","presence","setPresence","incomingInvites","setIncomingInvites","inviteResponses","setInviteResponses","setAllUsers","connected","setConnected","serviceName","domain","xmppHostname","mucHostname","signIn","username","clear","session","signInUserSession","idToken","jwtToken","xmpp","cognitoUsers","extendedUsers","on","enableKeepAlive","enableCarbons","getRoster","lastMessage","prev","put","group","mam","archive","item","delay","data","acceptSubscription","forEach","with","before","connect","error","extendedRoster","resources","Object","values","groups","match","reconnect","disconnect","Snackbar","cursor","Alert","severity","Amplify","configure","Auth","region","userPoolId","userPoolWebClientId","ReactDOM","render","StrictMode","CssBaseline","Authenticator","document","getElementById"],"mappings":"4XAEMA,EAAK,I,OAAIC,SAAM,4BAErBD,EAAGE,QAAQ,GAAGC,OAAO,CACnBC,SAAU,iDAGGJ,Q,kLCoIAK,EA9HC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,QAC7B,EAAgCC,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAOC,QAAQH,GAMfI,EAAc,WAClBH,EAAY,OAORI,EAAa,CACjB,CACEC,IAAK,YACLC,MAAO,UACPC,MAAO,YACPC,KAAMC,KAER,CACEJ,IAAK,aACLC,MAAO,UACPC,MAAO,eACPC,KAAMC,KAER,CACEJ,IAAK,OACLC,MAAO,UACPC,MAAO,OACPC,KAAMC,MAIV,OACE,qCACE,eAACC,EAAA,EAAD,CAAUC,gBAAc,EAAxB,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QArCA,SAACC,GACnBf,EAAYe,EAAMC,gBAoCsBC,GAAI,CAAEC,GAAI,IAA5C,SACE,cAACC,EAAA,EAAD,CAAQF,GAAI,CAAEG,MAAO,GAAIC,OAAQ,IAAjC,mBAIJ,cAACC,EAAA,EAAD,CACEC,QAAS3B,EAAG4B,KACZC,uBAAwB,CAAEnB,MAAO,QAASoB,aAAc,WAAYC,SAAU,SAAUC,WAAY,UACpGC,UAAWjC,EAAGkC,WACdC,yBAA0B,CAAEzB,MAAO,QAASoB,aAAc,WAAYC,SAAU,SAAUC,WAAY,UACtGI,MAAOrC,EAAOsC,OAAOC,SAIzB,eAACC,EAAA,EAAD,CACEpC,SAAUA,EACVqC,GAAG,eACHnC,KAAMA,EACNoC,QAASlC,EACTW,QAASX,EACTmC,WAAY,CACVC,UAAW,EACXtB,GAAI,CACFU,SAAU,UACVa,OAAQ,4CACRC,GAAI,IACJ,oBAAqB,CACnBrB,MAAO,GACPC,OAAQ,GACRH,IAAK,GACLwB,GAAI,GAEN,WAAY,CACVC,QAAS,KACTC,QAAS,QACTC,SAAU,WACVC,IAAK,EACLC,MAAO,GACP3B,MAAO,GACPC,OAAQ,GACR2B,QAAS,mBACTC,UAAW,iCACXC,OAAQ,KAIdC,gBAAiB,CAAEC,WAAY,QAASC,SAAU,OAClDC,aAAc,CAAEF,WAAY,QAASC,SAAU,UAjCjD,UAmCE,eAACE,EAAA,EAAD,CAAUC,UAAQ,EAAlB,UACE,cAACrC,EAAA,EAAD,IADF,cAIA,cAACsC,EAAA,EAAD,IAECrD,EAAWsD,KAAI,SAACC,GAAD,OACd,eAACJ,EAAA,EAAD,CAAsBzC,QAAS,kBArFpB8C,EAqFoCD,EAAEtD,SApFvDV,EAAOkE,aAAa,CAAED,WADN,IAACA,GAqFX,UACE,cAAChD,EAAA,EAAD,UACE,cAAC,IAAD,CAAQkD,SAAS,QAAQ7C,GAAI,CAAEX,MAAOqD,EAAErD,WAG1C,cAACgB,EAAA,EAAD,CAAcC,QAASoC,EAAEpD,UALZoD,EAAEtD,QASnB,cAACoD,EAAA,EAAD,IAEA,eAACF,EAAA,EAAD,CAAUC,UAAQ,EAAlB,UACE,cAAC5C,EAAA,EAAD,UACE,cAAC,IAAD,CAAUkD,SAAS,YAFvB,cAOA,eAACP,EAAA,EAAD,CAAUzC,QAASjB,EAAnB,UACE,cAACe,EAAA,EAAD,UACE,cAAC,IAAD,CAAQkD,SAAS,YAFrB,mBClHFC,EAAQ,CACZ,CACEC,MAAO,WACPzD,MAAO,WACP0D,cAAeC,KAEjB,CACEF,MAAO,WACPzD,MAAO,WACP0D,cAAeE,MA8CJC,EA1CC,SAAC,GAAD,IAAGzE,EAAH,EAAGA,OAAQC,EAAX,EAAWA,GAAIyE,EAAf,EAAeA,OAAQC,EAAvB,EAAuBA,IAAKzE,EAA5B,EAA4BA,QAA5B,OACd,eAAC0E,EAAA,EAAD,CAAMtD,GAAI,CACR2B,QAAS,OACT4B,cAAe,SACfpD,MAAO,QACPqD,SAAU,QACVC,WAAY,UACZpE,MAAO,SANT,UAQE,cAAC,EAAD,CAASX,OAAQA,EAAQC,GAAIA,EAAIC,QAASA,IAEzCkE,EAAML,KAAI,SAAAiB,GACT,IAAMC,EAAgBD,EAAEV,cAExB,OACE,cAACvD,EAAA,EAAD,CAAwBC,gBAAc,EAACM,GAAI,CAAEyD,WAAYJ,IAAQK,EAAEX,MAAQ,wBAA0B,eAArG,SACE,eAACa,EAAA,EAAD,CAAgB/D,QAAS,kBAAMuD,EAAOM,EAAEX,QAAxC,UACE,cAACpD,EAAA,EAAD,UACE,cAACgE,EAAD,CAAe3D,GAAI,CAAEX,MAAO,aAG9B,cAACgB,EAAA,EAAD,UACGqD,EAAEpE,YAPMoE,EAAEX,c,uKCmHnBc,GAAO,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,QAASpF,EAAqB,EAArBA,OACjBqF,GADsC,EAAbC,QACjBF,EAAQG,MAAQH,EAAQG,KAAKC,SAASxF,EAAOsC,OAAOC,MAMlE,OACE,eAACkD,EAAA,EAAD,CACEC,UAAS,uBAAkBL,EAAO,OAAS,IAC3C/D,GAAI,CACFyD,WAAYM,EAAOM,KAAK,KAAO,QAC/BhF,MAAO0E,EAAO,QAAU,QACxBO,EAAG,IACHC,GAAI,EAAGC,GAAI,EACXC,aAAc,EACdC,WAAYX,EAAO,OAAS,EAC5BY,YAAaZ,EAAO,EAAI,QAT5B,UAYE,uBAAMa,MAAO,CAAE/B,SAAU,SAAzB,UACE,4BAAIiB,EAAQvD,OACZ,sBAAMqE,MAAO,CAAEF,WAAY,MAAOrF,MAAO0E,EAAO,OAAS,QAAzD,SAAoED,EAAQe,UAAUC,sBAExF,uBACChB,EAAQiB,S,SAKAC,G,mFAAf,WAA6BC,EAAUC,GAAvC,mBAAAC,EAAA,6DACQC,EADR,UACiBH,EADjB,gBAEQI,EAASC,UAAS,IAAIC,MAAOC,UAAY,MAEzCC,EAAW,IAAIC,UACZC,OAAO,OAAQ,mBACxBF,EAASE,OAAO,SAAUN,EAAOO,YACjCH,EAASE,OAAO,WAAY,QAP9B,kBASSE,MAAMT,EAAK,CAChBU,OAAQ,OACRC,QAAS,CACPC,cAAed,GAEjBH,KAAMU,IACLQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WAfrB,4C,sBAkBA,IAAMC,GAAsB,SAAC,GAA6C,IAA3CpH,EAA0C,EAA1CA,KAAMqH,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,SAAU5H,EAAmB,EAAnBA,OAAQ6H,EAAW,EAAXA,KAC5D,EAAwB1H,mBAAS,IAAjC,mBAAO2H,EAAP,KAAaC,EAAb,KAQA,OACE,eAACC,EAAA,EAAD,CAAQ1H,KAAMA,EAAMoC,QAASiF,EAA7B,UACE,cAACM,EAAA,EAAD,+BAEA,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACE7G,GAAI,CAAEG,MAAO,IAAKqE,GAAI,GACtBsC,SAAU,SAACC,EAAGC,GAAJ,OAAUA,GAAKP,EAAQO,EAAE7F,KACnC8F,QAASX,EAAS7D,KAAI,SAAAuE,GAAC,MAAK,CAC1B1H,MAAM,GAAD,OAAK0H,EAAEzG,KAAP,aAAgByG,EAAEnG,WAAlB,KACLM,GAAI6F,EAAEE,YAERC,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuB9H,MAAM,eAI1D,eAACgI,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQ1H,QAASwG,EAAjB,oBACA,cAACkB,EAAA,EAAD,CAAQ1H,QAxBA,WACZ,IAAMoB,EAAG,UAAMuF,EAAN,4BACT9H,EAAO8I,mBAAmBjB,EAAKtF,IAAKA,EAAK,UACzCoF,KAqBI,wBAMOoB,GAtNC,SAAC,GAA+C,IAA7C/I,EAA4C,EAA5CA,OAAQ8H,EAAoC,EAApCA,KAAMvB,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,IAAKoB,EAAe,EAAfA,SAC9C,EAA8BzH,mBAAS,IAAvC,mBAAO6I,EAAP,KAAgBC,EAAhB,KACA,EAA8B9I,mBAAS,IAAvC,mBAAOiF,EAAP,KAAgB8D,EAAhB,KACA,EAAkD/I,oBAAS,GAA3D,mBAAOgJ,EAAP,KAA0BC,EAA1B,KACMC,EAAYC,iBAAO,MAEzB,EAAgDnJ,mBAAS,MAAzD,mBAAOoJ,EAAP,KAAyBC,EAAzB,KACMC,EAAelJ,QAAQgJ,GAEvBzJ,EAAW4J,yBAAa,kBAC5BhK,EAAGI,SAAS6J,MAAM,QAAQC,OAAO9B,EAAKvF,KAAKsH,GAAG,MAAMD,OAAO9B,EAAKvF,KAAKuH,OAAO,eAC9E,CAAChC,KAAU,GAELiC,EAAmBjK,EAASiE,KAAI,SAACqB,GACrC,IAAM0C,EAAOF,EAASoC,MAAK,SAAC1B,GAAD,OAAOlD,EAAQG,KAAKC,SAAS8C,EAAEE,YACpD3G,GAAW,OAAJiG,QAAI,IAAJA,OAAA,EAAAA,EAAMjG,OAAQuD,EAAQG,KAEnC,OAAO,2BAAKH,GAAZ,IAAqB0C,OAAMjG,YAGvBoI,EAAa,uCAAG,sBAAAxD,EAAA,0DAChBqB,EAAKxC,OADW,gCAGZtF,EAAO8I,mBAAmBhB,EAAKvF,IAAKvC,EAAOuC,IAAK,QAHpC,uBAIZvC,EAAOkK,UAAUpC,EAAKvF,KAJV,8CAMZvC,EAAOmK,iBAAiBrC,EAAKvF,KANjB,wBAOZvC,EAAOoK,YAAYtC,EAAKvF,KAPZ,4CAAH,qDAWb8H,EAAc,WAClB,GAAKjF,EAAL,CAIA,IAAMkF,EAAOxC,EAAKxC,OAAS,YAAc,OACzCtF,EAAOqK,YAAY,CAAEE,GAAIzC,EAAKvF,IAAK8D,KAAMjB,EAASkF,SAClDpB,EAAW,MAGPsB,EAAM,uCAAG,4BAAA/D,EAAA,sEACMH,GAAcC,EAAUC,GAD9B,QACPH,EADO,QAEJoE,MACPzK,EAAOqK,YAAY,CAAEE,GAAIzC,EAAKvF,IAAK8D,KAAMA,EAAKoE,KAAMH,KAAM,mBAH/C,2CAAH,qDAONI,EAAU,uCAAG,WAAOtJ,GAAP,eAAAqF,EAAA,sEACCzG,EAAO2K,eAAe7C,EAAKvF,KAD5B,OACXiF,EADW,OAGjByB,EAAWzB,EAAIoD,IAAIC,MAAM9G,KAAI,SAAC+G,GAAD,yBAAC,eACzBA,GADwB,IAE3BjJ,KAAI,UAAE+F,EAASoC,MAAK,SAAC1B,GAAD,OAAOwC,EAAEvI,IAAIiD,SAAS8C,EAAEE,mBAAxC,aAAE,EAAiD3G,WAGzD2H,EAAoBpI,EAAM2J,QART,2CAAH,sDAWVC,EAAgB,kBAAMxB,EAAoB,OAUhD,OAJAyB,qBAAU,WAAO,IAAD,EACd5B,EAAU6B,QAAQC,UAAlB,OAA8B9B,QAA9B,IAA8BA,GAA9B,UAA8BA,EAAW6B,eAAzC,aAA8B,EAAoBE,eACjD,CAACtL,IAGF,eAACuL,EAAA,EAAD,CAAO/J,GAAI,CAAEgK,SAAU,GAAvB,UACE,cAAC,GAAD,CACEtL,OAAQA,EACR6H,KAAMC,EACNxH,KAAM6I,EACNxB,MAAO,kBAAMyB,GAAqB,IAClCxB,SAAUA,IAGZ,eAACyD,EAAA,EAAD,CAAOE,UAAU,MAAMjK,GAAI,CAAEkK,GAAI,EAAGzG,WAAY,QAAS0G,WAAY,UAArE,UACE,6BAAK3D,EAAKjG,OAEV,cAACX,EAAA,EAAD,CAAYI,GAAI,CAAEC,GAAI,QAAUJ,QAAS8I,EAAzC,SACE,cAAC,KAAD,CAAY9F,SAAS,cAGtB2D,EAAKxC,QAAU,qCACd,cAACpE,EAAA,EAAD,CAAYC,QAASuJ,EAArB,SACE,cAAC,KAAD,CAAcvG,SAAS,cAGzB,eAAC3B,EAAA,EAAD,CACEC,GAAG,aACHrC,SAAUmJ,EACVjJ,KAAMmJ,EACN/G,QAASsI,EACTU,cAAe,CACb,kBAAmB,gBANvB,UASG1C,EAAQjF,KAAI,SAAC+G,GAAD,OACX,cAAClH,EAAA,EAAD,UAAuBkH,EAAEjJ,MAAViJ,EAAEvI,QAEnB,cAACuB,EAAA,EAAD,IACA,cAACF,EAAA,EAAD,CAAUzC,QA5CA,WAClB6J,IACA5B,GAAqB,IA0Cb,uBAIJ,cAAClI,EAAA,EAAD,CAAYC,QAASqJ,EAArB,SACE,cAAC,KAAD,CAAsBrG,SAAS,iBAInC,cAACkH,EAAA,EAAD,CAAO/J,GAAI,CAAEyD,WAAY,OAAQuG,SAAU,EAAGtJ,SAAU,OAAQwJ,GAAI,OAASG,IAAKtC,EAAlF,SACGU,EAAiBhG,KAAI,SAAA+G,GAAC,OAAI,cAAC,GAAD,CAAiB1F,QAAS0F,EAAG9K,OAAQA,EAAQsF,OAAQwC,EAAKxC,QAA/CwF,EAAErI,SAG1C,cAAC4I,EAAA,EAAD,CAAOE,UAAU,MAAMjK,GAAI,CAAEsE,EAAG,GAAhC,SACE,cAAC+C,EAAA,EAAD,CACEP,SAAU,SAACwD,GAAD,OAAO1C,EAAW0C,EAAEb,OAAOc,QACrCA,MAAOzG,EACP9D,GAAI,CAAEgK,SAAU,GAChBQ,YAAY,oBACZC,WAAY,SAACH,GAAD,MAAiB,UAAVA,EAAElL,KAAmB2J,KACxC2B,WAAY,CAAEC,aAAc,cAACpD,EAAA,EAAD,CAAQ1H,QAASkJ,EAAjB,2BCxHhC6B,GAAgB,SAAC,GAA0B,IAAxB5L,EAAuB,EAAvBA,KAAMqH,EAAiB,EAAjBA,MAAOwE,EAAU,EAAVA,IACpC,EAAgChM,mBAAS,IAAzC,mBAAOiM,EAAP,KAAiBC,EAAjB,KAOA,OACE,eAACrE,EAAA,EAAD,CAAQ1H,KAAMA,EAAMoC,QAASiF,EAA7B,UACE,cAACM,EAAA,EAAD,uBAEA,cAACC,EAAA,EAAD,UACE,cAACS,EAAA,EAAD,CACErH,GAAI,CAAEG,MAAO,IAAKqE,GAAI,GACtBsC,SAAU,SAACwD,GAAD,OAAOS,EAAYT,EAAEb,OAAOc,QACtCjL,MAAM,gBAIV,eAACgI,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQ1H,QAASwG,EAAjB,oBACA,cAACkB,EAAA,EAAD,CAAQ1H,QAnBA,WACZgL,EAAIC,GACJzE,KAiBI,wBAMF2E,GAAmB,SAAC,GAAoC,IAAlChM,EAAiC,EAAjCA,KAAMqH,EAA2B,EAA3BA,MAAOwE,EAAoB,EAApBA,IAAKvE,EAAe,EAAfA,SAC5C,EAAoCzH,mBAAS,IAA7C,mBAAOoM,EAAP,KAAmBC,EAAnB,KAOA,OACE,eAACxE,EAAA,EAAD,CAAQ1H,KAAMA,EAAMoC,QAASiF,EAA7B,UACE,cAACM,EAAA,EAAD,0BAEA,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACE7G,GAAI,CAAEG,MAAO,IAAKqE,GAAI,GACtBsC,SAAU,SAACC,EAAGC,GAAJ,OAAUA,GAAKkE,EAAclE,EAAE7F,KACzC8F,QAASX,EAAS7D,KAAI,SAAAuE,GAAC,MAAK,CAC1B1H,MAAO6L,GAAgBnE,GACvB7F,GAAI6F,EAAEE,YAERC,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuB9H,MAAM,eAI1D,eAACgI,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQ1H,QAASwG,EAAjB,oBACA,cAACkB,EAAA,EAAD,CAAQ1H,QAvBA,WACZgL,EAAII,GACJ5E,KAqBI,wBAOF8E,GAAkB,SAACnE,GAAD,gBAAUA,EAAEoE,eAAZ,YAA8BpE,EAAEqE,cAAhC,aAAkDrE,EAAEnG,WAApD,MAmIxB,SAASyK,GAAStE,GAAI,IAAD,MACnB,iBAAOA,EAAEzG,YAAT,iBAAO,EAAQgL,MAAM,YAArB,iBAAO,EAAoBC,MAAM,EAAG,UAApC,aAAO,EAAiC/I,KAAI,SAAAgJ,GAAC,OAAIA,EAAEC,OAAO,EAAG,MAGhDC,OArIA,SAAC,GAOT,IANLC,EAMI,EANJA,OACAlN,EAKI,EALJA,OACA4H,EAII,EAJJA,SACArB,EAGI,EAHJA,SACA4G,EAEI,EAFJA,mBACA3G,EACI,EADJA,IAEA,EAA4BrG,mBAAS,IAArC,mBAAOiN,EAAP,KAAeC,EAAf,KACA,EAA4BlN,mBAAS,MAArC,mBAAOmN,EAAP,KAAeC,EAAf,KACA,EAA4CpN,oBAAS,GAArD,mBAAOqN,EAAP,KAAuBC,EAAvB,KACA,EAAsCtN,oBAAS,GAA/C,mBAAOuN,EAAP,KAAoBC,EAApB,KAEA,EAAgCxN,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMuN,EAAcrN,QAAQH,GAMtByN,EAAe,WACnBxN,EAAY,OASRyN,EAAO,uCAAG,WAAOjM,GAAP,mBAAA4E,EAAA,6DACRgE,EAAOsD,OAAOC,aACdzL,EAFQ,UAECkI,EAFD,YAES0C,GAFT,SAGInN,EAAOiO,SAAS1L,GAHpB,OAGRiF,EAHQ,OAId0G,QAAQC,IAAI,gBAAiB3G,GAC7BxH,EAAOoO,cAAc7L,EAAK,CAAE8L,OAAQ,CAAE,CAAExM,KAAM,WAAYgK,MAAOhK,MALnD,2CAAH,sDASPyM,EAAiBpB,EAAOrK,QAAO,SAAA0L,GAAC,eACpC,UAAAA,EAAE1M,YAAF,eAAQ2M,cAAchJ,SAAS4H,EAAOoB,kBAAtC,UAAwDD,EAAEhM,WAA1D,aAAwD,EAAOiD,SAAS4H,OAEpEtN,EAAW,GAEX2O,EAAenB,GAAUxN,EAASwN,EAAO/K,KAC3CzC,EAASwN,EAAO/K,KAChB,GAEJ,OACE,qCACE,cAAC,GAAD,CACE4J,IA3Ba,SAAC1B,GAClB,IAAMlI,EAAG,UAAMkI,EAAN,YAAczK,EAAOsC,OAAOoM,QACrC1O,EAAO2O,UAAUpM,IA0BboF,MAAO,kBAAM8F,GAAkB,IAC/BnN,KAAMkN,EACN5F,SAAUA,IAGZ,cAAC,GAAD,CACEuE,IAAK2B,EACLnG,MAAO,kBAAMgG,GAAe,IAC5BrN,KAAMoN,IAGR,eAACkB,EAAA,EAAD,CAAOlJ,UAAU,wBAAwBpE,GAAI,CAAEG,MAAO,KAAtD,UACE,eAACgE,EAAA,EAAD,CAAKnE,GAAI,CAAEkK,GAAI,GAAf,UACE,eAACH,EAAA,EAAD,CAAOE,UAAU,MAAMjK,GAAI,CAAEmK,WAAY,UAAzC,UACE,0CAEA,cAACvK,EAAA,EAAD,CAAYI,GAAI,CAAEC,GAAI,QAAUJ,QApDtB,SAACC,GACnBf,EAAYe,EAAMC,gBAmDV,SACE,cAAC,KAAD,CAAS8C,SAAS,cAGpB,eAAC3B,EAAA,EAAD,CACEC,GAAG,aACHrC,SAAUA,EACVE,KAAMsN,EACNlL,QAASmL,EACTnC,cAAe,CACb,kBAAmB,gBANvB,UASE,cAAC9H,EAAA,EAAD,CAAUzC,QAAS,WAAQ0M,IAAgBJ,GAAkB,IAA7D,yBACA,cAAC7J,EAAA,EAAD,CAAUzC,QAAS,WAAQ0M,IAAgBF,GAAe,IAA1D,4BAIJ,cAAChF,EAAA,EAAD,CACE2B,KAAK,SACL1J,MAAM,SACNiO,QAAQ,SACRC,KAAK,QACLC,WAAS,EACT3G,SAAU,SAACwD,GAAD,OAAOyB,EAAUzB,EAAEb,OAAOc,aAIxC,cAACjH,EAAA,EAAD,CAAMc,UAAU,cAAhB,SACG4I,EAAevK,KAAI,SAACuE,GAAD,aAClB,cAACvH,EAAA,EAAD,CAAsBC,gBAAc,EAApC,SACE,eAACkE,EAAA,EAAD,CAAgB/D,QAAS,kBAAMoM,EAAUjF,IAAzC,UACE,cAAC0G,EAAA,EAAD,UACE,cAACxN,EAAA,EAAD,UACG8G,EAAEhD,OACC,cAAC,KAAD,IACAsH,GAAStE,OAIjB,cAAC3G,EAAA,EAAD,CACEC,QAAS0G,EAAEzG,KACXC,uBAAwB,CAAEC,aAAc,WAAYC,SAAU,SAAUC,WAAY,UACpFC,UAAS,UAAEoG,EAAER,YAAJ,aAAE,EAAQ3F,WACnBC,yBAA0B,CAAEL,aAAc,WAAYC,SAAU,SAAUC,WAAY,UACtFI,MAAOiG,EAAE/F,UAfA+F,EAAE/F,aAuBvB,cAACqM,EAAA,EAAD,CAAOlJ,UAAU,gBAAjB,SACG4H,GAAU,cAAC,GAAD,CAAS1F,SAAUA,EAAU5H,OAAQA,EAAQ8H,KAAMwF,EAAQxN,SAAU2O,EAAclI,SAAUA,EAAUC,IAAKA,UC9G/H,SAASoG,GAAStE,GAAI,IAAD,MACnB,iBAAOA,EAAEzG,YAAT,iBAAO,EAAQgL,MAAM,YAArB,iBAAO,EAAoBC,MAAM,EAAG,UAApC,aAAO,EAAiC/I,KAAI,SAAAgJ,GAAC,OAAIA,EAAEC,OAAO,EAAG,MAGhDiC,OAjFE,SAAC,GAAiD,IAA/CjP,EAA8C,EAA9CA,OAAQ4H,EAAsC,EAAtCA,SAAUsF,EAA4B,EAA5BA,OAAQ1G,EAAoB,EAApBA,IAAKD,EAAe,EAAfA,SACjD,EAA4BpG,mBAAS,IAArC,mBAAOiN,EAAP,KAAeC,EAAf,KACA,EAA4BlN,mBAAS,MAArC,mBAAOmN,EAAP,KAAeC,EAAf,KAGM2B,EAAMxF,yBAAa,kBAAMhK,EAAGI,SAASqP,QAAQ,MAAMC,iBAAiB,GACpEC,EAAQ3F,yBAAa,kBAAMhK,EAAGI,SAASqP,QAAQ,QAAQC,iBAAiB,GACxEE,EAAOJ,EAAIK,OAAOF,GAAOxM,QAAO,SAAC2M,EAAGxK,EAAGyB,GAAP,OAAaA,EAAEgJ,QAAQD,KAAOxK,KAE9D6F,EAAK,OAAGyE,QAAH,IAAGA,OAAH,EAAGA,EAAMvL,KAAI,SAAAxB,GAAQ,IAAD,EACvBuF,EAAOF,EAASoC,MAAK,SAAC1B,GAAD,OAAO/F,EAAIiD,SAAS8C,EAAEE,YAC3C3G,GAAW,OAAJiG,QAAI,IAAJA,OAAA,EAAAA,EAAMjG,QAAN,UACRqL,EAAOlD,MAAK,SAACuE,GAAD,OAAOA,EAAEhM,MAAQA,YADrB,aACR,EAAmCV,OACnCU,EAEL,MAAO,CAAEA,MAAKuF,OAAMjG,WAGhB6N,EAAa,OAAG7E,QAAH,IAAGA,OAAH,EAAGA,EAAOhI,QAAO,SAACyF,GAAO,IAAD,UACnCtE,EAAIoJ,EAAOoB,cACjB,OAAO,UAAAlG,EAAEzG,YAAF,eAAQ2M,cAAchJ,SAASxB,KACjCA,EAAEwB,SAAF,UAAW8C,EAAEzG,YAAb,aAAW,EAAQ2M,iBADjB,UAEFlG,EAAER,YAFA,iBAEF,EAAQ3F,kBAFN,aAEF,EAAoBqD,SAASxB,KAC7BA,EAAEwB,SAAF,UAAW8C,EAAER,YAAb,aAAW,EAAQ3F,eAG1B,OACE,qCACE,eAACyM,EAAA,EAAD,CAAOlJ,UAAU,wBAAwBpE,GAAI,CAAEG,MAAO,KAAtD,UACE,eAACgE,EAAA,EAAD,CAAKnE,GAAI,CAAEkK,GAAI,GAAf,UACE,cAACH,EAAA,EAAD,CAAOE,UAAU,MAAMjK,GAAI,CAAEmK,WAAY,UAAzC,SACE,wCAGF,cAAC9C,EAAA,EAAD,CACE2B,KAAK,SACL1J,MAAM,SACNiO,QAAQ,SACRC,KAAK,QACLC,WAAS,EACT3G,SAAU,SAACwD,GAAD,OAAOyB,EAAUzB,EAAEb,OAAOc,aAIxC,cAACjH,EAAA,EAAD,CAAMc,UAAU,cAAhB,SACGgK,EAAc3L,KAAI,SAACuE,GAAD,aACjB,cAACvH,EAAA,EAAD,CAAsBC,gBAAc,EAApC,SACE,eAACkE,EAAA,EAAD,CAAgB/D,QAAS,kBAAMoM,EAAUjF,IAAzC,UACE,cAAC0G,EAAA,EAAD,UACE,cAACxN,EAAA,EAAD,UACG8G,EAAEhD,OACC,cAAC,KAAD,IACAsH,GAAStE,OAIjB,cAAC3G,EAAA,EAAD,CACEC,QAAS0G,EAAEzG,KACXC,uBAAwB,CAAEC,aAAc,WAAYC,SAAU,SAAUC,WAAY,UACpFC,UAAS,UAAEoG,EAAER,YAAJ,aAAE,EAAQ3F,WACnBC,yBAA0B,CAAEL,aAAc,WAAYC,SAAU,SAAUC,WAAY,UACtFI,MAAOiG,EAAE/F,UAfA+F,EAAE/F,aAuBvB,cAACqM,EAAA,EAAD,CAAOlJ,UAAU,gBAAjB,SACG4H,GAAU,cAAC,GAAD,CAAS1F,SAAUA,EAAU5H,OAAQA,EAAQ8H,KAAMwF,EAAQ/G,SAAUA,EAAUC,IAAKA,UC7EvGmJ,OAAOjQ,GAAKA,EAEZ,IAAM6G,GAAW,kCAKXqJ,GAAWC,aAAaC,QAAQ,kBAAoB/B,OAAOC,aACjE6B,aAAaE,QAAQ,gBAAiBH,IAEtC,IAAMI,GAAQ,uCAAG,WAAOzN,EAAK0N,EAAUC,GAAtB,SAAAzJ,EAAA,+EACf0J,IAAkB,CAChB5N,MACA0N,WACAL,YACAQ,WAAY,CACVC,UAAU,GAAD,OAbE,MAaF,cAAmBH,EAAnB,YAZF,OAYE,YAXE,eAKA,2CAAH,0DAwVRI,GAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,UAA5B,OACtBD,EAAQ5N,QAAO,SAACiI,GAAD,OAAQ4F,EAAU5F,EAAErI,OAAKsB,KAAI,SAAC+G,GAAD,OAC1C,eAAC9C,EAAA,EAAD,CAAmB1H,MAAM,EAAzB,UACE,cAAC2H,EAAA,EAAD,6BACA,eAACC,EAAA,EAAD,WACE,4CAAe4C,EAAErI,MACjB,uCAAUqI,EAAEvF,QACZ,6CAAgBuF,EAAEzE,WAEpB,eAACuC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQlI,MAAM,QAAQQ,QAAS,kBAAMqP,EAAO1F,IAA5C,oBACA,cAACjC,EAAA,EAAD,CAAQ1H,QAAS,kBAAMoP,EAAOzF,IAA9B,yBATSA,EAAErI,QAcbkO,GAAW,uCAAG,WAAOnK,GAAP,eAAAC,EAAA,sEACAU,MAAM,GAAD,OAAIZ,GAAJ,aAAyB,CAAEc,QAAS,CAAEC,cAAed,KAD1D,cACZgB,EADY,yBAEXA,EAAIoJ,GAAKpJ,EAAIC,OAAS,IAFX,2CAAH,sDAKjB,SAASoJ,GAAa/I,GACpB,OAAW,OAAJA,QAAI,IAAJA,KAAMjG,KACXiG,EAAKjG,KACC,OAAJiG,QAAI,IAAJA,KAAMgJ,iBACJhJ,EAAKgJ,iBACD,OAAJhJ,QAAI,IAAJA,KAAM4E,eAAN,UACK5E,EAAK4E,eADV,YAC4B5E,EAAK6E,eAC/B,Y,SAaKoE,G,iFAAf,yCAAAtK,EAAA,6DAAgCzG,EAAhC,EAAgCA,OAAQgR,EAAxC,EAAwCA,MAAOC,EAA/C,EAA+CA,MACvCC,EAASD,EAAQ,CAAEA,SAAU,GADrC,SAE+CjR,EAAOmR,cAAc,CAAEH,QAAOE,WAF7E,gBAEUE,EAFV,EAEUA,SAAoBC,EAF9B,EAEoBH,OAAUG,KAEvBD,GACHL,GAAe,CAAE/Q,SAAQiR,MAAOI,IALpC,4C,sBASeC,OAhYH,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,WAAYzJ,EAAW,EAAXA,KACzB,EAA4B3H,mBAAS,MAArC,mBAAOH,EAAP,KAAewR,EAAf,KACA,EAAsBrR,mBAAS,IAA/B,mBAAOqG,EAAP,KAAYiL,EAAZ,KACA,EAA4BtR,mBAAS,IAArC,mBAAO+M,EAAP,KAAewE,EAAf,KACA,EAAgCvR,mBAAS,IAAzC,mBAAOwR,EAAP,KAAiBC,EAAjB,KACA,EAA8CzR,mBAAS,IAAvD,mBAAO0R,EAAP,KAAwBC,EAAxB,KACA,EAA8C3R,mBAAS,IAAvD,mBAAO4R,EAAP,KAAwBC,EAAxB,KACA,EAAgC7R,mBAAS,IAAzC,mBAAOyH,EAAP,KAAiBqK,EAAjB,KACA,EAAsB9R,mBAAS,YAA/B,mBAAOwE,EAAP,KAAYD,EAAZ,KACA,EAAkCvE,oBAAS,GAA3C,mBAAO+R,EAAP,KAAkBC,EAAlB,KACA,EAAiBhS,mBAAS,uBAE1B,GAFA,oBAE0C0M,MAAM,eAAhD,mBAAOuF,GAAP,MAAwBC,GAAxB,8BACMC,GAAY,UAAMF,GAAN,gBAAyBC,IACrCE,GAAW,mBAAeD,IAE1BE,GAAM,uCAAG,sCAAA/L,EAAA,0DACTzG,EADS,oDAKT6P,aAAaC,QAAQ,cAAgBhI,EAAK2K,SALjC,gCAML/S,EAAGI,SAAS4S,QANP,cAQb7C,aAAaE,QAAQ,WAAYjI,EAAK2K,UARzB,SAWgBE,EAAY7K,EAA/B8K,kBACFpM,EAAMmM,EAAQE,QAAQC,SAC5BrB,EAAOjL,GACDjE,EAdK,UAcIuF,EAAK2K,SAdT,YAcqBH,IAdrB,UAeQtC,GAASzN,EAAKiE,EAAK8L,IAf3B,eAeLS,EAfK,OAiBXvB,EAAUuB,GACVZ,GAAa,GAlBF,UAoBgBxB,GAAYnK,GApB5B,QAoBLwM,EApBK,OAqBLC,EAAgBD,EAAajP,KAAI,SAACuE,GAAD,mBAAC,eAAYA,GAAb,IAAgBzG,KAAMgP,GAAavI,QAC1E2J,EAAYgB,GAEZtD,OAAO3P,OAAS+S,EAEhBA,EAAKG,GAAG,kBAAR,sBAA2B,8BAAAzM,EAAA,6DACzBsM,EAAK7O,eACL6O,EAAKI,kBACLJ,EAAKK,gBAHoB,SAKHL,EAAKM,YALF,cAKnBnG,EALmB,OAKe9I,MACxCsN,EAAUxE,GANe,SASCxN,EAAGI,SAASqP,QAAQ,aAAakC,OATlC,OASnBiC,EATmB,OAUzBvC,GAAe,CAAE/Q,OAAQ+S,EAAM/B,MAAK,OAAEsC,QAAF,IAAEA,OAAF,EAAEA,EAAanN,YAV1B,6CAa3B4M,EAAKG,GAAG,WAAW,SAAC9N,GAClB,GAAqB,mBAAjBA,EAAQkF,KACVwH,GAAmB,SAACyB,GAAD,4BAAcA,GAAd,CAAoBnO,YAClC,GAAqB,SAAjBA,EAAQkF,KAAiB,CAClC,MAAelF,EAAQG,KAAKsH,MAAM,KAA3BtH,EAAP,oBAEA7F,EAAGI,SAAS0T,IAAI,CACd/Q,GAAI2C,EAAQ3C,GACZ8C,OACAgF,GAAInF,EAAQmF,GACZlE,KAAMjB,EAAQiB,KACdiE,KAAMlF,EAAQkF,KACdmJ,MAAO,KACPtN,UAAW,IAAIU,MACdzB,EAAQ3C,SACN,GAAqB,cAAjB2C,EAAQkF,KAAsB,CACvC,MAAqBlF,EAAQG,KAAKsH,MAAM,KAAxC,mBAAOhF,EAAP,KAAaC,EAAb,KACAoG,QAAQC,IAAI,kBAAmBtG,EAAMC,OAIzCiL,EAAKG,GAAG,gBAAgB,SAAC9N,GACF,mBAAjBA,EAAQkF,OAEgB,SAAjBlF,EAAQkF,KACjB5K,EAAGI,SAAS0T,IAAI,CACd/Q,GAAI2C,EAAQ3C,GACZ8C,KAAMwN,EAAKzQ,OAAOC,IAClBgI,GAAInF,EAAQmF,GACZlE,KAAMjB,EAAQiB,KACdiE,KAAMlF,EAAQkF,KACdmJ,MAAO,KACPtN,UAAW,IAAIU,MACdzB,EAAQ3C,IACF2C,EAAQkF,SAKrByI,EAAKG,GAAG,YAAY,SAACQ,GAAS,IAAD,UAErBtO,EAAO,UAAGsO,EAAIC,eAAP,iBAAG,EAAaC,YAAhB,aAAG,EAAmBxO,QAC7Be,EAAS,UAAGuN,EAAIC,eAAP,iBAAG,EAAaC,YAAhB,iBAAG,EAAmBC,aAAtB,aAAG,EAA0B1N,UAC5C,GAAqB,SAAjBf,EAAQkF,KAAiB,CAC3B,IAAQC,EAAOnF,EAAPmF,GACR,EAAenF,EAAQG,KAAKsH,MAAM,KAA3BtH,EAAP,oBAEA,KADmB,OAAFgF,QAAE,IAAFA,KAAI/E,SAASuN,EAAKzQ,OAAOC,KAAOgD,EAAOgF,GAGtD,YADA2D,QAAQC,IAAI,eAAgB/I,GAI9B1F,EAAGI,SAAS0T,IAAI,CACd/Q,GAAI2C,EAAQ3C,GACZ8C,OACAgF,GAAInF,EAAQmF,GACZlE,KAAMjB,EAAQiB,KACdiE,KAAMlF,EAAQkF,KACdmJ,MAAO,KACPtN,aACCf,EAAQ3C,QAIfsQ,EAAKG,GAAG,aAAa,SAACY,GACpBf,EAAKgB,mBAAmBD,EAAKvO,MAC7BwN,EAAKpE,UAAUmF,EAAKvO,SAGtBwN,EAAKG,GAAG,eAAe,eAIvBH,EAAKG,GAAG,gBAAR,uCAAyB,WAAOY,GAAP,SAAArN,EAAA,6DACvBqN,EAAK5G,OAAO9I,MAAM4P,SAAQ,SAACzF,GACzBwE,EAAK5B,cAAc,CAAE8C,KAAM1F,EAAEhM,IAAK2O,OAAQ,CAAEgD,OAAQ,SAF/B,KAKvBxC,EALuB,SAKNqB,EAAKM,YALC,mBAKYjP,OALZ,yDAAzB,uDASA2O,EAAKG,GAAG,cAAc,SAACY,GACrB9T,EAAOiO,SAAS6F,EAAKjM,SAIvBkL,EAAKG,GAAG,gBAAR,sBAAyB,sBAAAzM,EAAA,kEACvBiL,EADuB,SACNqB,EAAKM,YADC,0BACYjP,MADZ,8EAKzB2O,EAAKG,GAAG,kBAAR,sBAA2B,sBAAAzM,EAAA,kEACzBiL,EADyB,SACRqB,EAAKM,YADG,0BACUjP,MADV,8EAI3B2O,EAAKG,GAAG,YAAY,SAACY,GACnBlC,GAAY,SAAC2B,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBO,EAAKvO,KAAOuO,UAUjDf,EAAKG,GAAG,IAAR,uCAAa,WAAO5I,EAAMwJ,GAAb,SAAArN,EAAA,sDACXyH,QAAQC,IAAI7D,EAAMwJ,GADP,2CAAb,yDAKAf,EAAKG,GAAG,gBAAgB,WACtBhF,QAAQC,IAAI,gBACZgE,GAAa,MAIfY,EAAKG,GAAG,aAAa,WACnBf,GAAa,MAGfY,EAAKoB,UAjKM,kDAmKXjG,QAAQkG,MAAM,SAAd,MAnKW,0DAAH,qDAuKZnJ,oBAAUuH,GAAQ,CAAC1K,IAGnB,IAAMuM,GAAiBnH,EAAOnJ,KAAI,SAAAwK,GAAM,IAAD,IAC/BzG,EAAOF,EAASoC,MAAK,SAAA1B,GAAC,OAAIiG,EAAEhM,IAAIiD,SAAS8C,EAAEE,YAC3C3G,EAAO0M,EAAE1M,KACX0M,EAAE1M,KACFiG,EACE+I,GAAa/I,GACbyG,EAAEhM,IAGF+R,EAAYC,OAAOC,OAAO7C,GAC7B9O,QAAO,SAAC+C,GAAD,OAAOA,EAAEL,KAAKC,SAAS+I,EAAEhM,QAChCwB,KAAI,SAACuE,GAAD,uBAAOA,EAAE/C,KAAKsH,MAAM,YAApB,aAAO,EAAoB,MAElC,OAAO,2BACF0B,GADL,IAEEzG,OACAjG,OACAyS,YACAhP,SAAS,UAACiJ,EAAEkG,cAAH,iBAAC,EAAW,UAAZ,QAAC,EAAejP,SAAS,aAItC0I,QAAQC,IAAI,oBAAqBwD,GACjCzD,QAAQC,IAAI,kBAAmBkG,IAG/B,IAAMpU,GAAK2H,EAASoC,MAAK,SAAC1B,GAAD,OAAOtI,EAAOuC,IAAImS,MAAMpM,EAAEE,aAAa,GAE1DmM,GAAS,uCAAG,sBAAAlO,EAAA,sDAChByH,QAAQC,IAAI,gBAEZnO,EAAOmU,UAHS,2CAAH,qDAMTjU,GAAO,uCAAG,sBAAAuG,EAAA,sDACdzG,EAAO4U,aACPzC,GAAa,GACbT,EAAU,IACVE,EAAY,IACZlS,EAAGI,SAAS4S,QACZnB,IANc,2CAAH,qDA8Db,OAAKvR,EAOH,sBAAK0F,UAAU,MAAf,UACE,cAAC,EAAD,CAASf,IAAKA,EAAKD,OAAQA,EAAQxE,QAASA,GAASF,OAAQA,EAAQC,GAAIA,KAEzE,cAAC4U,EAAA,EAAD,CACE1T,QAASwT,GACTrU,MAAO4R,EACPvO,aAAc,CAAEF,WAAY,SAAUC,SAAU,UAChDpC,GAAI,CAAEwT,OAAQ,WAJhB,SAME,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAQ1T,GAAI,CAAEG,MAAO,QAArC,qDAGF,cAAC,GAAD,CACE8O,OAzEe,SAACnL,GACpB4M,GAAmB,SAACuB,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBnO,EAAQ3C,GAAK,cACvDzC,EAAOqK,YAAY,CAAEE,GAAInF,EAAQG,KAAMc,KAAMjB,EAAQ3C,GAAI6H,KAAM,2BAwE3DkG,OArEe,SAACpL,GACpB4M,GAAmB,SAACuB,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBnO,EAAQ3C,GAAK,cACvDzC,EAAOqK,YAAY,CAAEE,GAAInF,EAAQG,KAAMc,KAAMjB,EAAQ3C,GAAI6H,KAAM,2BAoE3DmG,QAASoB,EACTnB,UAAWqB,IAEb,cAACtM,EAAA,EAAD,CAAKC,UAAU,OAAf,SACW,aAARf,EACG,cAAC,GAAD,CACAuI,OAAQmH,GAERzM,SAAUA,EACV5H,OAAQA,EACRuG,SAAUA,GACV4G,mBAAoBoF,GACpB/L,IAAKA,IAEG,aAAR7B,EACE,cAAC,GAAD,CACAuI,OAAQmH,GAERzM,SAAUA,EACV5H,OAAQA,EACRuG,SAAUA,GACV4G,mBAAoBoF,GACpB/L,IAAKA,IAEL,UA5CR,qBAAKd,UAAU,MAAf,sB,oCCtTNuP,WAAQC,UAAU,CAChBC,KAAM,CACJC,OANW,YAOXC,WANiB,sBAOjBC,oBAN4B,gCAUhCC,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAACC,GAAA,EAAD,IAEA,cAACC,GAAA,EAAD,UACG,gBAAGzV,EAAH,EAAGA,QAAS4H,EAAZ,EAAYA,KAAZ,OACC,cAAC,GAAD,CAAKyJ,WAAYrR,EAAS4H,KAAMA,UAItC8N,SAASC,eAAe,W","file":"static/js/main.572071bb.chunk.js","sourcesContent":["import Dexie from 'dexie';\n\nconst db = new Dexie('visionable-xmpp-test-app');\n\ndb.version(1).stores({\n  messages: '++id, group, from, to, body, type, timestamp',\n});\n\nexport default db;\n","import { useState } from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport Settings from '@mui/icons-material/Settings';\nimport Logout from '@mui/icons-material/Logout';\nimport Circle from '@mui/icons-material/Circle';\n\nconst Profile = ({ client, me, signOut }) => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const setStatus = (status) => {\n    client.sendPresence({ status });\n  };\n\n  const statusList = [\n    {\n      key: \"available\",\n      color: \"#53b397\",\n      label: \"Available\",\n      icon: Circle,\n    },\n    {\n      key: \"in-meeting\",\n      color: \"#ea3323\",\n      label: \"In a meeting\",\n      icon: Circle,\n    },\n    {\n      key: \"away\",\n      color: \"#f0a73e\",\n      label: \"Away\",\n      icon: Circle,\n    },\n  ]\n\n  return (\n    <>\n      <ListItem disablePadding>\n        <ListItemIcon>\n          <IconButton onClick={handleClick} sx={{ ml: 0.5 }}>\n            <Avatar sx={{ width: 32, height: 32 }}>M</Avatar>\n          </IconButton>\n        </ListItemIcon>\n\n        <ListItemText\n          primary={me.name}\n          primaryTypographyProps={{ color: \"white\", textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n          secondary={me.user_email}\n          secondaryTypographyProps={{ color: \"white\", textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n          title={client.config.jid}\n        />\n      </ListItem>\n\n      <Menu\n        anchorEl={anchorEl}\n        id=\"account-menu\"\n        open={open}\n        onClose={handleClose}\n        onClick={handleClose}\n        PaperProps={{\n          elevation: 0,\n          sx: {\n            overflow: 'visible',\n            filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))',\n            mt: 1.5,\n            '& .MuiAvatar-root': {\n              width: 32,\n              height: 32,\n              ml: -0.5,\n              mr: 1,\n            },\n            '&:before': {\n              content: '\"\"',\n              display: 'block',\n              position: 'absolute',\n              top: 0,\n              right: 14,\n              width: 10,\n              height: 10,\n              bgcolor: 'background.paper',\n              transform: 'translateY(-50%) rotate(45deg)',\n              zIndex: 0,\n            },\n          },\n        }}\n        transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n      >\n        <MenuItem disabled>\n          <Avatar /> Profile\n        </MenuItem>\n\n        <Divider />\n\n        {statusList.map((s) => (\n          <MenuItem key={s.key} onClick={() => setStatus(s.key)}>\n            <ListItemIcon>\n              <Circle fontSize=\"small\" sx={{ color: s.color }} />\n            </ListItemIcon>\n\n            <ListItemText primary={s.label} />\n          </MenuItem>\n        ))}\n\n        <Divider />\n\n        <MenuItem disabled>\n          <ListItemIcon>\n            <Settings fontSize=\"small\" />\n          </ListItemIcon>\n          Settings\n        </MenuItem>\n\n        <MenuItem onClick={signOut}>\n          <ListItemIcon>\n            <Logout fontSize=\"small\" />\n          </ListItemIcon>\n          Logout\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\n\nexport default Profile;\n","import {\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n} from \"@mui/material\";\n\nimport {\n  Contacts as ContactsIcon,\n  Chat as ChatIcon,\n} from \"@mui/icons-material\";\n\nimport Profile from './profile';\n\nconst items = [\n  {\n    route: \"contacts\",\n    label: \"Contacts\",\n    iconComponent: ContactsIcon,\n  },\n  {\n    route: \"messages\",\n    label: \"Messages\",\n    iconComponent: ChatIcon,\n  },\n]\n\nconst SideBar = ({ client, me, setNav, nav, signOut }) => (\n  <List sx={{\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"200px\",\n    minWidth: \"200px\",\n    background: \"#091c38\",\n    color: \"white\"\n  }}>\n    <Profile client={client} me={me} signOut={signOut} />\n\n    {items.map(i => {\n      const IconComponent = i.iconComponent;\n\n      return (\n        <ListItem key={i.route} disablePadding sx={{ background: nav === i.route ? 'rgba(255,255,255,0.1)' : 'transparent' }}>\n          <ListItemButton onClick={() => setNav(i.route)}>\n            <ListItemIcon>\n              <IconComponent sx={{ color: \"white\" }} />\n            </ListItemIcon>\n\n            <ListItemText>\n              {i.label}\n            </ListItemText>\n          </ListItemButton>\n        </ListItem>\n      )})}\n\n    {/* <ListItem disablePadding sx={{ mt: \"auto\" }}> */}\n    {/*   <ListItemButton onClick={signOut}> */}\n    {/*     <ListItemIcon> */}\n    {/*       <LogoutIcon sx={{ color: \"white\" }} /> */}\n    {/*     </ListItemIcon> */}\n\n    {/*     <ListItemText> */}\n    {/*       Log Out */}\n    {/*     </ListItemText> */}\n    {/*   </ListItemButton> */}\n    {/* </ListItem> */}\n  </List>\n);\n\nexport default SideBar;\n","import {\n  Box,\n  Button,\n  Stack,\n  TextField,\n  IconButton,\n  Autocomplete,\n  Menu,\n  MenuItem,\n  Divider,\n} from \"@mui/material\";\nimport { useState, useEffect, useRef } from \"react\";\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport GroupAddIcon from '@mui/icons-material/GroupAdd';\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport VideoCameraFrontIcon from '@mui/icons-material/VideoCameraFront';\nimport { blue } from \"@mui/material/colors\";\n\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport db from './db';\n\nconst Message = ({ client, user, API_BASE, jwt, allUsers }) => {\n  const [members, setMembers] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [showAddUserToRoom, setShowAddUserToRoom] = useState(false);\n  const scrollRef = useRef(null);\n\n  const [roomListAnchorEl, setRoomListAnchorEl] = useState(null);\n  const showRoomList = Boolean(roomListAnchorEl);\n\n  const messages = useLiveQuery(() => \n    db.messages.where(\"from\").equals(user.jid).or(\"to\").equals(user.jid).sortBy(\"timestamp\"),\n  [user]) || [];\n\n  const extendedMessages = messages.map((message) => { // add user info\n    const user = allUsers.find((u) => message.from.includes(u.user_id));\n    const name = user?.name || message.from;\n\n    return { ...message, user, name };\n  });\n\n  const removeContact = async () => {\n    if (user.isRoom) {\n      // TODO: bare jid\n      await client.setRoomAffiliation(user.jid, client.jid, \"none\");\n      await client.leaveRoom(user.jid);\n    } else {\n      await client.removeRosterItem(user.jid);\n      await client.unsubscribe(user.jid);\n    }\n  };\n\n  const sendMessage = () => {\n    if (!message) {\n      return;\n    }\n\n    const type = user.isRoom ? 'groupchat' : 'chat';\n    client.sendMessage({ to: user.jid, body: message, type });\n    setMessage(\"\");\n  };\n\n  const invite = async () => {\n    const body = await createMeeting(API_BASE, jwt);\n    if (body.uuid) {\n      client.sendMessage({ to: user.jid, body: body.uuid, type: 'meeting-invite' });\n    }\n  };\n\n  const memberList = async (event) => {\n    const res = await client.getRoomMembers(user.jid);\n\n    setMembers(res.muc.users.map((m) => ({\n      ...m,\n      name: allUsers.find((u) => m.jid.includes(u.user_id))?.name,\n    })));\n\n    setRoomListAnchorEl(event.target);\n  };\n\n  const closeRoomList = () => setRoomListAnchorEl(null);\n  const openAddUser = () => {\n    closeRoomList();\n    setShowAddUserToRoom(true);\n  }\n\n  useEffect(() => {\n    scrollRef.current.scrollTop = scrollRef?.current?.scrollHeight;\n  }, [messages]);\n\n  return (\n    <Stack sx={{ flexGrow: 1 }}>\n      <AddUserToRoomPrompt\n        client={client}\n        room={user}\n        open={showAddUserToRoom}\n        close={() => setShowAddUserToRoom(false) }\n        allUsers={allUsers}\n      />\n\n      <Stack direction=\"row\" sx={{ px: 2, background: \"white\", alignItems: \"center\" }}>\n        <h2>{user.name}</h2>\n\n        <IconButton sx={{ ml: \"auto\" }} onClick={removeContact}>\n          <DeleteIcon fontSize=\"inherit\" />\n        </IconButton>\n\n        {user.isRoom && <>\n          <IconButton onClick={memberList}>\n            <GroupAddIcon fontSize=\"inherit\" />\n          </IconButton>\n\n          <Menu\n            id=\"basic-menu\"\n            anchorEl={roomListAnchorEl}\n            open={showRoomList}\n            onClose={closeRoomList}\n            MenuListProps={{\n              'aria-labelledby': 'basic-button',\n            }}\n          >\n            {members.map((m) => (\n              <MenuItem key={m.jid}>{m.name}</MenuItem>\n            ))}\n            <Divider />\n            <MenuItem onClick={openAddUser}>Add</MenuItem>\n          </Menu>\n        </>}\n\n        <IconButton onClick={invite}>\n          <VideoCameraFrontIcon fontSize=\"inherit\" />\n        </IconButton>\n      </Stack>\n\n      <Stack sx={{ background: \"#eee\", flexGrow: 1, overflow: \"auto\", px: \"10%\" }} ref={scrollRef}>\n        {extendedMessages.map(m => <Chat key={m.id} message={m} client={client} isRoom={user.isRoom} />)}\n      </Stack>\n\n      <Stack direction=\"row\" sx={{ p: 1 }}>\n        <TextField\n          onChange={(e) => setMessage(e.target.value)}\n          value={message}\n          sx={{ flexGrow: 1 }}\n          placeholder=\"Send a message...\"\n          onKeyPress={(e) => e.key === 'Enter' && sendMessage() }\n          InputProps={{ endAdornment: <Button onClick={sendMessage}>Send</Button> }}\n        />\n\n        {/* <Button variant=\"primary\" onClick={sendMessage}>Send</Button> */}\n      </Stack>\n    </Stack>\n  );\n};\n\nconst Chat = ({ message, client, isRoom }) => {\n  const mine = !message.from || message.from.includes(client.config.jid);\n\n  // if we're in a room, grab the user's jid from the `from` field\n  // if it's a direct chat, grab just the bare JID\n  // const jid = message.from?.split(\"/\")[isRoom ? 1 : 0];\n\n  return (\n    <Box\n      className={`chat-message ${mine ? \"mine\" : \"\"}`}\n      sx={{\n        background: mine ? blue[700] : \"white\",\n        color: mine ? \"white\" : \"black\",\n        p: 1.5,\n        mx: 2, my: 1,\n        borderRadius: 2,\n        marginLeft: mine ? \"auto\" : 0,\n        marginRight: mine ? 0 : \"auto\",\n      }}\n    >\n      <span style={{ fontSize: \"0.8em\" }}>\n        <b>{message.name}</b>\n        <span style={{ marginLeft: \"1em\", color: mine ? \"#eee\" : \"#666\" }}>{message.timestamp.toLocaleString()}</span>\n      </span>\n      <br />\n      {message.body}\n    </Box>\n  );\n}\n\nasync function createMeeting(API_BASE, jwt) {\n  const url = `${API_BASE}/api/meeting`;\n  const mstart = parseInt(new Date().getTime() / 1000);\n\n  const formData = new FormData();\n  formData.append(\"name\", \"Instant Meeting\");\n  formData.append(\"mstart\", mstart.toString());\n  formData.append(\"duration\", \"3600\");\n\n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: jwt,\n    },\n    body: formData,\n  }).then(res => res.json());\n};\n\nconst AddUserToRoomPrompt = ({ open, close, allUsers, client, room }) => {\n  const [user, setUser] = useState(\"\");\n\n  const onAdd = () => {\n    const jid = `${user}@saas-msg.visionable.one`; // TODO: use constant\n    client.setRoomAffiliation(room.jid, jid, \"member\")\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add User to Room</DialogTitle>\n\n      <DialogContent>\n        <Autocomplete\n          sx={{ width: 400, my: 1 }}\n          onChange={(_, u) => u && setUser(u.id)}\n          options={allUsers.map(u => ({\n            label: `${u.name} (${u.user_email})`,\n            id: u.user_id,\n          }))}\n          renderInput={(params) => <TextField {...params} label=\"User\" />}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default Message;\n","import { useState } from \"react\";\n\nimport {\n  Box,\n  Button,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemButton,\n  Avatar,\n  ListItemText,\n  TextField,\n  Paper,\n  Stack,\n  Autocomplete,\n  IconButton,\n  Menu,\n  MenuItem,\n} from \"@mui/material\";\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport AddIcon from '@mui/icons-material/Add';\nimport GroupsIcon from '@mui/icons-material/Groups';\n\nimport Message from './message';\n\nconst AddRoomPrompt = ({ open, close, add }) => {\n  const [roomName, setRoomName] = useState(\"\");\n\n  const onAdd = () => {\n    add(roomName);\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add Room</DialogTitle>\n\n      <DialogContent>\n        <TextField\n          sx={{ width: 400, my: 1 }}\n          onChange={(e) => setRoomName(e.target.value)}\n          label=\"Room name\"\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst AddContactPrompt = ({ open, close, add, allUsers }) => {\n  const [newContact, setNewContact] = useState(\"\");\n\n  const onAdd = () => {\n    add(newContact);\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add Contact</DialogTitle>\n\n      <DialogContent>\n        <Autocomplete\n          sx={{ width: 400, my: 1 }}\n          onChange={(_, u) => u && setNewContact(u.id)}\n          options={allUsers.map(u => ({\n            label: userDisplayName(u),\n            id: u.user_id,\n          }))}\n          renderInput={(params) => <TextField {...params} label=\"User\" />}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n// TODO use teh name property\nconst userDisplayName = (u) => `${u.user_firstname} ${u.user_lastname} (${u.user_email})`;\n\nconst Roster = ({\n  roster,\n  client,\n  allUsers,\n  API_BASE,\n  MUC_LIGHT_HOSTNAME,\n  jwt,\n}) => {\n  const [search, setSearch] = useState(\"\");\n  const [subNav, setSubNav] = useState(null);\n  const [showAddContact, setShowAddContact] = useState(false);\n  const [showAddRoom, setShowAddRoom] = useState(false);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const showAddMenu = Boolean(anchorEl);\n\n  const openAddMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const closeAddMenu = () => {\n    setAnchorEl(null);\n  };\n\n  const addContact = (uuid) => {\n    const jid = `${uuid}@${client.config.server}`;\n    client.subscribe(jid);\n  }\n\n  // TODO: this will use the Room API in the future\n  const addRoom = async (name) => {\n    const uuid = crypto.randomUUID();\n    const jid = `${uuid}@${MUC_LIGHT_HOSTNAME}`;\n    const res = await client.joinRoom(jid);\n    console.log(\"created room!\", res);\n    client.configureRoom(jid, { fields: [ { name: 'roomname', value: name } ] });\n  }\n\n  // filter by search\n  const filteredRoster = roster.filter(r =>\n    r.name?.toLowerCase().includes(search.toLowerCase()) || r.jid?.includes(search));\n\n  const messages = {}; // TODO\n\n  const chatMessages = subNav && messages[subNav.jid]\n    ? messages[subNav.jid]\n    : [];\n\n  return (\n    <>\n      <AddContactPrompt\n        add={addContact}\n        close={() => setShowAddContact(false)}\n        open={showAddContact}\n        allUsers={allUsers}\n      />\n\n      <AddRoomPrompt\n        add={addRoom}\n        close={() => setShowAddRoom(false)}\n        open={showAddRoom}\n      />\n\n      <Paper className=\"scroll-list-container\" sx={{ width: 300 }}>\n        <Box sx={{ px: 2 }}>\n          <Stack direction=\"row\" sx={{ alignItems: \"center\" }}>\n            <h2>Contacts</h2>\n\n            <IconButton sx={{ ml: \"auto\" }} onClick={openAddMenu}>\n              <AddIcon fontSize=\"inherit\" />\n            </IconButton>\n\n            <Menu\n              id=\"basic-menu\"\n              anchorEl={anchorEl}\n              open={showAddMenu}\n              onClose={closeAddMenu}\n              MenuListProps={{\n                'aria-labelledby': 'basic-button',\n              }}\n            >\n              <MenuItem onClick={() => { closeAddMenu(); setShowAddContact(true)}}>Add Contact</MenuItem>\n              <MenuItem onClick={() => { closeAddMenu(); setShowAddRoom(true)}}>Add Room</MenuItem>\n            </Menu>\n          </Stack>\n\n          <TextField\n            type=\"search\"\n            label=\"Search\"\n            variant=\"filled\"\n            size=\"small\"\n            fullWidth\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </Box>\n\n        <List className=\"scroll-list\">\n          {filteredRoster.map((u) => (\n            <ListItem key={u.jid} disablePadding>\n              <ListItemButton onClick={() => setSubNav(u)}>\n                <ListItemAvatar>\n                  <Avatar>\n                    {u.isRoom\n                      ? <GroupsIcon />\n                      : initials(u)}\n                  </Avatar>\n                </ListItemAvatar>\n\n                <ListItemText\n                  primary={u.name}\n                  primaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  secondary={u.user?.user_email}\n                  secondaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  title={u.jid}\n                />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n\n      <Paper className=\"right-section\">\n        {subNav && <Message allUsers={allUsers} client={client} user={subNav} messages={chatMessages} API_BASE={API_BASE} jwt={jwt} />}\n      </Paper>\n    </>\n  );\n};\n\n// TODO put this is allUsers state\nfunction initials(u) {\n  return u.name?.split(\" \")?.slice(0, 2)?.map(n => n.substr(0, 1));\n}\n\nexport default Roster;\n","import { useState } from 'react';\nimport {\n  Box,\n  TextField,\n  Paper,\n  Stack,\n  // Divider,\n  // Dialog,\n  // DialogTitle,\n  // DialogContent,\n  // DialogActions,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemAvatar,\n  ListItemText,\n  Avatar,\n  // Autocomplete,\n} from \"@mui/material\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\n\nimport GroupsIcon from '@mui/icons-material/Groups';\n\nimport Message from \"./message\";\n\nimport db from \"./db\";\n\nconst Messages = ({ client, allUsers, roster, jwt, API_BASE }) => {\n  const [search, setSearch] = useState(\"\");\n  const [subNav, setSubNav] = useState(null);\n\n  // pull out all of the unique IDs from all of the messages\n  const tos = useLiveQuery(() => db.messages.orderBy(\"to\").uniqueKeys()) || [];\n  const froms = useLiveQuery(() => db.messages.orderBy(\"from\").uniqueKeys()) || [];\n  const jids = tos.concat(froms).filter((v, i, a) => a.indexOf(v) === i); // all unique jids\n\n  const users = jids?.map(jid => { // add names\n    const user = allUsers.find((u) => jid.includes(u.user_id));\n    const name = user?.name // user names come from all users\n      || roster.find((r) => r.jid === jid)?.name // room names will be in your roster\n      || jid;\n\n    return { jid, user, name };\n  });\n\n  const filteredUsers = users?.filter((u) => { // filter by search\n    const s = search.toLowerCase();\n    return u.name?.toLowerCase().includes(s)\n      || s.includes(u.name?.toLowerCase())\n      || u.user?.user_email?.includes(s)\n      || s.includes(u.user?.user_email);\n  });\n\n  return (\n    <>\n      <Paper className=\"scroll-list-container\" sx={{ width: 300 }}>\n        <Box sx={{ px: 2 }}>\n          <Stack direction=\"row\" sx={{ alignItems: \"center\" }}>\n            <h2>Chat</h2>\n          </Stack>\n\n          <TextField\n            type=\"search\"\n            label=\"Search\"\n            variant=\"filled\"\n            size=\"small\"\n            fullWidth\n            onChange={(e) => setSearch(e.target.value)}\n            />\n        </Box>\n\n        <List className=\"scroll-list\">\n          {filteredUsers.map((u) => (\n            <ListItem key={u.jid} disablePadding>\n              <ListItemButton onClick={() => setSubNav(u)}>\n                <ListItemAvatar>\n                  <Avatar>\n                    {u.isRoom\n                      ? <GroupsIcon />\n                      : initials(u)}\n                  </Avatar>\n                </ListItemAvatar>\n\n                <ListItemText\n                  primary={u.name}\n                  primaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  secondary={u.user?.user_email}\n                  secondaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  title={u.jid}\n                />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n\n      <Paper className=\"right-section\">\n        {subNav && <Message allUsers={allUsers} client={client} user={subNav} API_BASE={API_BASE} jwt={jwt} />}\n      </Paper>\n    </>\n  );\n};\n\n// TODO put this is allUsers state\nfunction initials(u) {\n  return u.name?.split(\" \")?.slice(0, 2)?.map(n => n.substr(0, 1));\n}\n\nexport default Messages;\n","import { useState, useEffect } from \"react\";\nimport * as XMPP from \"stanza\";\n\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Snackbar,\n  Alert,\n} from \"@mui/material\";\n\nimport db from \"./db\";\nimport \"./App.css\";\nimport SideBar from \"./sidebar\";\nimport Roster from \"./roster\";\nimport Messages from \"./messages\";\n\nwindow.db = db;\n\nconst API_BASE = \"https://saas-api.visionable.one\";\nconst PROTOCOL = \"wss\";\nconst PORT = \"5443\";\nconst ENDPOINT = \"ws-xmpp\";\n\nconst resource = localStorage.getItem(\"xmpp-resource\") || crypto.randomUUID();\nlocalStorage.setItem(\"xmpp-resource\", resource);\n\nconst initXMPP = async (jid, password, hostname) =>\n  XMPP.createClient({\n    jid,\n    password,\n    resource,\n    transports: {\n      websocket: `${PROTOCOL}://${hostname}:${PORT}/${ENDPOINT}`,\n    },\n  });\n\nconst App = ({ signOutAWS, user }) => {\n  const [client, setClient] = useState(null);\n  const [jwt, setJwt] = useState(\"\");\n  const [roster, setRoster] = useState([]);\n  const [presence, setPresence] = useState({});\n  const [incomingInvites, setIncomingInvites] = useState([]);\n  const [inviteResponses, setInviteResponses] = useState({});\n  const [allUsers, setAllUsers] = useState([]);\n  const [nav, setNav] = useState(\"contacts\");\n  const [connected, setConnected] = useState(false);\n  const [server] = useState(\"saas.visionable.one\");\n\n  const [serviceName, ...[domain]] = server.split(/\\.(.*)/s); // split out the serviceName from the rest of the host\n  const xmppHostname = `${serviceName}-msg.${domain}`; // e.g. saas-msg.visionable.one\n  const mucHostname = `muclight.${xmppHostname}`; // e.g. muclight.saas-msg.visionable.one\n\n  const signIn = async () => {\n    if (client) {\n      return; // only sign in once\n    }\n\n    if (localStorage.getItem(\"username\") !== user.username) {\n      await db.messages.clear();\n    }\n    localStorage.setItem(\"username\", user.username);\n\n    try {\n      const { signInUserSession: session } = user;\n      const jwt = session.idToken.jwtToken;\n      setJwt(jwt);\n      const jid = `${user.username}@${xmppHostname}`;\n      const xmpp = await initXMPP(jid, jwt, xmppHostname);\n\n      setClient(xmpp);\n      setConnected(true);\n\n      const cognitoUsers = await getAllUsers(jwt);\n      const extendedUsers = cognitoUsers.map((u) => ({ ...u, name: userFullName(u) }));\n      setAllUsers(extendedUsers);\n\n      window.client = xmpp;\n\n      xmpp.on(\"session:started\", async () => {\n        xmpp.sendPresence();\n        xmpp.enableKeepAlive();\n        xmpp.enableCarbons();\n\n        const roster = (await xmpp.getRoster()).items;\n        setRoster(roster);\n\n        // Get all of the messages up until the last one I've seen\n        const lastMessage = await db.messages.orderBy(\"timestamp\").last();\n        getAllMessages({ client: xmpp, start: lastMessage?.timestamp });\n      });\n\n      xmpp.on(\"message\", (message) => {\n        if (message.type === 'meeting-invite') {\n          setIncomingInvites((prev) => [...prev, message]);\n        } else if (message.type === \"chat\") {\n          const [from] = message.from.split(\"/\");\n\n          db.messages.put({\n            id: message.id,\n            from,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group: null,\n            timestamp: new Date(),\n          }, message.id)\n        } else if (message.type === \"groupchat\") {\n          const [room, user] = message.from.split(\"/\");\n          console.log(\"GOT A GROUPCHAT\", room, user);\n        }\n      });\n\n      xmpp.on(\"message:sent\", (message) => {\n        if (message.type === 'meeting-invite') {\n          // TODO: display something in the chat\n        } else if (message.type === \"chat\") {\n          db.messages.put({\n            id: message.id,\n            from: xmpp.config.jid,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group: null,\n            timestamp: new Date(),\n          }, message.id)\n        } else if (message.type === \"groupchat\") {\n          // TODO:\n        }\n      });\n\n      xmpp.on(\"mam:item\", (mam) => {\n        // TODO groupchat\n        const message = mam.archive?.item?.message;\n        const timestamp = mam.archive?.item?.delay?.timestamp;\n        if (message.type === 'chat') {\n          const { to } = message;\n          const [from] = message.from.split(\"/\");\n          const fullUser = to?.includes(xmpp.config.jid) ? from : to;\n          if (!fullUser) {\n            console.log(\"NO FULL USER\", message);\n            return;\n          }\n\n          db.messages.put({\n            id: message.id,\n            from,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group: null,\n            timestamp,\n          }, message.id)\n        }\n      });\n\n      xmpp.on(\"subscribe\", (data) => { // if someone subscribes to us..\n        xmpp.acceptSubscription(data.from); // auto accept\n        xmpp.subscribe(data.from);\n      });\n\n      xmpp.on(\"unsubscribe\", () => { // if someone removes me from their roster\n        // xmpp.unsubscribe(data.from); // remove them from ours?\n      });\n\n      xmpp.on(\"roster:update\", async (data) => { // roster item change\n        data.roster.items.forEach((r) => {\n          xmpp.searchHistory({ with: r.jid, paging: { before: \"\" }}); // get the last few messages\n        });\n\n        setRoster((await xmpp.getRoster()).items)\n      });\n\n      // if someone adds you to a room, auto accept it\n      xmpp.on(\"muc:invite\", (data) => {\n        client.joinRoom(data.room);\n      });\n\n      // created or added to a room\n      xmpp.on(\"muc:available\", async () =>\n        setRoster((await xmpp.getRoster()).items)\n      );\n\n      // no longer in a room\n      xmpp.on(\"muc:unavailable\", async () =>\n        setRoster((await xmpp.getRoster()).items)\n      );\n\n      xmpp.on(\"presence\", (data) => {\n        setPresence((prev) => ({ ...prev, [data.from]: data }))\n      });\n\n      /*\n      xmpp.on(\"available\", (data) => {\n        const jid = data.from.replace(/\\/.*$/, \"\");\n        setPresence((prev) => ({ ...prev, [jid]: 'Available' }));\n      });\n*/\n\n      xmpp.on(\"*\", async (type, data) => {\n        console.log(type, data);\n      });\n\n      // on disconnect, retry\n      xmpp.on(\"disconnected\", () => {\n        console.log(\"DISCONNECTED\");\n        setConnected(false);\n        // setTimeout(xmpp.connect, 3000)\n      })\n\n      xmpp.on(\"connected\", () => {\n        setConnected(true);\n      })\n\n      xmpp.connect();\n    } catch (e) {\n      console.error(\"caught\", e);\n    }\n  };\n\n  useEffect(signIn, [user]);\n\n  // extend the roster with info from the User API, presence, etc.\n  const extendedRoster = roster.map(r => {\n    const user = allUsers.find(u => r.jid.includes(u.user_id));\n    const name = r.name // if the roster item has a name\n      ? r.name // use that\n      : user // otherwise, if there's a corresponding user from the User API\n        ? userFullName(user) // get the name of that\n        : r.jid;// otherwise, just show their JID\n\n    // grab all of the resources that we've been given presence for this user\n    const resources = Object.values(presence)\n      .filter((p) => p.from.includes(r.jid))\n      .map((u) => u.from.split(\"/\")?.[1]);\n\n    return {\n      ...r,\n      user,\n      name, \n      resources,\n      isRoom: !!r.groups?.[0]?.includes(\"muc\"),\n    };\n  });\n\n  console.log('new presence list', presence);\n  console.log(\"extended roster\", extendedRoster);\n\n  // find my own user from the User API\n  const me = allUsers.find((u) => client.jid.match(u.user_id)) || {};\n\n  const reconnect = async () => {\n    console.log(\"reconnecting\");\n    // client.config.credentials.password = user.idToken.jwtToken; // TODO\n    client.connect();\n  };\n\n  const signOut = async () => {\n    client.disconnect();\n    setConnected(false);\n    setRoster([]);\n    setPresence({});\n    db.messages.clear();\n    signOutAWS();\n  };\n\n  const acceptInvite = (message) => {\n    setInviteResponses((prev) => ({ ...prev, [message.id]: \"accept\" }))\n    client.sendMessage({ to: message.from, body: message.id, type: 'meeting-invite-accept' });\n  };\n\n  const rejectInvite = (message) => {\n    setInviteResponses((prev) => ({ ...prev, [message.id]: \"reject\" }))\n    client.sendMessage({ to: message.from, body: message.id, type: 'meeting-invite-reject' });\n  };\n\n  /*\n  const changeName = () => {\n    client.publishVCard({ fullName: newName });\n  };\n\n  const getVCard = async () => {\n    try {\n      const card = await client.getVCard(jid);\n      console.log(\"my card\", card);\n      setNewName(card?.fullName);\n    } catch (e) {\n      console.error(\"Error getting vcard\", e);\n    }\n  };\n\n  const getMUCLightRooms = async () => {\n    const res = await client.getDiscoItems(MUC_LIGHT_HOSTNAME);\n  }\n\n  const uploadFile = (e) => {\n    Array.from(e.target.files).forEach(async (f) => {\n      const { name, size, type: mediaType } = f; // TODO files with spaces in name fail\n      console.log('file', name, size, mediaType);\n      const service = await client.getUploadService();\n      console.log('service', service);\n      const slot = await client.getUploadSlot(service.jid, { name, size, mediaType })\n      console.log('slot', slot);\n      const { download: downloadUrl, upload: { url: uploadUrl } } = slot;\n      console.log('got urls', downloadUrl, uploadUrl);\n      const res = await fetch(uploadUrl, {\n        method: \"PUT\",\n        body: f,\n        headers: { \"x-amz-acl\": \"public-read\" },\n      });\n      console.log('res', res);\n\n      if (to) { // send notification\n        client.sendMessage({ to, body: downloadUrl, type: 'file-upload' });\n      }\n    })\n  }\n*/\n\n  if (!client) {\n    return (\n      <div className=\"App\">Loading</div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <SideBar nav={nav} setNav={setNav} signOut={signOut} client={client} me={me} />\n\n      <Snackbar\n        onClick={reconnect}\n        open={!connected}\n        anchorOrigin={{ horizontal: \"center\", vertical: \"bottom\" }}\n        sx={{ cursor: \"pointer\" }}\n      >\n        <Alert severity=\"error\" sx={{ width: '100%' }}>Disconnected. Click here to reconnect</Alert>\n      </Snackbar>\n\n      <IncomingInvites\n        accept={acceptInvite}\n        reject={rejectInvite}\n        invites={incomingInvites}\n        responses={inviteResponses} />\n\n      <Box className=\"main\">\n        {nav === 'contacts'\n          ? <Roster\n            roster={extendedRoster}\n            // presence={presence}\n            allUsers={allUsers}\n            client={client}\n            API_BASE={API_BASE}\n            MUC_LIGHT_HOSTNAME={mucHostname}\n            jwt={jwt}\n            />\n          : nav === 'messages'\n            ? <Messages\n              roster={extendedRoster}\n              // presence={presence}\n              allUsers={allUsers}\n              client={client}\n              API_BASE={API_BASE}\n              MUC_LIGHT_HOSTNAME={mucHostname}\n              jwt={jwt}\n              />\n            : null}\n      </Box>\n    </div>\n  );\n};\n\nconst IncomingInvites = ({ accept, reject, invites, responses }) =>\n  invites.filter((m) => !responses[m.id]).map((m) => (\n    <Dialog key={m.id} open={true}>\n      <DialogTitle>Meeting Invite</DialogTitle>\n      <DialogContent>\n        <p>Invite ID: {m.id}</p>\n        <p>From: {m.from}</p>\n        <p>Meeting ID: {m.body}</p>\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"error\" onClick={() => reject(m)}>Reject</Button>\n        <Button onClick={() => accept(m)}>Accept</Button>\n      </DialogActions>\n    </Dialog>\n  ));\n\nconst getAllUsers = async (jwt) => {\n  const res = await fetch(`${API_BASE}/api/user`, { headers: { Authorization: jwt } });\n  return res.ok ? res.json() : [];\n}\n\nfunction userFullName(user) {\n  return user?.name\n  ? user.name\n    : user?.user_displayname\n      ? user.user_displayname\n      : user?.user_firstname\n        ? `${user.user_firstname} ${user.user_lastname}`\n        : \"[No Name]\";\n}\n\nasync function getServiceConfig(hostname) {\n  try {\n    const res = await fetch(`https://${hostname}/config.json`);\n    return await res.json();\n  } catch(e) {\n    console.log(e);\n    alert(\"Error requesting configuration data for this service\");\n  }\n}\n\nasync function getAllMessages({ client, start, after }) {\n  const paging = after ? { after } : {};\n  const { complete, paging: { last } } = await client.searchHistory({ start, paging });\n\n  if (!complete) {\n    getAllMessages({ client, after: last });\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nimport Amplify from \"aws-amplify\";\nimport { Authenticator } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\n// AWS Config\nconst REGION = \"us-east-1\";\nconst USER_POOL_ID = \"us-east-1_ESYPvGhN3\";\nconst USER_POOL_WEB_CLIENT_ID = \"5ai2feek1rgpso497om1kbj4ug\";\n\nAmplify.configure({\n  Auth: {\n    region: REGION,\n    userPoolId: USER_POOL_ID,\n    userPoolWebClientId: USER_POOL_WEB_CLIENT_ID,\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n\n    <Authenticator>\n      {({ signOut, user }) => (\n        <App signOutAWS={signOut} user={user} />\n      )}\n    </Authenticator>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}