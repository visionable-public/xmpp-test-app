{"version":3,"sources":["db.js","settings.js","profile.js","sidebar.js","message.js","roster.js","messages.js","inbox.ts","App.js","index.js"],"names":["db","Dexie","version","stores","messages","Settings","client","me","onClose","open","useState","mfa","setMfa","qr","setQr","loading","setLoading","token","setToken","useEffect","a","Auth","currentAuthenticatedUser","user","getPreferredMFA","mfaType","setupTOTP","email","attributes","code","str","onMfaChange","setPreferredMFA","checkToken","verifyTotpToken","then","alert","catch","e","console","log","Dialog","fullWidth","maxWidth","DialogTitle","DialogContent","FormControlLabel","control","Checkbox","onChange","checked","label","value","size","TextField","sx","my","target","InputProps","endAdornment","Button","disabled","onClick","DialogActions","initials","u","name","split","slice","map","n","substr","Profile","signOut","setStatus","anchorEl","setAnchorEl","activity","setActivity","showSettings","setShowSettings","Boolean","handleClose","statusList","key","color","icon","Circle","ListItem","disablePadding","event","currentTarget","mx","Avatar","ListItemText","primary","primaryTypographyProps","textOverflow","overflow","whiteSpace","secondary","user_email","secondaryTypographyProps","title","config","jid","Menu","id","s","MenuItem","status","sendPresence","changeStatus","ListItemIcon","fontSize","text","prompt","publishActivity","Divider","items","route","iconComponent","ContactsIcon","ChatIcon","SideBar","setNav","nav","List","display","flexDirection","width","minWidth","background","i","IconComponent","ListItemButton","Chat","message","mine","isRoom","from","includes","Box","className","blue","p","borderRadius","marginLeft","marginRight","style","timestamp","toLocaleString","componentDecorator","decoratedHref","decoratedText","href","body","createMeeting","API_BASE","jwt","url","mstart","parseInt","Date","getTime","formData","FormData","append","toString","fetch","method","headers","Authorization","res","json","AddUserToRoomPrompt","close","allUsers","room","setUser","Autocomplete","_","options","user_id","renderInput","params","setRoomAffiliation","upload","Promise","all","Array","files","f","mediaType","type","getUploadService","service","getUploadSlot","slot","downloadUrl","download","uploadUrl","Message","members","setMembers","setMessage","showAddUserToRoom","setShowAddUserToRoom","scrollRef","useRef","fileRef","roomListAnchorEl","setRoomListAnchorEl","showRoomList","useLiveQuery","where","equals","sortBy","or","and","m","group","extendedMessages","find","removeContact","leaveRoom","removeRosterItem","unsubscribe","sendMessage","to","attachFile","urls","forEach","invite","uuid","memberList","getRoomMembers","muc","users","closeRoomList","current","scrollTop","scrollHeight","allOtherUsers","filter","Stack","flexGrow","direction","px","alignItems","IconButton","ml","MenuListProps","ref","placeholder","onKeyPress","flexShrink","click","AddRoomPrompt","add","roomName","setRoomName","AddContactPrompt","newContact","setNewContact","userDisplayName","user_firstname","user_lastname","Roster","roster","MUC_LIGHT_HOSTNAME","search","setSearch","subNav","setSubNav","showAddContact","setShowAddContact","showAddRoom","setShowAddRoom","tab","setTab","showAddMenu","closeAddMenu","addRoom","crypto","randomUUID","joinRoom","configureRoom","fields","filteredRoster","r","toLowerCase","server","subscribe","Paper","variant","borderBottom","borderColor","Tabs","idx","Tab","index","available","away","unavailable","ListItemAvatar","Badge","componentsProps","badge","backgroundColor","border","height","overlap","badgeContent","invisible","anchorOrigin","vertical","horizontal","AddChatPrompt","Messages","showAddChat","setShowAddChat","tos","orderBy","uniqueKeys","froms","groups","jids","concat","v","indexOf","filteredUsers","stanzas","define","element","unread","JXT","attribute","queryid","namespace","path","result","getInbox","sendIQ","inbox","on","msg","emit","window","resource","localStorage","getItem","setItem","initXMPP","password","hostname","XMPP","transports","websocket","IncomingInvites","accept","reject","invites","responses","getAllUsers","ok","userFullName","user_displayname","getAllMessages","start","after","paging","searchHistory","complete","last","App","signOutAWS","setClient","setJwt","setRoster","presence","setPresence","activities","setActivities","incomingInvites","setIncomingInvites","inviteResponses","setInviteResponses","setAllUsers","connected","setConnected","serviceName","domain","xmppHostname","mucHostname","signIn","username","clear","session","signInUserSession","idToken","jwtToken","xmpp","use","IqInbox","cognitoUsers","extendedUsers","updateCaps","legacyCapabilities","disco","getCaps","enableKeepAlive","enableCarbons","getRoster","lastMessage","prev","before","put","mam","archive","item","delay","forwarded","stamp","data","acceptSubscription","with","connect","addEventListener","disconnect","error","extendedRoster","statuses","Object","values","length","some","every","match","reconnect","updateConfig","credentials","removeItem","Snackbar","cursor","Alert","severity","Context","createContext","HOSTNAME_KEY","AppContainer","setConfig","configure","getServiceConfig","Amplify","region","userPoolId","userPoolWebClientId","Provider","Authenticator","mode","location","reload","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.10863eee.chunk.js","sourcesContent":["import Dexie from 'dexie';\n\nconst db = new Dexie('visionable-xmpp-test-app');\n\ndb.version(1).stores({\n  messages: '++id, group, from, to, body, type, timestamp',\n});\n\nexport default db;\n","import { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  FormControlLabel,\n  Button,\n  Checkbox,\n  TextField,\n} from '@mui/material';\n\nimport { QRCodeSVG } from 'qrcode.react'\n\nimport { Auth } from \"aws-amplify\";\n\nconst Settings = ({ client, me, onClose, open }) => {\n  const [mfa, setMfa] = useState(false);\n  const [qr, setQr] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(\"\");\n\n  useEffect(async () => {\n    const user = await Auth.currentAuthenticatedUser();\n    const mfaType = await Auth.getPreferredMFA(user);\n    setMfa(mfaType === 'SOFTWARE_TOKEN_MFA')\n    setLoading(false);\n  }, []);\n\n  const setupTOTP = async () => {\n    const user = await Auth.currentAuthenticatedUser();\n    const { attributes: { email } } = user;\n\n    const code = await Auth.setupTOTP(user);\n    const issuer = \"Visionable\"; // TODO: ?\n    const str = `otpauth://totp/Visionable:${email}?secret=${code}&issuer=${issuer}`;\n    setQr(str);\n  }\n\n  const onMfaChange = async () => {\n    const user = await Auth.currentAuthenticatedUser();\n    setMfa(!mfa);\n\n    if (!mfa) {\n      setupTOTP();\n    } else {\n      Auth.setPreferredMFA(user, 'NOMFA');\n    }\n  }\n\n  const onTokenChange = (e) => {\n    setToken(e.target.value);\n  };\n\n  const checkToken = async () => {\n    const user = await Auth.currentAuthenticatedUser();\n\n    Auth.verifyTotpToken(user, token)\n      .then(() => {\n        Auth.setPreferredMFA(user, 'TOTP');\n        alert(\"Successfully enabled MFA\")\n        setQr(null);\n      })\n      .catch((e) => {\n        console.log(\"ERROR\", e);\n        alert(\"Error enabling MFA\");\n      });\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} fullWidth maxWidth=\"sm\">\n      <DialogTitle>Settings</DialogTitle>\n\n      <DialogContent>\n        {loading\n          ? <div>Loading</div>\n          : <>\n            <FormControlLabel control={<Checkbox onChange={onMfaChange} checked={mfa} />} label=\"Enable MFA\" />\n\n            {mfa && qr && <>\n              <br />\n              <QRCodeSVG value={qr} size={200} />\n              <br />\n              <TextField\n                sx={{ my: 1 }}\n                onChange={onTokenChange}\n                label=\"Verification Code\"\n                InputProps={{endAdornment: <Button disabled={!token} onClick={checkToken}>Verify</Button>}}\n                />\n              </>}\n          </>}\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default Settings\n","import { useState } from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport ListItemAvatar from '@mui/material/Avatar';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Divider from '@mui/material/Divider';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemButton from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport Settings from '@mui/icons-material/Settings';\nimport Logout from '@mui/icons-material/Logout';\nimport Circle from '@mui/icons-material/Circle';\n\nimport SettingsDialog from './settings';\n\nconst Profile = ({ client, me, signOut }) => {\n  const [status, setStatus] = useState(\"available\");\n  const [anchorEl, setAnchorEl] = useState(null);\n  // const [newActivity, setNewActivity] = useState(\"\");\n  const [activity, setActivity] = useState(\"\"); // TODO: get last activity\n  const [showSettings, setShowSettings] = useState(false);\n\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const changeStatus = (status) => {\n    setStatus(status);\n    client.sendPresence({ status });\n  };\n\n  const activityPrompt = () => { // TODO: use mui\n    const text = prompt(\"Enter a custom message\");\n    // setNewActivity(text);\n    // sendActivity();\n    client.publishActivity({ text })\n    setActivity(text);\n  }\n\n  /*\n  const sendActivity = () => {\n    client.publishActivity({ text: activity })\n    setActivity(newActivity);\n  }\n*/\n\n  const statusList = [\n    {\n      key: \"available\",\n      color: \"#53b397\",\n      label: \"Available\",\n      icon: Circle,\n    },\n    {\n      key: \"in-meeting\",\n      color: \"#ea3323\",\n      label: \"In a meeting\",\n      icon: Circle,\n    },\n    {\n      key: \"away\",\n      color: \"#f0a73e\",\n      label: \"Away\",\n      icon: Circle,\n    },\n  ]\n\n  return (\n    <>\n      <ListItem disablePadding>\n        <ListItemButton onClick={handleClick} sx={{ mx: 1 }}>\n          <ListItemAvatar>\n            <Avatar>{initials(me)}</Avatar>\n          </ListItemAvatar>\n        </ListItemButton>\n\n        <ListItemText\n          primary={me.name}\n          primaryTypographyProps={{ color: \"white\", textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n          secondary={me.user_email}\n          secondaryTypographyProps={{ color: \"white\", textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n          title={client.config.jid}\n        />\n      </ListItem>\n\n      <Menu\n        anchorEl={anchorEl}\n        id=\"account-menu\"\n        open={open}\n        onClose={handleClose}\n        onClick={handleClose}\n      >\n        {statusList.map((s) => (\n          <MenuItem key={s.key} onClick={() => changeStatus(s.key)}>\n            <ListItemIcon>\n              <Circle fontSize=\"small\" sx={{ color: s.color }} />\n            </ListItemIcon>\n\n            <ListItemText primary={s.label} />\n          </MenuItem>\n        ))}\n\n        <MenuItem onClick={activityPrompt}>\n          {activity || <i>Custom message</i>}\n        </MenuItem>\n\n        <Divider />\n\n        <MenuItem onClick={() => {setShowSettings(true)}}>\n          <ListItemIcon>\n            <Settings fontSize=\"small\" />\n          </ListItemIcon>\n          Settings\n        </MenuItem>\n\n        <MenuItem onClick={signOut}>\n          <ListItemIcon>\n            <Logout fontSize=\"small\" />\n          </ListItemIcon>\n          Logout\n        </MenuItem>\n      </Menu>\n\n      <SettingsDialog open={showSettings} onClose={() => setShowSettings(false)} client={client} me={me} />\n    </>\n  );\n};\n\n// TODO put this is allUsers state\nfunction initials(u) {\n  return u.name?.split(\" \")?.slice(0, 2)?.map(n => n.substr(0, 1));\n}\n\nexport default Profile;\n","import {\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n} from \"@mui/material\";\n\nimport {\n  Contacts as ContactsIcon,\n  Chat as ChatIcon,\n} from \"@mui/icons-material\";\n\nimport Profile from './profile';\n\nconst items = [\n  {\n    route: \"contacts\",\n    label: \"Contacts\",\n    iconComponent: ContactsIcon,\n  },\n  {\n    route: \"messages\",\n    label: \"Messages\",\n    iconComponent: ChatIcon,\n  },\n]\n\nconst SideBar = ({ client, me, setNav, nav, signOut }) => (\n  <List sx={{\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"240px\",\n    minWidth: \"240px\",\n    background: \"#091c38\",\n    color: \"white\"\n  }}>\n    <Profile client={client} me={me} signOut={signOut} />\n\n    {items.map(i => {\n      const IconComponent = i.iconComponent;\n\n      return (\n        <ListItem key={i.route} disablePadding sx={{ background: nav === i.route ? 'rgba(255,255,255,0.1)' : 'transparent' }}>\n          <ListItemButton onClick={() => setNav(i.route)}>\n            <ListItemIcon>\n              <IconComponent sx={{ color: \"white\" }} />\n            </ListItemIcon>\n\n            <ListItemText>\n              {i.label}\n            </ListItemText>\n          </ListItemButton>\n        </ListItem>\n      )})}\n\n    {/* <ListItem disablePadding sx={{ mt: \"auto\" }}> */}\n    {/*   <ListItemButton onClick={signOut}> */}\n    {/*     <ListItemIcon> */}\n    {/*       <LogoutIcon sx={{ color: \"white\" }} /> */}\n    {/*     </ListItemIcon> */}\n\n    {/*     <ListItemText> */}\n    {/*       Log Out */}\n    {/*     </ListItemText> */}\n    {/*   </ListItemButton> */}\n    {/* </ListItem> */}\n  </List>\n);\n\nexport default SideBar;\n","import {\n  Box,\n  Button,\n  Stack,\n  TextField,\n  IconButton,\n  Autocomplete,\n  Menu,\n  MenuItem,\n  Divider,\n} from \"@mui/material\";\nimport { useState, useEffect, useRef } from \"react\";\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport GroupAddIcon from '@mui/icons-material/GroupAdd';\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport VideoCameraFrontIcon from '@mui/icons-material/VideoCameraFront';\nimport AttachFileIcon from '@mui/icons-material/AttachFile';\nimport { blue } from \"@mui/material/colors\";\n\nimport Linkify from 'react-linkify';\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport db from './db';\n\nconst Message = ({ client, user, API_BASE, jwt, allUsers }) => {\n  const [members, setMembers] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [showAddUserToRoom, setShowAddUserToRoom] = useState(false);\n  const scrollRef = useRef(null);\n  const fileRef = useRef(null);\n\n  const [roomListAnchorEl, setRoomListAnchorEl] = useState(null);\n  const showRoomList = Boolean(roomListAnchorEl);\n\n  const messages = useLiveQuery(() => \n    user.isRoom\n      ? db.messages.where(\"group\").equals(user.jid).sortBy(\"timestamp\")\n      : db.messages.where(\"from\").equals(user.jid).or(\"to\").equals(user.jid).and((m) => !m.group).sortBy(\"timestamp\"),\n    [user], []);\n\n  const extendedMessages = messages\n    .map((message) => { // add user info\n      const user = allUsers.find((u) => message.from?.includes(u.user_id));\n      const name = user?.name || message.from;\n\n      return { ...message, user, name };\n    });\n\n  const removeContact = async () => {\n    if (user.isRoom) {\n      await client.setRoomAffiliation(user.jid, client.config.jid, \"none\");\n      await client.leaveRoom(user.jid);\n    } else {\n      await client.removeRosterItem(user.jid);\n      await client.unsubscribe(user.jid);\n    }\n  };\n\n  const sendMessage = () => {\n    if (!message) {\n      return;\n    }\n\n    const type = user.isRoom ? 'groupchat' : 'chat';\n    client.sendMessage({ to: user.jid, body: message, type });\n    setMessage(\"\");\n  };\n\n  const attachFile = async (e) => {\n    // upload all the files and get their URLs\n    const urls = await upload(e, client);\n    console.log('urls', urls);\n\n    // send out the notifications\n    urls.forEach((url) => {\n      const type = user.isRoom ? 'groupchat' : 'chat';\n      client.sendMessage({ to: user.jid, body: url, type });\n\n    });\n  }\n\n  const invite = async () => {\n    const body = await createMeeting(API_BASE, jwt);\n    if (body.uuid) {\n      client.sendMessage({ to: user.jid, body: body.uuid, type: 'meeting-invite' });\n    }\n  };\n\n  const memberList = async (event) => {\n    const res = await client.getRoomMembers(user.jid);\n\n    setMembers(res.muc.users.map((m) => ({\n      ...m,\n      name: allUsers.find((u) => m.jid.includes(u.user_id))?.name,\n    })));\n\n    setRoomListAnchorEl(event.target);\n  };\n\n  const closeRoomList = () => setRoomListAnchorEl(null);\n  const openAddUser = () => {\n    closeRoomList();\n    setShowAddUserToRoom(true);\n  }\n\n  useEffect(() => {\n    scrollRef.current.scrollTop = scrollRef?.current?.scrollHeight;\n  }, [messages]);\n\n  const allOtherUsers = allUsers.filter((u) => !client.config.jid.includes(u.user_id));\n\n  return (\n    <Stack sx={{ flexGrow: 1 }}>\n      <AddUserToRoomPrompt\n        client={client}\n        room={user}\n        open={showAddUserToRoom}\n        close={() => setShowAddUserToRoom(false) }\n        allUsers={allOtherUsers}\n      />\n\n      <Stack direction=\"row\" sx={{ px: 2, background: \"white\", alignItems: \"center\" }}>\n        <h2>{user.name}</h2>\n\n        <IconButton sx={{ ml: \"auto\" }} onClick={removeContact}>\n          <DeleteIcon fontSize=\"inherit\" />\n        </IconButton>\n\n        {user.isRoom && <>\n          <IconButton onClick={memberList}>\n            <GroupAddIcon fontSize=\"inherit\" />\n          </IconButton>\n\n          <Menu\n            id=\"basic-menu\"\n            anchorEl={roomListAnchorEl}\n            open={showRoomList}\n            onClose={closeRoomList}\n            MenuListProps={{\n              'aria-labelledby': 'basic-button',\n            }}\n          >\n            {members.map((m) => (\n              <MenuItem key={m.jid}>{m.name}</MenuItem>\n            ))}\n            <Divider />\n            <MenuItem onClick={openAddUser}>Add</MenuItem>\n          </Menu>\n        </>}\n\n        <IconButton onClick={invite}>\n          <VideoCameraFrontIcon fontSize=\"inherit\" />\n        </IconButton>\n      </Stack>\n\n      <Stack sx={{ background: \"#eee\", flexGrow: 1, overflow: \"auto\", px: \"10%\" }} ref={scrollRef}>\n        {extendedMessages.map(m => <Chat key={m.id} message={m} client={client} isRoom={user.isRoom} />)}\n      </Stack>\n\n      <Stack direction=\"row\" sx={{ p: 1 }}>\n        <TextField\n          onChange={(e) => setMessage(e.target.value)}\n          value={message}\n          sx={{ flexGrow: 1 }}\n          placeholder=\"Send a message...\"\n          onKeyPress={(e) => e.key === 'Enter' && sendMessage() }\n          InputProps={{ endAdornment: <>\n            <IconButton style={{ flexShrink: \"0\" }} onClick={() => fileRef.current.click()}>\n              <AttachFileIcon fontSize=\"inherit\" />\n\n              <input\n                type=\"file\"\n                style={{ display: \"none\" }}\n                ref={fileRef}\n                onChange={attachFile}\n                />\n            </IconButton>\n\n            <Button onClick={sendMessage}>Send</Button>\n          </>}}\n        />\n      </Stack>\n    </Stack>\n  );\n};\n\nconst Chat = ({ message, client, isRoom }) => {\n  const mine = !message.from || message.from.includes(client.config.jid);\n\n  // if we're in a room, grab the user's jid from the `from` field\n  // if it's a direct chat, grab just the bare JID\n  // const jid = message.from?.split(\"/\")[isRoom ? 1 : 0];\n\n  return (\n    <Box\n      className={`chat-message ${mine ? \"mine\" : \"\"}`}\n      sx={{\n        background: mine ? blue[700] : \"white\",\n        color: mine ? \"white\" : \"black\",\n        p: 1.5,\n        mx: 2, my: 1,\n        borderRadius: 2,\n        marginLeft: mine ? \"auto\" : 0,\n        marginRight: mine ? 0 : \"auto\",\n      }}\n    >\n      <span style={{ fontSize: \"0.8em\" }}>\n        <b>{message.name}</b>\n          <span style={{ marginLeft: \"1em\", color: mine ? \"#eee\" : \"#666\" }}>{message.timestamp?.toLocaleString()}</span>\n      </span>\n      <br />\n      <Linkify componentDecorator={(decoratedHref, decoratedText, key) => (\n        <a target=\"blank\" href={decoratedHref} key={key} style={{ color: \"inherit\" }}>\n          {decoratedText}\n        </a>\n      )}>\n        {message.body}\n      </Linkify>\n    </Box>\n  );\n}\n\nasync function createMeeting(API_BASE, jwt) {\n  const url = `${API_BASE}/api/meeting`;\n  const mstart = parseInt(new Date().getTime() / 1000);\n\n  const formData = new FormData();\n  formData.append(\"name\", \"Instant Meeting\");\n  formData.append(\"mstart\", mstart.toString());\n  formData.append(\"duration\", \"3600\");\n\n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: jwt,\n    },\n    body: formData,\n  }).then(res => res.json());\n};\n\nconst AddUserToRoomPrompt = ({ open, close, allUsers, client, room }) => {\n  const [user, setUser] = useState(\"\");\n\n  const onAdd = () => {\n    const jid = `${user}@saas-msg.visionable.one`; // TODO: use constant\n    client.setRoomAffiliation(room.jid, jid, \"member\")\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add User to Room</DialogTitle>\n\n      <DialogContent>\n        <Autocomplete\n          sx={{ width: 400, my: 1 }}\n          onChange={(_, u) => u && setUser(u.id)}\n          options={allUsers.map(u => ({\n            label: `${u.name} (${u.user_email})`,\n            id: u.user_id,\n          }))}\n          renderInput={(params) => <TextField {...params} label=\"User\" />}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nconst upload = async (e, client) => {\n  return await Promise.all(Array.from(e.target.files).map(async (f) => {\n    const { name, size, type: mediaType } = f; // TODO files with spaces in name fail\n    // console.log('file', name, size, mediaType);\n    const service = await client.getUploadService();\n    // console.log('service', service);\n    const slot = await client.getUploadSlot(service.jid, { name, size, mediaType })\n    // console.log('slot', slot);\n    const { download: downloadUrl, upload: { url: uploadUrl } } = slot;\n    // console.log('got urls', downloadUrl, uploadUrl);\n    await fetch(uploadUrl, {\n      method: \"PUT\",\n      body: f,\n      headers: { \"x-amz-acl\": \"public-read\" },\n    });\n    // console.log('res', res);\n    return downloadUrl;\n  }));\n};\n\nexport default Message;\n","import { useState } from \"react\";\n\nimport {\n  Badge,\n  Box,\n  Button,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemButton,\n  Avatar,\n  ListItemText,\n  TextField,\n  Paper,\n  Stack,\n  Autocomplete,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tabs,\n  Tab\n} from \"@mui/material\";\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport AddIcon from '@mui/icons-material/Add';\nimport GroupsIcon from '@mui/icons-material/Groups';\n\nimport Message from './message';\n\nconst AddRoomPrompt = ({ open, close, add }) => {\n  const [roomName, setRoomName] = useState(\"\");\n\n  const onAdd = () => {\n    add(roomName);\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add Group</DialogTitle>\n\n      <DialogContent>\n        <TextField\n          sx={{ width: 400, my: 1 }}\n          onChange={(e) => setRoomName(e.target.value)}\n          label=\"Group name\"\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst AddContactPrompt = ({ open, close, add, allUsers }) => {\n  const [newContact, setNewContact] = useState(\"\");\n\n  const onAdd = () => {\n    add(newContact);\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add Contact</DialogTitle>\n\n      <DialogContent>\n        <Autocomplete\n          sx={{ width: 400, my: 1 }}\n          onChange={(_, u) => u && setNewContact(u.id)}\n          options={allUsers.map((u) => ({\n            label: userDisplayName(u),\n            id: u.user_id,\n          }))}\n          renderInput={(params) => <TextField {...params} label=\"User\" />}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n// TODO use teh name property\nconst userDisplayName = (u) => `${u.user_firstname} ${u.user_lastname} (${u.user_email})`;\n\nconst Roster = ({\n  roster,\n  client,\n  allUsers,\n  API_BASE,\n  MUC_LIGHT_HOSTNAME,\n  jwt,\n}) => {\n  const [search, setSearch] = useState(\"\");\n  const [subNav, setSubNav] = useState(null);\n  const [showAddContact, setShowAddContact] = useState(false);\n  const [showAddRoom, setShowAddRoom] = useState(false);\n  const [tab, setTab] = useState(0);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const showAddMenu = Boolean(anchorEl);\n\n  const openAddMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const closeAddMenu = () => {\n    setAnchorEl(null);\n  };\n\n  const addContact = (uuid) => {\n    const jid = `${uuid}@${client.config.server}`;\n    client.subscribe(jid);\n  }\n\n  // TODO: this will use the Room API in the future\n  const addRoom = async (name) => {\n    const uuid = crypto.randomUUID();\n    const jid = `${uuid}@${MUC_LIGHT_HOSTNAME}`;\n    const res = await client.joinRoom(jid);\n    client.configureRoom(jid, { fields: [ { name: 'roomname', value: name } ] });\n  }\n\n  // filter by search\n  const filteredRoster = roster.filter(r =>\n    r.name?.toLowerCase().includes(search.toLowerCase()) || r.jid?.includes(search))\n  .filter(r => (tab === 0 && !r.isRoom) || (tab === 1 && r.isRoom));\n\n  const allOtherUsers = allUsers.filter((u) => !client.config.jid.includes(u.user_id));\n\n  return (\n    <>\n      <AddContactPrompt\n        add={addContact}\n        close={() => setShowAddContact(false)}\n        open={showAddContact}\n        allUsers={allOtherUsers}\n      />\n\n      <AddRoomPrompt\n        add={addRoom}\n        close={() => setShowAddRoom(false)}\n        open={showAddRoom}\n      />\n\n      <Paper className=\"scroll-list-container\" sx={{ width: 300 }}>\n        <Box sx={{ px: 2 }}>\n          <Stack direction=\"row\" sx={{ alignItems: \"center\" }}>\n            <h2>Contacts</h2>\n\n            <IconButton sx={{ ml: \"auto\" }} onClick={openAddMenu}>\n              <AddIcon fontSize=\"inherit\" />\n            </IconButton>\n\n            <Menu\n              id=\"basic-menu\"\n              anchorEl={anchorEl}\n              open={showAddMenu}\n              onClose={closeAddMenu}\n              MenuListProps={{\n                'aria-labelledby': 'basic-button',\n              }}\n            >\n              <MenuItem onClick={() => { closeAddMenu(); setShowAddContact(true)}}>Add Contact</MenuItem>\n              <MenuItem onClick={() => { closeAddMenu(); setShowAddRoom(true)}}>Add Group</MenuItem>\n            </Menu>\n          </Stack>\n\n          <TextField\n            type=\"search\"\n            label=\"Search\"\n            variant=\"filled\"\n            size=\"small\"\n            fullWidth\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </Box>\n\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={tab} onChange={(_, idx) => setTab(idx)} aria-label=\"basic tabs example\">\n            <Tab label=\"Contacts\" index={0} />\n            <Tab label=\"Groups\" index={1} />\n          </Tabs>\n        </Box>\n\n        <List className=\"scroll-list\">\n          {filteredRoster.map((u) => {\n            const status = u.isRoom ? '' : u.status;\n            const color = {\n              available: \"#51b397\",\n              away: \"#f0a73e\",\n              unavailable: \"gray\",\n              \"in-meeting\": \"#ea3323\",\n            }[status] || \"gray\";\n\n            return (\n              <ListItem key={u.jid} disablePadding>\n                <ListItemButton onClick={() => setSubNav(u)}>\n                  <ListItemAvatar>\n                    <Badge\n                      componentsProps={{\n                        badge: {\n                          sx: {\n                            backgroundColor: color,\n                            border: \"2px solid white\",\n                            width: 14,\n                            height: 14,\n                            borderRadius: 7,\n                          },\n                        },\n                      }}\n                      overlap=\"circular\"\n                      badgeContent=\" \"\n                      invisible={u.isRoom}\n                      variant=\"dot\"\n                      anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'right',\n                      }}\n                    >\n                      <Avatar>\n                        {u.isRoom\n                          ? <GroupsIcon />\n                          : initials(u)}\n                      </Avatar>\n                    </Badge>\n                  </ListItemAvatar>\n\n                  <ListItemText\n                    primary={u.name}\n                    primaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                    secondary={u.user?.user_email}\n                    secondaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                    title={u.jid + (u.activity ? \" - \" + u.activity : \"\")}\n                    />\n                </ListItemButton>\n              </ListItem>\n            )})}\n        </List>\n      </Paper>\n\n      <Paper className=\"right-section\">\n        {subNav && <Message allUsers={allUsers} client={client} user={subNav} API_BASE={API_BASE} jwt={jwt} />}\n      </Paper>\n    </>\n  );\n};\n\n// TODO put this is allUsers state\nfunction initials(u) {\n  return u.name?.split(\" \")?.slice(0, 2)?.map(n => n.substr(0, 1));\n}\n\nexport default Roster;\n","import { useState } from 'react';\nimport {\n  Box,\n  Button,\n  TextField,\n  Paper,\n  Stack,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemAvatar,\n  ListItemText,\n  Avatar,\n  Autocomplete,\n} from \"@mui/material\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\n\nimport AddIcon from '@mui/icons-material/Add';\nimport GroupsIcon from '@mui/icons-material/Groups';\n\nimport Message from \"./message\";\n\nimport db from \"./db\";\n\nconst AddChatPrompt = ({ open, close, add, allUsers }) => {\n  const [newContact, setNewContact] = useState(\"\");\n\n  const onAdd = () => {\n    add(newContact);\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Find a User</DialogTitle>\n\n      <DialogContent>\n        <Autocomplete\n          sx={{ width: 400, my: 1 }}\n          onChange={(_, u) => u && setNewContact(u.id)}\n          options={allUsers.map(u => ({\n            label: userDisplayName(u),\n            id: u.user_id,\n          }))}\n          renderInput={(params) => <TextField {...params} label=\"User\" />}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n// TODO use the name property\nconst userDisplayName = (u) => `${u.user_firstname} ${u.user_lastname} (${u.user_email})`;\n\nconst Messages = ({ client, allUsers, roster, jwt, API_BASE }) => {\n  const [search, setSearch] = useState(\"\");\n  const [subNav, setSubNav] = useState(null);\n  const [showAddChat, setShowAddChat] = useState(false);\n\n  // pull out all of the unique IDs from all of the messages\n  const tos = useLiveQuery(() => db.messages.orderBy(\"to\").uniqueKeys()) || [];\n  const froms = useLiveQuery(() => db.messages.orderBy(\"from\").uniqueKeys()) || [];\n  const groups = useLiveQuery(() => db.messages.orderBy(\"group\").uniqueKeys()) || [];\n  const jids = tos.concat(froms).concat(groups)\n  .filter((v, i, a) => a.indexOf(v) === i) // all unique jids\n  .filter((jid) => jid !== client.config.jid); // that aren't you\n\n  const users = jids?.map(jid => { // add names\n    const user = allUsers.find((u) => jid.includes(u.user_id));\n    const name = user?.name // user names come from all users\n      || roster.find((r) => r.jid === jid)?.name // room names will be in your roster\n      || jid;\n    const isRoom = groups.includes(jid);\n\n    return { jid, user, name, isRoom };\n  });\n\n  const filteredUsers = users?.filter((u) => { // filter by search\n    const s = search.toLowerCase();\n    return u.name?.toLowerCase().includes(s)\n      || s.includes(u.name?.toLowerCase())\n      || u.user?.user_email?.includes(s)\n      || s.includes(u.user?.user_email);\n  });\n\n  const addChat = (uuid) => {\n    console.log(\"addChat\", uuid);\n    const jid = `${uuid}@${client.config.server}`;\n    console.log(\"jid\", jid);\n    // TODO\n  };\n\n  return (\n    <>\n      <AddChatPrompt\n        add={addChat}\n        close={() => setShowAddChat(false)}\n        open={showAddChat}\n        allUsers={allUsers}\n      />\n\n      <Paper className=\"scroll-list-container\" sx={{ width: 300 }}>\n        <Box sx={{ px: 2 }}>\n          <Stack direction=\"row\" sx={{ alignItems: \"center\" }}>\n            <h2>Chat</h2>\n            {/* <IconButton sx={{ ml: \"auto\" }} onClick={() => setShowAddChat(true)}> */}\n            {/*   <AddIcon fontSize=\"inherit\" /> */}\n            {/* </IconButton> */}\n          </Stack>\n\n          <TextField\n            type=\"search\"\n            label=\"Search\"\n            variant=\"filled\"\n            size=\"small\"\n            fullWidth\n            onChange={(e) => setSearch(e.target.value)}\n            />\n        </Box>\n\n        <List className=\"scroll-list\">\n          {filteredUsers.map((u) => (\n            <ListItem key={u.jid} disablePadding>\n              <ListItemButton onClick={() => setSubNav(u)}>\n                <ListItemAvatar>\n                  <Avatar>\n                    {u.isRoom\n                      ? <GroupsIcon />\n                      : initials(u)}\n                  </Avatar>\n                </ListItemAvatar>\n\n                <ListItemText\n                  primary={u.name}\n                  primaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  secondary={u.user?.user_email}\n                  secondaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  title={u.jid}\n                />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n\n      <Paper className=\"right-section\">\n        {subNav && <Message allUsers={allUsers} client={client} user={subNav} API_BASE={API_BASE} jwt={jwt} />}\n      </Paper>\n    </>\n  );\n};\n\n// TODO put this is allUsers state\nfunction initials(u) {\n  return u.name?.split(\" \")?.slice(0, 2)?.map(n => n.substr(0, 1));\n}\n\nexport default Messages;\n","import { Agent, JXT } from 'stanza';\nimport { IQ, ReceivedMessage } from 'stanza/protocol';\n\n// 1. Declare our new custom stanza extension type\nexport interface InboxMessage extends ReceivedMessage {\n  result?: InboxResult;\n}\n\nexport interface InboxResult {\n  forwarded?: InboxMessage;\n}\n\nexport interface InboxMessage {\n  message?: string;\n}\n\n// 2. Begin injecting our plugin's type information into StanzaJS.\ndeclare module 'stanza' {\n\n    // 3. Declare a new method for the StanzaJS agent\n    export interface Agent {\n        getInbox(): Promise<IQ>\n    }\n\n    // 4. Declare our event types. (Event names are the fields in AgentEvents.)\n    export interface AgentEvents {\n      inbox: InboxMessage;\n    }\n\n    // 5. Stanza definitions MUST be placed in the Stanzas namespace\n    namespace Stanzas {\n\n        // 6. Attach our new definition to Message stanzas\n        export interface Message {\n            result?: InboxResult;\n        }\n    }\n}\n\n\n// 7. Create a plugin function\nexport default function (client: Agent, stanzas: JXT.Registry) {\n\n    // 8. Create and register our custom stanza definition\n    stanzas.define({\n        element: 'result',\n        fields: {\n            unread: JXT.attribute('unread'),\n            queryid: JXT.attribute('queryid'),\n        },\n        namespace: 'erlang-solutions.com:xmpp:inbox:0',\n        path: 'message.result'\n    });\n\n    stanzas.define({\n        element: 'forwarded',\n        fields: {\n            unread: JXT.attribute('unread')\n        },\n        namespace: 'urn:xmpp:forward:0',\n        path: 'message.result.forwarded'\n    });\n\n    stanzas.define({\n        element: 'inbox',\n        fields: {\n            result: JXT.text()\n        },\n        namespace: 'erlang-solutions.com:xmpp:inbox:0',\n        path: 'iq.inbox'\n    });\n\n    // 9. Add API to the StanzaJS agent for sending\n    client.getInbox = () => {\n        return client.sendIQ({\n            type: 'set',\n            inbox: \"test\",\n        });\n    };\n\n    // 10. Listen for incoming inbox data and emit our own event\n    client.on('message', msg => {\n        if (msg.result) {\n            client.emit('inbox', msg);\n        }\n    });\n};\n","import { useState, useEffect, useContext } from \"react\";\nimport * as XMPP from \"stanza\";\n\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Snackbar,\n  Alert,\n} from \"@mui/material\";\n\nimport db from \"./db\";\nimport \"./App.css\";\nimport SideBar from \"./sidebar\";\nimport Roster from \"./roster\";\nimport Messages from \"./messages\";\n\nimport IqInbox from './inbox.ts';\n\nwindow.db = db;\n\nconst API_BASE = \"https://saas-api.visionable.one\";\nconst PROTOCOL = \"wss\";\nconst PORT = \"5443\";\nconst ENDPOINT = \"ws-xmpp\";\n\nconst resource = localStorage.getItem(\"xmpp-resource\") || crypto.randomUUID();\nlocalStorage.setItem(\"xmpp-resource\", resource);\n\nconst initXMPP = async (jid, password, hostname) =>\n  XMPP.createClient({\n    jid,\n    password,\n    resource,\n    transports: {\n      websocket: `${PROTOCOL}://${hostname}:${PORT}/${ENDPOINT}`,\n    },\n  });\n\nconst App = ({ signOutAWS, user }) => {\n  const [client, setClient] = useState(null);\n  const [jwt, setJwt] = useState(\"\");\n  const [roster, setRoster] = useState([]);\n  const [presence, setPresence] = useState({});\n  const [activities, setActivities] = useState({});\n  const [incomingInvites, setIncomingInvites] = useState([]);\n  const [inviteResponses, setInviteResponses] = useState({});\n  const [allUsers, setAllUsers] = useState([]);\n  const [nav, setNav] = useState(\"contacts\");\n  const [connected, setConnected] = useState(false);\n  const [server] = useState(\"saas.visionable.one\");\n\n  const [serviceName, ...[domain]] = server.split(/\\.(.*)/s); // split out the serviceName from the rest of the host\n  const xmppHostname = `${serviceName}-msg.${domain}`; // e.g. saas-msg.visionable.one\n  const mucHostname = `muclight.${xmppHostname}`; // e.g. muclight.saas-msg.visionable.one\n\n  const signIn = async () => {\n    if (client) {\n      return; // only sign in once\n    }\n\n    if (localStorage.getItem(\"username\") !== user.username) {\n      await db.messages.clear();\n    }\n    localStorage.setItem(\"username\", user.username);\n\n    try {\n      const { signInUserSession: session } = user;\n      const jwt = session.idToken.jwtToken;\n      setJwt(jwt);\n      const jid = `${user.username}@${xmppHostname}`;\n      const xmpp = await initXMPP(jid, jwt, xmppHostname);\n\n      xmpp.use(IqInbox);\n\n      setClient(xmpp);\n      setConnected(true);\n\n      const cognitoUsers = await getAllUsers(jwt);\n      const extendedUsers = cognitoUsers.map((u) => ({ ...u, name: userFullName(u) }));\n      setAllUsers(extendedUsers);\n\n      window.client = xmpp;\n\n      xmpp.on(\"session:started\", async () => {\n        xmpp.updateCaps();\n        xmpp.sendPresence({\n          legacyCapabilities: xmpp.disco.getCaps() // have to enable this to get PEP notifications\n        });\n        xmpp.enableKeepAlive();\n        xmpp.enableCarbons();\n\n        const roster = (await xmpp.getRoster()).items;\n        setRoster(roster);\n\n        // get \"inbox\"\n        // const res = await xmpp.getInbox();\n        // console.log(\"INBOX RES\", res);\n\n        // Get all of the messages up until the last one I've seen\n        const lastMessage = await db.messages.orderBy(\"timestamp\").last();\n        getAllMessages({ client: xmpp, start: lastMessage?.timestamp });\n      });\n\n      xmpp.on(\"message\", (message) => {\n        if (message.type === 'meeting-invite') {\n          setIncomingInvites((prev) => [...prev, message]);\n        } else if (message.type === \"chat\" || message.type === \"groupchat\") {\n          const [before, after] = message.from.split(\"/\");\n          const group = message.type === \"chat\" ? null : before;\n          const from = message.type === \"chat\" ? before : after;\n\n          db.messages.put({\n            id: message.id,\n            from,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group,\n            timestamp: new Date(),\n          }, message.id)\n        }\n      });\n\n      xmpp.on(\"message:sent\", (message) => {\n        if (message.type === 'meeting-invite') {\n          // TODO: display something in the chat\n        } else if (message.type === \"chat\") {\n          // TODO: until acked, put a pending status\n          db.messages.put({\n            id: message.id,\n            from: xmpp.config.jid,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group: null,\n            timestamp: new Date(),\n          }, message.id)\n        }\n      });\n\n      xmpp.on(\"mam:item\", (mam) => {\n        const message = mam.archive?.item?.message;\n        const timestamp = mam.archive?.item?.delay?.timestamp;\n        if (message.type === \"chat\" || message.type === \"groupchat\") {\n          const [before, after] = message.from.split(\"/\");\n          const group = message.type === \"chat\" ? null : before;\n          const from = message.type === \"chat\" ? before : after;\n\n          db.messages.put({\n            id: message.id,\n            from,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group,\n            timestamp: new Date(),\n          }, message.id)\n        }\n      });\n\n      xmpp.on(\"inbox\", (msg) => {\n        const timestamp = msg.result?.forwarded?.delay?.stamp;\n        const message = msg.result?.forwarded?.message;\n        console.log(\"inbox message\", message)\n\n        if (!message) { return; }\n        const { to } = message;\n\n        if (message.type === \"chat\") {\n          const [from] = message.from.split(\"/\");\n\n          db.messages.put({\n            id: message.id,\n            from,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group: null,\n            timestamp,\n          }, message.id)\n        } else if (message.type === \"groupchat\") {\n\n        }\n      });\n\n      xmpp.on(\"subscribe\", (data) => { // if someone subscribes to us..\n        xmpp.acceptSubscription(data.from); // auto accept\n        xmpp.subscribe(data.from);\n      });\n\n      xmpp.on(\"unsubscribe\", () => { // if someone removes me from their roster\n        // xmpp.unsubscribe(data.from); // remove them from ours?\n      });\n\n      xmpp.on(\"roster:update\", async (data) => { // roster item change\n        data.roster.items.forEach((r) => {\n          xmpp.searchHistory({ with: r.jid, paging: { before: \"\" }}); // get the last few messages\n        });\n\n        setRoster((await xmpp.getRoster()).items)\n      });\n\n      // if someone adds you to a room, auto accept it\n      xmpp.on(\"muc:invite\", (data) => {\n        client.joinRoom(data.room);\n      });\n\n      // created or added to a room\n      xmpp.on(\"muc:available\", async () =>\n        setRoster((await xmpp.getRoster()).items)\n      );\n\n      // no longer in a room\n      xmpp.on(\"muc:unavailable\", async () =>\n        setRoster((await xmpp.getRoster()).items)\n      );\n\n      xmpp.on(\"presence\", (data) => {\n        setPresence((prev) => ({ ...prev, [data.from]: data }))\n      });\n\n      xmpp.on(\"activity\", (data) => {\n        const { jid, activity: { text } } = data;\n        console.log(\"ACTIVITY\", jid, text);\n        setActivities((prev) => ({ ...prev, [jid]: text }));\n      });\n\n      xmpp.on(\"*\", async (type, data) => {\n        console.log(type, data);\n      });\n\n      // on disconnect, retry\n      xmpp.on(\"disconnected\", () => {\n        console.log(\"DISCONNECTED\");\n        setConnected(false);\n        // setTimeout(xmpp.connect, 3000)\n      })\n\n      xmpp.on(\"connected\", () => {\n        setConnected(true);\n      })\n\n      xmpp.connect();\n\n      window.addEventListener('beforeunload', function(event) {\n        console.log('window.beforeunload');\n        xmpp.disconnect();\n      });\n    } catch (e) {\n      console.error(\"caught\", e);\n    }\n  };\n\n  useEffect(signIn, [user]);\n\n  // extend the roster with info from the User API, presence, etc.\n  const extendedRoster = roster.map(r => {\n    const user = allUsers.find(u => r.jid.includes(u.user_id));\n    const name = r.name // if the roster item has a name\n      ? r.name // use that\n      : user // otherwise, if there's a corresponding user from the User API\n        ? userFullName(user) // get the name of that\n        : r.jid;// otherwise, just show their JID\n\n    // grab all of the resources that we've been given presence for this user\n    const statuses = Object.values(presence)\n      .filter((u) => u.from.includes(r.jid))\n      .filter((u) => u.type !== 'unavailable')\n      .map((u) => u.status || 'available');\n\n    const status = statuses.length === 0 // if they have no resources online\n      ? 'unavailable' // they're unavailable\n      : statuses.some((s) => s === 'in-meeting') // if _any_ resource is in a meeting\n        ? 'in-meeting' // show in-meeting\n        : statuses.every((s) => s === 'away') // if _all_ of their resources are away\n          ? 'away' // show away\n          : statuses.every((s) => s === 'available') // if _all_ of their resources are available\n            ? 'available' // show available\n            : 'available'; // otherwise, if they have other online resources, show available\n\n    return {\n      ...r,\n      user,\n      name,\n      status,\n      statuses,\n      activity: activities[r.jid],\n      isRoom: !!r.groups?.[0]?.includes(\"muc\"),\n    };\n  });\n  window.presence = presence;\n  window.roster = extendedRoster;\n  window.activities = activities;\n\n  console.log('new presence list', presence);\n  console.log(\"extended roster\", extendedRoster);\n\n  // find my own user from the User API\n  const me = allUsers.find((u) => client.jid.match(u.user_id)) || {};\n\n  const reconnect = async () => {\n    console.log(\"reconnecting\");\n    // client.config.credentials.password = user.signInUserSession.idToken.jwtToken;\n    client.updateConfig({ ...(client.config.credentials), password: user.signInUserSession.idToken.jwtToken });\n    client.connect();\n  };\n\n  const signOut = async () => {\n    client.disconnect();\n    setConnected(false);\n    setRoster([]);\n    setPresence({});\n    db.messages.clear();\n    localStorage.removeItem(\"visionable-xmpp-hostname\"); // grab this from context\n    signOutAWS();\n  };\n\n  const acceptInvite = (message) => {\n    setInviteResponses((prev) => ({ ...prev, [message.id]: \"accept\" }))\n    client.sendMessage({ to: message.from, body: message.id, type: 'meeting-invite-accept' });\n  };\n\n  const rejectInvite = (message) => {\n    setInviteResponses((prev) => ({ ...prev, [message.id]: \"reject\" }))\n    client.sendMessage({ to: message.from, body: message.id, type: 'meeting-invite-reject' });\n  };\n\n  /*\n  const changeName = () => {\n    client.publishVCard({ fullName: newName });\n  };\n\n  const getVCard = async () => {\n    try {\n      const card = await client.getVCard(jid);\n      console.log(\"my card\", card);\n      setNewName(card?.fullName);\n    } catch (e) {\n      console.error(\"Error getting vcard\", e);\n    }\n  };\n\n  const getMUCLightRooms = async () => {\n    const res = await client.getDiscoItems(MUC_LIGHT_HOSTNAME);\n  }\n*/\n\n  if (!client) {\n    return (\n      <div className=\"App\">Loading</div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <SideBar nav={nav} setNav={setNav} signOut={signOut} client={client} me={me} />\n\n      <Snackbar\n        onClick={reconnect}\n        open={!connected}\n        anchorOrigin={{ horizontal: \"center\", vertical: \"bottom\" }}\n        sx={{ cursor: \"pointer\" }}\n      >\n        <Alert severity=\"error\" sx={{ width: '100%' }}>Disconnected. Click here to reconnect</Alert>\n      </Snackbar>\n\n      <IncomingInvites\n        accept={acceptInvite}\n        reject={rejectInvite}\n        invites={incomingInvites}\n        responses={inviteResponses} />\n\n      <Box className=\"main\">\n        {nav === 'contacts'\n          ? <Roster\n            roster={extendedRoster}\n            // presence={presence}\n            allUsers={allUsers}\n            client={client}\n            API_BASE={API_BASE}\n            MUC_LIGHT_HOSTNAME={mucHostname}\n            jwt={jwt}\n            />\n          : nav === 'messages'\n            ? <Messages\n              roster={extendedRoster}\n              // presence={presence}\n              allUsers={allUsers}\n              client={client}\n              API_BASE={API_BASE}\n              MUC_LIGHT_HOSTNAME={mucHostname}\n              jwt={jwt}\n              />\n            : null}\n      </Box>\n    </div>\n  );\n};\n\nconst IncomingInvites = ({ accept, reject, invites, responses }) =>\n  invites.filter((m) => !responses[m.id]).map((m) => (\n    <Dialog key={m.id} open={true}>\n      <DialogTitle>Meeting Invite</DialogTitle>\n      <DialogContent>\n        <p>Invite ID: {m.id}</p>\n        <p>From: {m.from}</p>\n        <p>Meeting ID: {m.body}</p>\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"error\" onClick={() => reject(m)}>Reject</Button>\n        <Button onClick={() => accept(m)}>Accept</Button>\n      </DialogActions>\n    </Dialog>\n  ));\n\nconst getAllUsers = async (jwt) => {\n  const res = await fetch(`${API_BASE}/api/user`, { headers: { Authorization: jwt } });\n  return res.ok ? res.json() : [];\n}\n\nfunction userFullName(user) {\n  return user?.name\n  ? user.name\n    : user?.user_displayname\n      ? user.user_displayname\n      : user?.user_firstname\n        ? `${user.user_firstname} ${user.user_lastname}`\n        : \"[No Name]\";\n}\n\nasync function getAllMessages({ client, start, after }) {\n  const paging = after ? { after } : {};\n  const { complete, paging: { last } } = await client.searchHistory({ start, paging });\n\n  if (!complete) {\n    getAllMessages({ client, after: last });\n  }\n}\n\nexport default App;\n","import React, { useState, useEffect, createContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nimport Amplify from \"aws-amplify\";\nimport { Authenticator } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\nconst Context = createContext({});\n\nconst HOSTNAME_KEY = \"visionable-xmpp-hostname\";\nconst lastHostname = localStorage.getItem(HOSTNAME_KEY);\nconst hostname = lastHostname || prompt(\"Enter hostname\", \"saas.visionable.one\");\nlocalStorage.setItem(HOSTNAME_KEY, hostname);\n\nconst AppContainer = () => {\n  const [config, setConfig] = useState(null);\n\n  const configure = async () => {\n    const json = await getServiceConfig(hostname)\n\n    Amplify.configure({\n      Auth: {\n        region: json['aws-region'],\n        userPoolId: json['aws-user-pool-id'],\n        userPoolWebClientId: json['aws-user-pool-client-id'],\n      },\n    });\n\n    setConfig(json);\n  };\n\n  useEffect(() => configure(), []);\n\n  const value = {\n    HOSTNAME_KEY\n  };\n\n  return !config\n    ? null\n    : (\n      <Context.Provider value={value}>\n        <Authenticator>\n          {({ signOut, user }) => (\n            <App signOutAWS={signOut} user={user} />\n          )}\n        </Authenticator>\n      </Context.Provider>\n    );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nasync function getServiceConfig(hostname) {\n  try {\n    const res = await fetch(`https://${hostname}/config.json`, { mode: \"cors\" });\n    return await res.json();\n  } catch(e) {\n    console.log(e);\n    alert(\"Error requesting configuration data for this service\");\n    localStorage.removeItem(HOSTNAME_KEY);\n    window.location.reload();\n  }\n}\n"],"sourceRoot":""}