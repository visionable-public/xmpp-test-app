{"version":3,"sources":["login.js","profile.js","sidebar.js","message.js","roster.js","messages.js","App.js","index.js"],"names":["LoginView","loading","username","onChangeUsername","password","onChangePassword","error","signIn","Stack","spacing","sx","width","maxWidth","my","mx","TextField","label","disabled","onChange","value","onKeyDown","e","key","type","helperText","Button","variant","onClick","Profile","client","me","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","statusList","color","icon","Circle","ListItem","disablePadding","ListItemIcon","IconButton","event","currentTarget","ml","Avatar","height","ListItemText","primary","name","primaryTypographyProps","textOverflow","overflow","whiteSpace","secondary","user_email","secondaryTypographyProps","title","config","jid","Menu","id","onClose","PaperProps","elevation","filter","mt","mr","content","display","position","top","right","bgcolor","transform","zIndex","transformOrigin","horizontal","vertical","anchorOrigin","MenuItem","Divider","map","s","status","sendPresence","fontSize","items","route","iconComponent","ContactsIcon","ChatIcon","SideBar","setNav","nav","signOut","List","flexDirection","minWidth","background","i","IconComponent","ListItemButton","Logout","Chat","message","mine","isRoom","from","includes","Box","className","blue","p","borderRadius","marginLeft","marginRight","body","createMeeting","API_BASE","jwt","a","url","mstart","parseInt","Date","getTime","formData","FormData","append","toString","fetch","method","headers","Authorization","then","res","json","AddUserToRoomPrompt","close","allUsers","room","user","setUser","Dialog","DialogTitle","DialogContent","Autocomplete","_","u","options","user_id","renderInput","params","DialogActions","setRoomAffiliation","Message","messages","members","setMembers","setMessage","showAddUserToRoom","setShowAddUserToRoom","scrollRef","useRef","roomListAnchorEl","setRoomListAnchorEl","showRoomList","filteredMessages","m","to","removeContact","leaveRoom","removeRosterItem","unsubscribe","sendMessage","invite","console","log","uuid","memberList","getRoomMembers","muc","users","find","target","closeRoomList","useEffect","current","scrollTop","scrollHeight","flexGrow","direction","px","alignItems","MenuListProps","ref","placeholder","onKeyPress","InputProps","endAdornment","AddRoomPrompt","add","roomName","setRoomName","AddContactPrompt","newContact","setNewContact","userDisplayName","user_firstname","user_lastname","initials","split","slice","n","substr","Roster","roster","MUC_LIGHT_HOSTNAME","search","setSearch","subNav","setSubNav","showAddContact","setShowAddContact","showAddRoom","setShowAddRoom","showAddMenu","closeAddMenu","addRoom","crypto","randomUUID","joinRoom","configureRoom","fields","filteredRoster","r","toLowerCase","chatMessages","server","subscribe","Paper","size","fullWidth","ListItemAvatar","Messages","filteredUsers","Object","entries","ms","HOSTNAME","Amplify","configure","Auth","region","userPoolId","userPoolWebClientId","resource","localStorage","getItem","setItem","initXMPP","XMPP","transports","websocket","IncomingInvites","accept","reject","invites","responses","getAllUsers","ok","userFullName","user_displayname","App","setClient","setUsername","setPassword","setJid","setJwt","online","setOnline","setRoster","presence","setPresence","incomingInvites","setIncomingInvites","inviteResponses","setInviteResponses","setLoading","setError","setAllUsers","setMessages","setRoomMessages","connected","setConnected","session","signInUserSession","window","idToken","jwtToken","xmpp","cognitoUsers","extendedUsers","on","enableKeepAlive","enableCarbons","getRoster","forEach","searchHistory","with","paging","before","prev","mam","archive","item","data","acceptSubscription","connect","Hub","listen","payload","currentSession","credentials","extendedRoster","resources","values","groups","match","reconnect","disconnect","Snackbar","cursor","Alert","severity","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.961aae67.chunk.js","sourcesContent":["import {\n  Button,\n  TextField,\n  Stack\n} from \"@mui/material\";\n\nconst LoginView = ({\n  loading,\n  username,\n  onChangeUsername,\n  password,\n  onChangePassword,\n  error,\n  signIn\n  }) => (\n  <Stack spacing={3} sx={{ width: \"400px\", maxWidth: \"100%\", my: 3, mx: \"auto\" }}>\n    <TextField label=\"Username\" disabled={loading} onChange={onChangeUsername} value={username} error={!!error} />\n\n    <TextField label=\"Password\" disabled={loading} onKeyDown={(e) => e.key === \"Enter\" && signIn()} type=\"password\" onChange={onChangePassword} value={password} error={!!error} helperText={error && \"Invalid credentials\"} />\n\n    <Button variant=\"contained\" disabled={loading} onClick={signIn}> Sign in </Button>\n  </Stack>\n);\n\nexport default LoginView;\n","import { useState } from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport Settings from '@mui/icons-material/Settings';\nimport Logout from '@mui/icons-material/Logout';\nimport Circle from '@mui/icons-material/Circle';\n\nconst Profile = ({ client, me }) => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const setStatus = (status) => {\n    client.sendPresence({ status });\n  };\n\n  const statusList = [\n    {\n      key: \"available\",\n      color: \"#53b397\",\n      label: \"Available\",\n      icon: Circle,\n    },\n    {\n      key: \"in-meeting\",\n      color: \"#ea3323\",\n      label: \"In a meeting\",\n      icon: Circle,\n    },\n    {\n      key: \"away\",\n      color: \"#f0a73e\",\n      label: \"Away\",\n      icon: Circle,\n    },\n  ]\n\n  return (\n    <>\n      <ListItem disablePadding>\n        <ListItemIcon>\n          <IconButton onClick={handleClick} sx={{ ml: 0.5 }}>\n            <Avatar sx={{ width: 32, height: 32 }}>M</Avatar>\n          </IconButton>\n        </ListItemIcon>\n\n        <ListItemText\n          primary={me.name}\n          primaryTypographyProps={{ color: \"white\", textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n          secondary={me.user_email}\n          secondaryTypographyProps={{ color: \"white\", textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n          title={client.config.jid}\n        />\n      </ListItem>\n\n      <Menu\n        anchorEl={anchorEl}\n        id=\"account-menu\"\n        open={open}\n        onClose={handleClose}\n        onClick={handleClose}\n        PaperProps={{\n          elevation: 0,\n          sx: {\n            overflow: 'visible',\n            filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))',\n            mt: 1.5,\n            '& .MuiAvatar-root': {\n              width: 32,\n              height: 32,\n              ml: -0.5,\n              mr: 1,\n            },\n            '&:before': {\n              content: '\"\"',\n              display: 'block',\n              position: 'absolute',\n              top: 0,\n              right: 14,\n              width: 10,\n              height: 10,\n              bgcolor: 'background.paper',\n              transform: 'translateY(-50%) rotate(45deg)',\n              zIndex: 0,\n            },\n          },\n        }}\n        transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n      >\n        <MenuItem>\n          <Avatar /> Profile\n        </MenuItem>\n\n        <Divider />\n\n        {statusList.map((s) => (\n          <MenuItem key={s.key} onClick={() => setStatus(s.key)}>\n            <ListItemIcon>\n              <Circle fontSize=\"small\" sx={{ color: s.color }} />\n            </ListItemIcon>\n\n            <ListItemText primary={s.label} />\n          </MenuItem>\n        ))}\n\n        <Divider />\n\n        <MenuItem>\n          <ListItemIcon>\n            <Settings fontSize=\"small\" />\n          </ListItemIcon>\n          Settings\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <Logout fontSize=\"small\" />\n          </ListItemIcon>\n          Logout\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\n\nexport default Profile;\n","import {\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n} from \"@mui/material\";\n\nimport {\n  Contacts as ContactsIcon,\n  Chat as ChatIcon,\n  Logout as LogoutIcon,\n} from \"@mui/icons-material\";\n\nimport Profile from './profile';\n\nconst items = [\n  {\n    route: \"contacts\",\n    label: \"Contacts\",\n    iconComponent: ContactsIcon,\n  },\n  {\n    route: \"messages\",\n    label: \"Messages\",\n    iconComponent: ChatIcon,\n  },\n]\n\nconst SideBar = ({ client, me, setNav, nav, signOut }) => (\n  <List sx={{\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"200px\",\n    minWidth: \"200px\",\n    background: \"#091c38\",\n    color: \"white\"\n  }}>\n    <Profile client={client} me={me} />\n\n    {items.map(i => {\n      const IconComponent = i.iconComponent;\n\n      return (\n        <ListItem key={i.route} disablePadding sx={{ background: nav === i.route ? 'rgba(255,255,255,0.1)' : 'transparent' }}>\n          <ListItemButton onClick={() => setNav(i.route)}>\n            <ListItemIcon>\n              <IconComponent sx={{ color: \"white\" }} />\n            </ListItemIcon>\n\n            <ListItemText>\n              {i.label}\n            </ListItemText>\n          </ListItemButton>\n        </ListItem>\n      )})}\n\n    <ListItem disablePadding sx={{ mt: \"auto\" }}>\n      <ListItemButton onClick={signOut}>\n        <ListItemIcon>\n          <LogoutIcon sx={{ color: \"white\" }} />\n        </ListItemIcon>\n\n        <ListItemText>\n          Log Out\n        </ListItemText>\n      </ListItemButton>\n    </ListItem>\n  </List>\n);\n\nexport default SideBar;\n","import {\n  Box,\n  Button,\n  Stack,\n  TextField,\n  IconButton,\n  Autocomplete,\n  Menu,\n  MenuItem,\n  Divider,\n} from \"@mui/material\";\nimport { useState, useEffect, useRef } from \"react\";\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport GroupAddIcon from '@mui/icons-material/GroupAdd';\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport VideoCameraFrontIcon from '@mui/icons-material/VideoCameraFront';\n\nimport { blue } from \"@mui/material/colors\";\n\nconst Message = ({ client, user, messages, API_BASE, jwt, allUsers }) => {\n  const [members, setMembers] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [showAddUserToRoom, setShowAddUserToRoom] = useState(false);\n  const scrollRef = useRef(null);\n\n  const [roomListAnchorEl, setRoomListAnchorEl] = useState(null);\n  const showRoomList = Boolean(roomListAnchorEl);\n\n  const filteredMessages = messages.filter(m => m.from?.includes(user.jid) || m.to?.includes(user.jid));\n\n  const removeContact = async () => {\n    if (user.isRoom) {\n      // TODO: bare jid\n      await client.setRoomAffiliation(user.jid, client.jid, \"none\");\n      await client.leaveRoom(user.jid);\n    } else {\n      await client.removeRosterItem(user.jid);\n      await client.unsubscribe(user.jid);\n    }\n  };\n\n  const sendMessage = () => {\n    if (!message) {\n      return;\n    }\n\n    const type = user.isRoom ? 'groupchat' : 'chat';\n    client.sendMessage({ to: user.jid, body: message, type });\n    setMessage(\"\");\n  };\n\n  const invite = async () => {\n    const body = await createMeeting(API_BASE, jwt);\n    console.log(\"body\", body);\n    if (body.uuid) {\n      client.sendMessage({ to: user.jid, body: body.uuid, type: 'meeting-invite' });\n    }\n  };\n\n  const memberList = async (event) => {\n    const res = await client.getRoomMembers(user.jid);\n\n    setMembers(res.muc.users.map((m) => ({\n      ...m,\n      name: allUsers.find((u) => m.jid.includes(u.user_id))?.name,\n    })));\n\n    setRoomListAnchorEl(event.target);\n  };\n\n  const closeRoomList = () => setRoomListAnchorEl(null);\n  const openAddUser = () => {\n    closeRoomList();\n    setShowAddUserToRoom(true);\n  }\n\n  useEffect(() => {\n    scrollRef.current.scrollTop = scrollRef?.current?.scrollHeight;\n  }, [filteredMessages]);\n\n  return (\n    <Stack sx={{ flexGrow: 1 }}>\n      <AddUserToRoomPrompt\n        client={client}\n        room={user}\n        open={showAddUserToRoom}\n        close={() => setShowAddUserToRoom(false) }\n        allUsers={allUsers}\n      />\n\n      <Stack direction=\"row\" sx={{ px: 2, background: \"white\", alignItems: \"center\" }}>\n        <h2>{user.name}</h2>\n\n        <IconButton sx={{ ml: \"auto\" }} onClick={removeContact}>\n          <DeleteIcon fontSize=\"inherit\" />\n        </IconButton>\n\n        {user.isRoom && <>\n          <IconButton onClick={memberList}>\n            <GroupAddIcon fontSize=\"inherit\" />\n          </IconButton>\n\n          <Menu\n            id=\"basic-menu\"\n            anchorEl={roomListAnchorEl}\n            open={showRoomList}\n            onClose={closeRoomList}\n            MenuListProps={{\n              'aria-labelledby': 'basic-button',\n            }}\n          >\n            {members.map((m) => (\n              <MenuItem key={m.jid}>{m.name}</MenuItem>\n            ))}\n            <Divider />\n            <MenuItem onClick={openAddUser}>Add</MenuItem>\n          </Menu>\n        </>}\n\n        <IconButton onClick={invite}>\n          <VideoCameraFrontIcon fontSize=\"inherit\" />\n        </IconButton>\n      </Stack>\n\n      <Stack sx={{ background: \"#eee\", flexGrow: 1, overflow: \"auto\", px: \"10%\" }} ref={scrollRef}>\n        {filteredMessages.map(m => <Chat key={m.id} message={m} client={client} isRoom={user.isRoom} />)}\n      </Stack>\n\n      <Stack direction=\"row\" sx={{ p: 1 }}>\n        <TextField\n          onChange={(e) => setMessage(e.target.value)}\n          value={message}\n          sx={{ flexGrow: 1 }}\n          placeholder=\"Send a message...\"\n          onKeyPress={(e) => e.key === 'Enter' && sendMessage() }\n          InputProps={{ endAdornment: <Button onClick={sendMessage}>Send</Button> }}\n        />\n\n        {/* <Button variant=\"primary\" onClick={sendMessage}>Send</Button> */}\n      </Stack>\n    </Stack>\n  );\n};\n\nconst Chat = ({ message, client, isRoom }) => {\n  const mine = !message.from || message.from.includes(client.config.jid);\n\n  // if we're in a room, grab the user's jid from the `from` field\n  // if it's a direct chat, grab just the bare JID\n  // const jid = message.from?.split(\"/\")[isRoom ? 1 : 0];\n\n  return (\n    <Box\n      className={`chat-message ${mine ? \"mine\" : \"\"}`}\n      sx={{\n        background: mine ? blue[700] : \"white\",\n        color: mine ? \"white\" : \"black\",\n        p: 2,\n        mx: 2, my: 1,\n        borderRadius: 3,\n        marginLeft: mine ? \"auto\" : 0,\n        marginRight: mine ? 0 : \"auto\",\n      }}\n    >\n      {message.body}\n    </Box>\n  );\n}\n\nasync function createMeeting(API_BASE, jwt) {\n  const url = `${API_BASE}/api/meeting`;\n  const mstart = parseInt(new Date().getTime() / 1000);\n\n  const formData = new FormData();\n  formData.append(\"name\", \"Instant Meeting\");\n  formData.append(\"mstart\", mstart.toString());\n  formData.append(\"duration\", \"3600\");\n\n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: jwt,\n    },\n    body: formData,\n  }).then(res => res.json());\n};\n\nconst AddUserToRoomPrompt = ({ open, close, allUsers, client, room }) => {\n  const [user, setUser] = useState(\"\");\n\n  const onAdd = () => {\n    const jid = `${user}@saas-msg.visionable.one`; // TODO: use constant\n    client.setRoomAffiliation(room.jid, jid, \"member\")\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add User to Room</DialogTitle>\n\n      <DialogContent>\n        <Autocomplete\n          sx={{ width: 400, my: 1 }}\n          onChange={(_, u) => u && setUser(u.id)}\n          options={allUsers.map(u => ({\n            label: `${u.name} (${u.user_email})`,\n            id: u.user_id,\n          }))}\n          renderInput={(params) => <TextField {...params} label=\"User\" />}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default Message;\n","import { useState } from \"react\";\n\nimport {\n  Box,\n  Button,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemButton,\n  Avatar,\n  ListItemText,\n  TextField,\n  Paper,\n  Stack,\n  Autocomplete,\n  IconButton,\n  Menu,\n  MenuItem,\n} from \"@mui/material\";\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport AddIcon from '@mui/icons-material/Add';\nimport GroupsIcon from '@mui/icons-material/Groups';\n\nimport Message from './message';\n\nconst AddRoomPrompt = ({ open, close, add }) => {\n  const [roomName, setRoomName] = useState(\"\");\n\n  const onAdd = () => {\n    add(roomName);\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add Room</DialogTitle>\n\n      <DialogContent>\n        <TextField\n          sx={{ width: 400, my: 1 }}\n          onChange={(e) => setRoomName(e.target.value)}\n          label=\"Room name\"\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst AddContactPrompt = ({ open, close, add, allUsers }) => {\n  const [newContact, setNewContact] = useState(\"\");\n\n  const onAdd = () => {\n    add(newContact);\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add Contact</DialogTitle>\n\n      <DialogContent>\n        <Autocomplete\n          sx={{ width: 400, my: 1 }}\n          onChange={(_, u) => u && setNewContact(u.id)}\n          options={allUsers.map(u => ({\n            label: userDisplayName(u),\n            id: u.user_id,\n          }))}\n          renderInput={(params) => <TextField {...params} label=\"User\" />}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n// TODO use teh name property\nconst userDisplayName = (u) => `${u.user_firstname} ${u.user_lastname} (${u.user_email})`;\n\nconst Roster = ({\n  roster,\n  // presence,\n  messages,\n  client,\n  allUsers,\n  API_BASE,\n  MUC_LIGHT_HOSTNAME,\n  jwt,\n}) => {\n  const [search, setSearch] = useState(\"\");\n  const [subNav, setSubNav] = useState(null);\n  const [showAddContact, setShowAddContact] = useState(false);\n  const [showAddRoom, setShowAddRoom] = useState(false);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const showAddMenu = Boolean(anchorEl);\n\n  const openAddMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const closeAddMenu = () => {\n    setAnchorEl(null);\n  };\n\n  const addContact = (uuid) => {\n    const jid = `${uuid}@${client.config.server}`;\n    client.subscribe(jid);\n  }\n\n  // TODO: this will use the Room API in the future\n  const addRoom = async (name) => {\n    const uuid = crypto.randomUUID();\n    const jid = `${uuid}@${MUC_LIGHT_HOSTNAME}`;\n    const res = await client.joinRoom(jid);\n    console.log(\"created room!\", res);\n    client.configureRoom(jid, { fields: [ { name: 'roomname', value: name } ] });\n  }\n\n  // filter by search\n  const filteredRoster = roster.filter(r =>\n    r.name?.toLowerCase().includes(search.toLowerCase()) || r.jid?.includes(search));\n\n  const chatMessages = subNav && messages[subNav.jid]\n    ? messages[subNav.jid]\n    : [];\n\n  return (\n    <>\n      <AddContactPrompt\n        add={addContact}\n        close={() => setShowAddContact(false)}\n        open={showAddContact}\n        allUsers={allUsers}\n      />\n\n      <AddRoomPrompt\n        add={addRoom}\n        close={() => setShowAddRoom(false)}\n        open={showAddRoom}\n      />\n\n      <Paper className=\"scroll-list-container\" sx={{ width: 300 }}>\n        <Box sx={{ px: 2 }}>\n          <Stack direction=\"row\" sx={{ alignItems: \"center\" }}>\n            <h2>Contacts</h2>\n\n            <IconButton sx={{ ml: \"auto\" }} onClick={openAddMenu}>\n              <AddIcon fontSize=\"inherit\" />\n            </IconButton>\n\n            <Menu\n              id=\"basic-menu\"\n              anchorEl={anchorEl}\n              open={showAddMenu}\n              onClose={closeAddMenu}\n              MenuListProps={{\n                'aria-labelledby': 'basic-button',\n              }}\n            >\n              <MenuItem onClick={() => { closeAddMenu(); setShowAddContact(true)}}>Add Contact</MenuItem>\n              <MenuItem onClick={() => { closeAddMenu(); setShowAddRoom(true)}}>Add Room</MenuItem>\n            </Menu>\n          </Stack>\n\n          <TextField\n            type=\"search\"\n            label=\"Search\"\n            variant=\"filled\"\n            size=\"small\"\n            fullWidth\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </Box>\n\n        <List className=\"scroll-list\">\n          {filteredRoster.map((u) => (\n            <ListItem key={u.jid} disablePadding>\n              <ListItemButton onClick={() => setSubNav(u)}>\n                <ListItemAvatar>\n                  <Avatar>\n                    {u.isRoom\n                      ? <GroupsIcon />\n                      : initials(u)}\n                  </Avatar>\n                </ListItemAvatar>\n\n                <ListItemText\n                  primary={u.name}\n                  primaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  secondary={u.user?.user_email}\n                  secondaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  title={u.jid}\n                />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n\n      <Paper className=\"right-section\">\n        {subNav && <Message allUsers={allUsers} client={client} user={subNav} messages={chatMessages} API_BASE={API_BASE} jwt={jwt} />}\n      </Paper>\n    </>\n  );\n};\n\n// TODO put this is allUsers state\nfunction initials(u) {\n  return u.name?.split(\" \")?.slice(0, 2)?.map(n => n.substr(0, 1));\n}\n\nexport default Roster;\n","import { useState } from 'react';\nimport {\n  Box,\n  TextField,\n  Paper,\n  Stack,\n  // Divider,\n  // Dialog,\n  // DialogTitle,\n  // DialogContent,\n  // DialogActions,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemAvatar,\n  ListItemText,\n  Avatar,\n  // Autocomplete,\n} from \"@mui/material\";\n\nimport GroupsIcon from '@mui/icons-material/Groups';\n\nimport Message from \"./message\";\n\nconst Messages = ({ client, allUsers, roster, messages, jwt, API_BASE }) => {\n  const [search, setSearch] = useState(\"\");\n  const [subNav, setSubNav] = useState(null);\n\n  console.log(\"messages\", messages);\n\n  const users = Object.entries(messages).map(([jid, ms]) => { // generate the list of message \"users\"\n    const user = allUsers.find((u) => jid.includes(u.user_id)); // user names come from all users\n    const name = user?.name || roster.find((r) => r.jid === jid)?.name; // room names will be in your roster\n\n    return {\n      jid,\n      user,\n      name,\n      messages: ms,\n    };\n  });\n\n  const filteredUsers = users.filter((u) => { // filter by search\n    const s = search.toLowerCase();\n    return u.name.toLowerCase().includes(s)\n      || s.includes(u.name.toLowerCase())\n      || u.user?.user_email?.includes(s)\n      || s.includes(u.user?.user_email);\n  });\n\n  const chatMessages = subNav && messages[subNav.jid]\n    ? messages[subNav.jid]\n    : [];\n\n  return (\n    <>\n      <Paper className=\"scroll-list-container\" sx={{ width: 300 }}>\n        <Box sx={{ px: 2 }}>\n          <Stack direction=\"row\" sx={{ alignItems: \"center\" }}>\n            <h2>Chat</h2>\n          </Stack>\n\n          <TextField\n            type=\"search\"\n            label=\"Search\"\n            variant=\"filled\"\n            size=\"small\"\n            fullWidth\n            onChange={(e) => setSearch(e.target.value)}\n            />\n        </Box>\n\n        <List>\n          {filteredUsers.map((u) => (\n            <ListItem key={u.jid} disablePadding>\n              <ListItemButton onClick={() => setSubNav(u)}>\n                <ListItemAvatar>\n                  <Avatar>\n                    {u.isRoom\n                      ? <GroupsIcon />\n                      : initials(u)}\n                  </Avatar>\n                </ListItemAvatar>\n\n                <ListItemText\n                  primary={u.name}\n                  primaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  secondary={u.user?.user_email}\n                  secondaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  title={u.jid}\n                />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n\n      <Paper className=\"right-section\">\n        {subNav && <Message allUsers={allUsers} client={client} user={subNav} messages={chatMessages} API_BASE={API_BASE} jwt={jwt} />}\n      </Paper>\n    </>\n  );\n};\n\n// TODO put this is allUsers state\nfunction initials(u) {\n  return u.name?.split(\" \")?.slice(0, 2)?.map(n => n.substr(0, 1));\n}\n\nexport default Messages;\n","import { useState, useEffect, createContext, useContext } from \"react\";\nimport * as XMPP from \"stanza\";\nimport Amplify, { Auth, Hub } from \"aws-amplify\";\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Snackbar,\n  Alert,\n} from \"@mui/material\";\n\nimport \"./App.css\";\nimport Login from \"./login\";\nimport SideBar from \"./sidebar\";\nimport Roster from \"./roster\";\nimport Messages from \"./messages\";\n\n// AWS Config\nconst REGION = \"us-east-1\";\nconst USER_POOL_ID = \"us-east-1_ESYPvGhN3\";\nconst USER_POOL_WEB_CLIENT_ID = \"5ai2feek1rgpso497om1kbj4ug\";\nconst API_BASE = \"https://saas-api.visionable.one\";\n\n// XMPP Config\nconst HOSTNAME = \"saas-msg.visionable.one\";\nconst PROTOCOL = \"wss\";\nconst PORT = \"5443\";\nconst ENDPOINT = \"ws-xmpp\";\nconst MUC_LIGHT_HOSTNAME = `muclight.${HOSTNAME}`;\n\nAmplify.configure({\n  Auth: {\n    region: REGION,\n    userPoolId: USER_POOL_ID,\n    userPoolWebClientId: USER_POOL_WEB_CLIENT_ID,\n  },\n});\n\nconst resource = localStorage.getItem(\"xmpp-resource\") || crypto.randomUUID();\nlocalStorage.setItem(\"xmpp-resource\", resource);\n\nconst initXMPP = async (jid, password) =>\n  XMPP.createClient({\n    jid,\n    password,\n    resource,\n    transports: {\n      websocket: `${PROTOCOL}://${HOSTNAME}:${PORT}/${ENDPOINT}`,\n    },\n  });\n\nconst App = () => {\n  const [client, setClient] = useState(null);\n  const [username, setUsername] = useState(localStorage.getItem(\"username\") || \"\");\n  const [password, setPassword] = useState(\"Green12345!\");\n  const [jid, setJid] = useState(\"\");\n  const [jwt, setJwt] = useState(\"\");\n  const [online, setOnline] = useState(false);\n  const [roster, setRoster] = useState([]);\n  const [presence, setPresence] = useState({});\n  const [incomingInvites, setIncomingInvites] = useState([]);\n  const [inviteResponses, setInviteResponses] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [allUsers, setAllUsers] = useState([]);\n  const [nav, setNav] = useState(\"contacts\");\n  const [messages, setMessages] = useState({}); // { user: [message] }\n  const [roomMessages, setRoomMessages] = useState({}); // { room: [message] }\n  const [connected, setConnected] = useState(false);\n\n  const signIn = async () => {\n    setError(\"\");\n    setLoading(true);\n    localStorage.setItem(\"username\", username);\n\n    try {\n      const { username: uuid, signInUserSession: session } = await Auth.signIn(username, password);\n      window.Auth = Auth;\n      const jwt = session.idToken.jwtToken;\n      setJwt(jwt);\n      const jid = `${uuid}@${HOSTNAME}`;\n      setJid(jid);\n      const xmpp = await initXMPP(jid, jwt);\n\n      console.log(jid, jwt)\n\n      setClient(xmpp);\n      setLoading(false);\n      setConnected(true);\n\n      const cognitoUsers = await getAllUsers(jwt);\n      const extendedUsers = cognitoUsers.map((u) => ({ ...u, name: userFullName(u) }));\n      setAllUsers(extendedUsers);\n\n      window.client = xmpp;\n\n      xmpp.on(\"session:started\", async () => {\n        xmpp.sendPresence();\n        xmpp.enableKeepAlive();\n        xmpp.enableCarbons();\n        setOnline(true);\n\n        const roster = (await xmpp.getRoster()).items;\n        setRoster(roster);\n        setMessages({});\n        setRoomMessages({});\n\n        // Get the last 50 messages for each roster item\n        roster.forEach((r) => {\n          xmpp.searchHistory({ with: r.jid, paging: { before: \"\" }});\n        });\n      });\n\n      xmpp.on(\"message\", (message) => {\n        if (message.type === 'meeting-invite') {\n          setIncomingInvites((prev) => [...prev, message]);\n        } else if (message.type === \"chat\") {\n          console.log(\"GOT THE MESSAGE\", message);\n          const [from] = message.from.split(\"/\");\n          setMessages((prev) => ({\n            ...prev,\n            [from]: [\n              ...(prev[from] || []),\n              message,\n            ],\n          }));\n        } else if (message.type === \"groupchat\") {\n          // TODO: DRY up this code, same as regular chat?\n          const [room, user] = message.from.split(\"/\");\n          console.log(\"GOT A GROUPCHAT\", room, user);\n          setMessages((prev) => ({\n            ...prev,\n            [room]: [\n              ...(prev[room] || []),\n              message,\n            ],\n          }));\n        }\n      });\n\n      xmpp.on(\"message:sent\", (message) => {\n        if (message.type === 'meeting-invite') {\n          // TODO: display something in the chat\n        } else if (message.type === \"chat\") {\n          const [to] = message.to.split(\"/\");\n          setMessages((prev) => ({\n            ...prev,\n            [to]: [\n              ...(prev[to] || []),\n              message,\n            ],\n          }));\n        } else if (message.type === \"groupchat\") {\n          // TODO: just seems to work??\n        }\n      });\n\n      xmpp.on(\"mam:item\", (mam) => {\n        // TODO groupchat\n        const message = mam.archive?.item?.message;\n        const { to, from } = message;\n        const fullUser = to.includes(xmpp.config.jid) ? from : to;\n        const [user] = fullUser.split(\"/\");\n        setMessages((prev) => ({\n          ...prev,\n          [user]: [\n            ...(prev[user] || []),\n            message,\n          ],\n        }));\n      });\n\n      xmpp.on(\"subscribe\", (data) => { // if someone subscribes to us..\n        xmpp.acceptSubscription(data.from); // auto accept\n        xmpp.subscribe(data.from); // TODO: and auto add them to ours?\n      });\n\n      xmpp.on(\"unsubscribe\", (data) => { // if someone removes me from their roster\n        xmpp.unsubscribe(data.from); // remove them from ours\n      });\n\n      xmpp.on(\"roster:update\", async (data) => { // roster item change\n        data.roster.items.forEach((r) => {\n          setMessages((prev) => ({ ...prev, [r.jid]: [] })); // delete any messages from them\n          xmpp.searchHistory({ with: r.jid, paging: { before: \"\" }}); // and replace\n        });\n\n        setRoster((await xmpp.getRoster()).items)\n      });\n\n      // if someone adds you to a room, auto accept it\n      xmpp.on(\"muc:invite\", (data) => {\n        client.joinRoom(data.room);\n      });\n\n      // created or added to a room\n      xmpp.on(\"muc:available\", async () =>\n        setRoster((await xmpp.getRoster()).items)\n      );\n\n      // no longer in a room\n      xmpp.on(\"muc:unavailable\", async () =>\n        setRoster((await xmpp.getRoster()).items)\n      );\n\n      xmpp.on(\"presence\", (data) => {\n        setPresence((prev) => ({ ...prev, [data.from]: data }))\n      });\n\n      /*\n      xmpp.on(\"available\", (data) => {\n        const jid = data.from.replace(/\\/.*$/, \"\");\n        setPresence((prev) => ({ ...prev, [jid]: 'Available' }));\n      });\n*/\n\n      xmpp.on(\"*\", async (type, data) => {\n        console.log(type, data);\n      });\n\n      // on disconnect, retry\n      xmpp.on(\"disconnected\", () => {\n        setConnected(false);\n        // setTimeout(xmpp.connect, 3000)\n      })\n\n      xmpp.on(\"connected\", () => {\n        setConnected(true);\n      })\n\n      xmpp.connect();\n    } catch (e) {\n      console.error(\"caught\", e);\n      setLoading(false);\n      setError(e.message);\n    }\n  };\n\n  // TODO: re-authenticate when our JWT refreshes\n  useEffect(() => {\n    Hub.listen('auth', async (data) => {\n      if (data.payload.event === \"tokenRefresh\") {\n        console.log(\"token refreshed\", data);\n        client.config.credentials.password = (await Auth.currentSession()).idToken.jwtToken;\n\n        client.connect();\n      }\n    });\n  }, []);\n\n  console.log('new presence list', presence);\n  // console.log('messages', messages);\n\n  // extend the roster with info from the User API, presence, etc.\n  const extendedRoster = roster.map(r => {\n    const user = allUsers.find(u => r.jid.includes(u.user_id));\n    const name = r.name // if the roster item has a name\n      ? r.name // use that\n      : user // otherwise, if there's a corresponding user from the User API\n        ? userFullName(user) // get the name of that\n        : r.jid;// otherwise, just show their JID\n\n    // grab all of the resources that we've been given presence for this user\n    const resources = Object.values(presence)\n      .filter((p) => p.from.includes(r.jid))\n      .map((u) => u.from.split(\"/\")?.[1]);\n\n    return {\n      ...r,\n      user,\n      name, \n      resources,\n      isRoom: !!r.groups?.[0]?.includes(\"muc\"),\n    };\n  });\n\n  console.log(\"extended roster\", extendedRoster);\n\n  // find my own user from the User API\n  const me = allUsers.find((u) => client.jid.match(u.user_id));\n\n  const reconnect = async () => {\n    client.config.credentials.password = (await Auth.currentSession()).idToken.jwtToken;\n    client.connect();\n  };\n\n  const signOut = async () => {\n    client.disconnect();\n    setOnline(false);\n    setConnected(false);\n    setRoster([]);\n    setPresence({});\n    setMessages({});\n    setRoomMessages({});\n\n    try {\n      await Auth.signOut();\n    } catch (error) {\n      console.log(\"error signing out: \", error);\n    }\n  };\n\n  const acceptInvite = (message) => {\n    setInviteResponses((prev) => ({ ...prev, [message.id]: \"accept\" }))\n    client.sendMessage({ to: message.from, body: message.id, type: 'meeting-invite-accept' });\n  };\n\n  const rejectInvite = (message) => {\n    setInviteResponses((prev) => ({ ...prev, [message.id]: \"reject\" }))\n    client.sendMessage({ to: message.from, body: message.id, type: 'meeting-invite-reject' });\n  };\n\n  const onChangeUsername = (e) => {\n    setUsername(e.target.value);\n    setError(null);\n  };\n\n  const onChangePassword = (e) => {\n    setPassword(e.target.value);\n    setError(null);\n  };\n\n  /*\n  const changeName = () => {\n    client.publishVCard({ fullName: newName });\n  };\n\n  const getVCard = async () => {\n    try {\n      const card = await client.getVCard(jid);\n      console.log(\"my card\", card);\n      setNewName(card?.fullName);\n    } catch (e) {\n      console.error(\"Error getting vcard\", e);\n    }\n  };\n\n  const getMUCLightRooms = async () => {\n    const res = await client.getDiscoItems(MUC_LIGHT_HOSTNAME);\n  }\n\n  const uploadFile = (e) => {\n    Array.from(e.target.files).forEach(async (f) => {\n      const { name, size, type: mediaType } = f; // TODO files with spaces in name fail\n      console.log('file', name, size, mediaType);\n      const service = await client.getUploadService();\n      console.log('service', service);\n      const slot = await client.getUploadSlot(service.jid, { name, size, mediaType })\n      console.log('slot', slot);\n      const { download: downloadUrl, upload: { url: uploadUrl } } = slot;\n      console.log('got urls', downloadUrl, uploadUrl);\n      const res = await fetch(uploadUrl, {\n        method: \"PUT\",\n        body: f,\n        headers: { \"x-amz-acl\": \"public-read\" },\n      });\n      console.log('res', res);\n\n      if (to) { // send notification\n        client.sendMessage({ to, body: downloadUrl, type: 'file-upload' });\n      }\n    })\n  }\n*/\n\n  if (!online) {\n    return (\n      <div className=\"App\">\n        <Login loading={loading} username={username} onChangeUsername={onChangeUsername} password={password} onChangePassword={onChangePassword} error={error} signIn={signIn} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <SideBar nav={nav} setNav={setNav} signOut={signOut} client={client} me={me} />\n\n      <Snackbar\n        onClick={reconnect}\n        open={!connected}\n        anchorOrigin={{ horizontal: \"center\", vertical: \"bottom\" }}\n        sx={{ cursor: \"pointer\" }}\n      >\n        <Alert severity=\"error\" sx={{ width: '100%' }}>Disconnected. Click here to reconnect</Alert>\n      </Snackbar>\n\n      <IncomingInvites\n        accept={acceptInvite}\n        reject={rejectInvite}\n        invites={incomingInvites}\n        responses={inviteResponses} />\n\n      <Box className=\"main\">\n        {nav === 'contacts'\n          ? <Roster\n              roster={extendedRoster}\n              // presence={presence}\n              messages={messages}\n              allUsers={allUsers}\n              client={client}\n              API_BASE={API_BASE}\n              MUC_LIGHT_HOSTNAME={MUC_LIGHT_HOSTNAME}\n              jwt={jwt}\n            />\n          : nav === 'messages'\n            ? <Messages\n                roster={extendedRoster}\n                messages={messages}\n                // presence={presence}\n                allUsers={allUsers}\n                client={client}\n                API_BASE={API_BASE}\n                MUC_LIGHT_HOSTNAME={MUC_LIGHT_HOSTNAME}\n                jwt={jwt}\n              />\n            : null}\n      </Box>\n    </div>\n  );\n};\n\nconst IncomingInvites = ({ accept, reject, invites, responses }) =>\n  invites.filter((m) => !responses[m.id]).map((m) => (\n    <Dialog key={m.id} open={true}>\n      <DialogTitle>Meeting Invite</DialogTitle>\n      <DialogContent>\n        <p>Invite ID: {m.id}</p>\n        <p>From: {m.from}</p>\n        <p>Meeting ID: {m.body}</p>\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"error\" onClick={() => reject(m)}>Reject</Button>\n        <Button onClick={() => accept(m)}>Accept</Button>\n      </DialogActions>\n    </Dialog>\n  ));\n\nconst getAllUsers = async (jwt) => {\n  const res = await fetch(`${API_BASE}/api/user`, { headers: { Authorization: jwt } });\n  return res.ok ? res.json() : [];\n}\n\nfunction userFullName(user) {\n  return user?.name\n  ? user.name\n    : user?.user_displayname\n      ? user.user_displayname\n      : user?.user_firstname\n        ? `${user.user_firstname} ${user.user_lastname}`\n        : \"[No Name]\";\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}