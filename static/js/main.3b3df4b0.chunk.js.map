{"version":3,"sources":["db.js","profile.js","sidebar.js","message.js","roster.js","messages.js","inbox.ts","App.js","index.js"],"names":["db","Dexie","version","stores","messages","Profile","client","me","signOut","useState","anchorEl","setAnchorEl","activity","setActivity","open","Boolean","handleClose","statusList","key","color","label","icon","Circle","ListItem","disablePadding","ListItemIcon","IconButton","onClick","event","currentTarget","sx","ml","Avatar","width","height","ListItemText","primary","name","primaryTypographyProps","textOverflow","overflow","whiteSpace","secondary","user_email","secondaryTypographyProps","title","config","jid","Menu","id","onClose","PaperProps","elevation","filter","mt","mr","content","display","position","top","right","bgcolor","transform","zIndex","transformOrigin","horizontal","vertical","anchorOrigin","MenuItem","disabled","Divider","map","s","status","sendPresence","fontSize","text","prompt","publishActivity","items","route","iconComponent","ContactsIcon","ChatIcon","SideBar","setNav","nav","List","flexDirection","minWidth","background","i","IconComponent","ListItemButton","Chat","message","mine","isRoom","from","includes","Box","className","blue","p","mx","my","borderRadius","marginLeft","marginRight","style","timestamp","toLocaleString","body","createMeeting","API_BASE","jwt","a","url","mstart","parseInt","Date","getTime","formData","FormData","append","toString","fetch","method","headers","Authorization","then","res","json","AddUserToRoomPrompt","close","allUsers","room","user","setUser","Dialog","DialogTitle","DialogContent","Autocomplete","onChange","_","u","options","user_id","renderInput","params","TextField","DialogActions","Button","setRoomAffiliation","Message","console","log","members","setMembers","setMessage","showAddUserToRoom","setShowAddUserToRoom","scrollRef","useRef","roomListAnchorEl","setRoomListAnchorEl","showRoomList","useLiveQuery","where","equals","sortBy","or","extendedMessages","find","removeContact","leaveRoom","removeRosterItem","unsubscribe","sendMessage","type","to","invite","uuid","memberList","getRoomMembers","muc","users","m","target","closeRoomList","useEffect","current","scrollTop","scrollHeight","Stack","flexGrow","direction","px","alignItems","MenuListProps","ref","e","value","placeholder","onKeyPress","InputProps","endAdornment","AddRoomPrompt","add","roomName","setRoomName","AddContactPrompt","newContact","setNewContact","userDisplayName","user_firstname","user_lastname","initials","split","slice","n","substr","Roster","roster","MUC_LIGHT_HOSTNAME","search","setSearch","subNav","setSubNav","showAddContact","setShowAddContact","showAddRoom","setShowAddRoom","tab","setTab","showAddMenu","closeAddMenu","addRoom","crypto","randomUUID","joinRoom","configureRoom","fields","filteredRoster","r","toLowerCase","chatMessages","server","subscribe","Paper","variant","size","fullWidth","borderBottom","borderColor","Tabs","idx","Tab","index","available","away","unavailable","ListItemAvatar","Badge","componentsProps","badge","backgroundColor","border","overlap","badgeContent","invisible","AddChatPrompt","Messages","showAddChat","setShowAddChat","tos","orderBy","uniqueKeys","froms","jids","concat","v","indexOf","filteredUsers","stanzas","define","element","unread","JXT","attribute","queryid","namespace","path","result","getInbox","sendIQ","inbox","on","msg","emit","window","resource","localStorage","getItem","setItem","initXMPP","password","hostname","XMPP","transports","websocket","IncomingInvites","accept","reject","invites","responses","getAllUsers","ok","userFullName","user_displayname","getAllMessages","start","after","paging","searchHistory","complete","last","App","signOutAWS","setClient","setJwt","setRoster","presence","setPresence","activities","setActivities","incomingInvites","setIncomingInvites","inviteResponses","setInviteResponses","setAllUsers","connected","setConnected","serviceName","domain","xmppHostname","mucHostname","signIn","username","clear","session","signInUserSession","idToken","jwtToken","xmpp","use","IqInbox","cognitoUsers","extendedUsers","updateCaps","legacyCapabilities","disco","getCaps","enableKeepAlive","enableCarbons","getRoster","lastMessage","prev","before","group","put","mam","archive","item","delay","forwarded","stamp","data","acceptSubscription","forEach","with","connect","addEventListener","disconnect","error","extendedRoster","statuses","Object","values","length","some","every","groups","match","reconnect","updateConfig","credentials","removeItem","Snackbar","cursor","Alert","severity","Context","createContext","HOSTNAME_KEY","AppContainer","setConfig","configure","getServiceConfig","Amplify","Auth","region","userPoolId","userPoolWebClientId","Provider","Authenticator","mode","alert","location","reload","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.3b3df4b0.chunk.js","sourcesContent":["import Dexie from 'dexie';\n\nconst db = new Dexie('visionable-xmpp-test-app');\n\ndb.version(1).stores({\n  messages: '++id, group, from, to, body, type, timestamp',\n});\n\nexport default db;\n","import { useState } from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport TextField from '@mui/material/ListItemText';\n\nimport Settings from '@mui/icons-material/Settings';\nimport Logout from '@mui/icons-material/Logout';\nimport Circle from '@mui/icons-material/Circle';\n\nconst Profile = ({ client, me, signOut }) => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  // const [newActivity, setNewActivity] = useState(\"\");\n  const [activity, setActivity] = useState(\"\"); // TODO: get last activity\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const setStatus = (status) => {\n    client.sendPresence({ status });\n  };\n\n  const activityPrompt = () => { // TODO: use mui\n    const text = prompt(\"Enter a custom message\");\n    // setNewActivity(text);\n    // sendActivity();\n    client.publishActivity({ text })\n    setActivity(text);\n  }\n\n  /*\n  const sendActivity = () => {\n    client.publishActivity({ text: activity })\n    setActivity(newActivity);\n  }\n*/\n\n  const statusList = [\n    {\n      key: \"available\",\n      color: \"#53b397\",\n      label: \"Available\",\n      icon: Circle,\n    },\n    {\n      key: \"in-meeting\",\n      color: \"#ea3323\",\n      label: \"In a meeting\",\n      icon: Circle,\n    },\n    {\n      key: \"away\",\n      color: \"#f0a73e\",\n      label: \"Away\",\n      icon: Circle,\n    },\n  ]\n\n  return (\n    <>\n      <ListItem disablePadding>\n        <ListItemIcon>\n          <IconButton onClick={handleClick} sx={{ ml: 0.5 }}>\n            <Avatar sx={{ width: 32, height: 32 }}>M</Avatar>\n          </IconButton>\n        </ListItemIcon>\n\n        <ListItemText\n          primary={me.name}\n          primaryTypographyProps={{ color: \"white\", textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n          secondary={me.user_email}\n          secondaryTypographyProps={{ color: \"white\", textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n          title={client.config.jid}\n        />\n      </ListItem>\n\n      <Menu\n        anchorEl={anchorEl}\n        id=\"account-menu\"\n        open={open}\n        onClose={handleClose}\n        onClick={handleClose}\n        PaperProps={{\n          elevation: 0,\n          sx: {\n            overflow: 'visible',\n            filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))',\n            mt: 1.5,\n            '& .MuiAvatar-root': {\n              width: 32,\n              height: 32,\n              ml: -0.5,\n              mr: 1,\n            },\n            '&:before': {\n              content: '\"\"',\n              display: 'block',\n              position: 'absolute',\n              top: 0,\n              right: 14,\n              width: 10,\n              height: 10,\n              bgcolor: 'background.paper',\n              transform: 'translateY(-50%) rotate(45deg)',\n              zIndex: 0,\n            },\n          },\n        }}\n        transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n      >\n        <MenuItem disabled>\n          <Avatar /> Profile\n        </MenuItem>\n\n        <Divider />\n\n        {statusList.map((s) => (\n          <MenuItem key={s.key} onClick={() => setStatus(s.key)}>\n            <ListItemIcon>\n              <Circle fontSize=\"small\" sx={{ color: s.color }} />\n            </ListItemIcon>\n\n            <ListItemText primary={s.label} />\n          </MenuItem>\n        ))}\n\n        <MenuItem onClick={activityPrompt}>\n          {activity || <i>Custom message</i>}\n\n          {/* <TextField */}\n          {/*   label=\"Status message\" */}\n          {/*   onChange={(e) => setNewActivity(e.target.value)} */}\n          {/*   onKeyDown={(e) => e.key === \"Enter\" && sendActivity()} */}\n          {/* /> */}\n        </MenuItem>\n\n        <Divider />\n\n        <MenuItem disabled>\n          <ListItemIcon>\n            <Settings fontSize=\"small\" />\n          </ListItemIcon>\n          Settings\n        </MenuItem>\n\n        <MenuItem onClick={signOut}>\n          <ListItemIcon>\n            <Logout fontSize=\"small\" />\n          </ListItemIcon>\n          Logout\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\n\nexport default Profile;\n","import {\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n} from \"@mui/material\";\n\nimport {\n  Contacts as ContactsIcon,\n  Chat as ChatIcon,\n} from \"@mui/icons-material\";\n\nimport Profile from './profile';\n\nconst items = [\n  {\n    route: \"contacts\",\n    label: \"Contacts\",\n    iconComponent: ContactsIcon,\n  },\n  {\n    route: \"messages\",\n    label: \"Messages\",\n    iconComponent: ChatIcon,\n  },\n]\n\nconst SideBar = ({ client, me, setNav, nav, signOut }) => (\n  <List sx={{\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"200px\",\n    minWidth: \"200px\",\n    background: \"#091c38\",\n    color: \"white\"\n  }}>\n    <Profile client={client} me={me} signOut={signOut} />\n\n    {items.map(i => {\n      const IconComponent = i.iconComponent;\n\n      return (\n        <ListItem key={i.route} disablePadding sx={{ background: nav === i.route ? 'rgba(255,255,255,0.1)' : 'transparent' }}>\n          <ListItemButton onClick={() => setNav(i.route)}>\n            <ListItemIcon>\n              <IconComponent sx={{ color: \"white\" }} />\n            </ListItemIcon>\n\n            <ListItemText>\n              {i.label}\n            </ListItemText>\n          </ListItemButton>\n        </ListItem>\n      )})}\n\n    {/* <ListItem disablePadding sx={{ mt: \"auto\" }}> */}\n    {/*   <ListItemButton onClick={signOut}> */}\n    {/*     <ListItemIcon> */}\n    {/*       <LogoutIcon sx={{ color: \"white\" }} /> */}\n    {/*     </ListItemIcon> */}\n\n    {/*     <ListItemText> */}\n    {/*       Log Out */}\n    {/*     </ListItemText> */}\n    {/*   </ListItemButton> */}\n    {/* </ListItem> */}\n  </List>\n);\n\nexport default SideBar;\n","import {\n  Box,\n  Button,\n  Stack,\n  TextField,\n  IconButton,\n  Autocomplete,\n  Menu,\n  MenuItem,\n  Divider,\n} from \"@mui/material\";\nimport { useState, useEffect, useRef } from \"react\";\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport GroupAddIcon from '@mui/icons-material/GroupAdd';\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport VideoCameraFrontIcon from '@mui/icons-material/VideoCameraFront';\nimport { blue } from \"@mui/material/colors\";\n\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport db from './db';\n\nconst Message = ({ client, user, API_BASE, jwt, allUsers }) => {\n  console.log(\"Message component\", user)\n  const [members, setMembers] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [showAddUserToRoom, setShowAddUserToRoom] = useState(false);\n  const scrollRef = useRef(null);\n\n  const [roomListAnchorEl, setRoomListAnchorEl] = useState(null);\n  const showRoomList = Boolean(roomListAnchorEl);\n\n  const messages = useLiveQuery(() => \n    user.isRoom\n      ? db.messages.where(\"group\").equals(user.jid).sortBy(\"timestamp\")\n      : db.messages.where(\"from\").equals(user.jid).or(\"to\").equals(user.jid).sortBy(\"timestamp\"),\n    [user], []); //  || [];\n\n  const extendedMessages = messages.map((message) => { // add user info\n    const user = allUsers.find((u) => message.from?.includes(u.user_id));\n    const name = user?.name || message.from;\n\n    return { ...message, user, name };\n  });\n\n  const removeContact = async () => {\n    if (user.isRoom) {\n      await client.setRoomAffiliation(user.jid, client.config.jid, \"none\");\n      await client.leaveRoom(user.jid);\n    } else {\n      await client.removeRosterItem(user.jid);\n      await client.unsubscribe(user.jid);\n    }\n  };\n\n  const sendMessage = () => {\n    if (!message) {\n      return;\n    }\n\n    const type = user.isRoom ? 'groupchat' : 'chat';\n    client.sendMessage({ to: user.jid, body: message, type });\n    setMessage(\"\");\n  };\n\n  const invite = async () => {\n    const body = await createMeeting(API_BASE, jwt);\n    if (body.uuid) {\n      client.sendMessage({ to: user.jid, body: body.uuid, type: 'meeting-invite' });\n    }\n  };\n\n  const memberList = async (event) => {\n    const res = await client.getRoomMembers(user.jid);\n\n    setMembers(res.muc.users.map((m) => ({\n      ...m,\n      name: allUsers.find((u) => m.jid.includes(u.user_id))?.name,\n    })));\n\n    setRoomListAnchorEl(event.target);\n  };\n\n  const closeRoomList = () => setRoomListAnchorEl(null);\n  const openAddUser = () => {\n    closeRoomList();\n    setShowAddUserToRoom(true);\n  }\n\n  useEffect(() => {\n    scrollRef.current.scrollTop = scrollRef?.current?.scrollHeight;\n  }, [messages]);\n\n  return (\n    <Stack sx={{ flexGrow: 1 }}>\n      <AddUserToRoomPrompt\n        client={client}\n        room={user}\n        open={showAddUserToRoom}\n        close={() => setShowAddUserToRoom(false) }\n        allUsers={allUsers}\n      />\n\n      <Stack direction=\"row\" sx={{ px: 2, background: \"white\", alignItems: \"center\" }}>\n        <h2>{user.name}</h2>\n\n        <IconButton sx={{ ml: \"auto\" }} onClick={removeContact}>\n          <DeleteIcon fontSize=\"inherit\" />\n        </IconButton>\n\n        {user.isRoom && <>\n          <IconButton onClick={memberList}>\n            <GroupAddIcon fontSize=\"inherit\" />\n          </IconButton>\n\n          <Menu\n            id=\"basic-menu\"\n            anchorEl={roomListAnchorEl}\n            open={showRoomList}\n            onClose={closeRoomList}\n            MenuListProps={{\n              'aria-labelledby': 'basic-button',\n            }}\n          >\n            {members.map((m) => (\n              <MenuItem key={m.jid}>{m.name}</MenuItem>\n            ))}\n            <Divider />\n            <MenuItem onClick={openAddUser}>Add</MenuItem>\n          </Menu>\n        </>}\n\n        <IconButton onClick={invite}>\n          <VideoCameraFrontIcon fontSize=\"inherit\" />\n        </IconButton>\n      </Stack>\n\n      <Stack sx={{ background: \"#eee\", flexGrow: 1, overflow: \"auto\", px: \"10%\" }} ref={scrollRef}>\n        {extendedMessages.map(m => <Chat key={m.id} message={m} client={client} isRoom={user.isRoom} />)}\n      </Stack>\n\n      <Stack direction=\"row\" sx={{ p: 1 }}>\n        <TextField\n          onChange={(e) => setMessage(e.target.value)}\n          value={message}\n          sx={{ flexGrow: 1 }}\n          placeholder=\"Send a message...\"\n          onKeyPress={(e) => e.key === 'Enter' && sendMessage() }\n          InputProps={{ endAdornment: <Button onClick={sendMessage}>Send</Button> }}\n        />\n\n        {/* <Button variant=\"primary\" onClick={sendMessage}>Send</Button> */}\n      </Stack>\n    </Stack>\n  );\n};\n\nconst Chat = ({ message, client, isRoom }) => {\n  const mine = !message.from || message.from.includes(client.config.jid);\n\n  // if we're in a room, grab the user's jid from the `from` field\n  // if it's a direct chat, grab just the bare JID\n  // const jid = message.from?.split(\"/\")[isRoom ? 1 : 0];\n\n  return (\n    <Box\n      className={`chat-message ${mine ? \"mine\" : \"\"}`}\n      sx={{\n        background: mine ? blue[700] : \"white\",\n        color: mine ? \"white\" : \"black\",\n        p: 1.5,\n        mx: 2, my: 1,\n        borderRadius: 2,\n        marginLeft: mine ? \"auto\" : 0,\n        marginRight: mine ? 0 : \"auto\",\n      }}\n    >\n      <span style={{ fontSize: \"0.8em\" }}>\n        <b>{message.name}</b>\n        <span style={{ marginLeft: \"1em\", color: mine ? \"#eee\" : \"#666\" }}>{message.timestamp?.toLocaleString()}</span>\n      </span>\n      <br />\n      {message.body}\n    </Box>\n  );\n}\n\nasync function createMeeting(API_BASE, jwt) {\n  const url = `${API_BASE}/api/meeting`;\n  const mstart = parseInt(new Date().getTime() / 1000);\n\n  const formData = new FormData();\n  formData.append(\"name\", \"Instant Meeting\");\n  formData.append(\"mstart\", mstart.toString());\n  formData.append(\"duration\", \"3600\");\n\n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: jwt,\n    },\n    body: formData,\n  }).then(res => res.json());\n};\n\nconst AddUserToRoomPrompt = ({ open, close, allUsers, client, room }) => {\n  const [user, setUser] = useState(\"\");\n\n  const onAdd = () => {\n    const jid = `${user}@saas-msg.visionable.one`; // TODO: use constant\n    client.setRoomAffiliation(room.jid, jid, \"member\")\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add User to Room</DialogTitle>\n\n      <DialogContent>\n        <Autocomplete\n          sx={{ width: 400, my: 1 }}\n          onChange={(_, u) => u && setUser(u.id)}\n          options={allUsers.map(u => ({\n            label: `${u.name} (${u.user_email})`,\n            id: u.user_id,\n          }))}\n          renderInput={(params) => <TextField {...params} label=\"User\" />}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default Message;\n","import { useState } from \"react\";\n\nimport {\n  Badge,\n  Box,\n  Button,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemButton,\n  Avatar,\n  ListItemText,\n  TextField,\n  Paper,\n  Stack,\n  Autocomplete,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tabs,\n  Tab\n} from \"@mui/material\";\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport AddIcon from '@mui/icons-material/Add';\nimport GroupsIcon from '@mui/icons-material/Groups';\n\nimport Message from './message';\n\nconst AddRoomPrompt = ({ open, close, add }) => {\n  const [roomName, setRoomName] = useState(\"\");\n\n  const onAdd = () => {\n    add(roomName);\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add Group</DialogTitle>\n\n      <DialogContent>\n        <TextField\n          sx={{ width: 400, my: 1 }}\n          onChange={(e) => setRoomName(e.target.value)}\n          label=\"Group name\"\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst AddContactPrompt = ({ open, close, add, allUsers }) => {\n  const [newContact, setNewContact] = useState(\"\");\n\n  const onAdd = () => {\n    add(newContact);\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Add Contact</DialogTitle>\n\n      <DialogContent>\n        <Autocomplete\n          sx={{ width: 400, my: 1 }}\n          onChange={(_, u) => u && setNewContact(u.id)}\n          options={allUsers.map(u => ({\n            label: userDisplayName(u),\n            id: u.user_id,\n          }))}\n          renderInput={(params) => <TextField {...params} label=\"User\" />}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n// TODO use teh name property\nconst userDisplayName = (u) => `${u.user_firstname} ${u.user_lastname} (${u.user_email})`;\n\nconst Roster = ({\n  roster,\n  client,\n  allUsers,\n  API_BASE,\n  MUC_LIGHT_HOSTNAME,\n  jwt,\n}) => {\n  const [search, setSearch] = useState(\"\");\n  const [subNav, setSubNav] = useState(null);\n  const [showAddContact, setShowAddContact] = useState(false);\n  const [showAddRoom, setShowAddRoom] = useState(false);\n  const [tab, setTab] = useState(0);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const showAddMenu = Boolean(anchorEl);\n\n  const openAddMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const closeAddMenu = () => {\n    setAnchorEl(null);\n  };\n\n  const addContact = (uuid) => {\n    const jid = `${uuid}@${client.config.server}`;\n    client.subscribe(jid);\n  }\n\n  // TODO: this will use the Room API in the future\n  const addRoom = async (name) => {\n    const uuid = crypto.randomUUID();\n    const jid = `${uuid}@${MUC_LIGHT_HOSTNAME}`;\n    const res = await client.joinRoom(jid);\n    console.log(\"created room!\", res);\n    client.configureRoom(jid, { fields: [ { name: 'roomname', value: name } ] });\n  }\n\n  // filter by search\n  const filteredRoster = roster.filter(r =>\n    r.name?.toLowerCase().includes(search.toLowerCase()) || r.jid?.includes(search))\n  .filter(r => (tab === 0 && !r.isRoom) || (tab === 1 && r.isRoom));\n\n  const messages = {}; // TODO\n\n  const chatMessages = subNav && messages[subNav.jid]\n    ? messages[subNav.jid]\n    : [];\n\n  return (\n    <>\n      <AddContactPrompt\n        add={addContact}\n        close={() => setShowAddContact(false)}\n        open={showAddContact}\n        allUsers={allUsers}\n      />\n\n      <AddRoomPrompt\n        add={addRoom}\n        close={() => setShowAddRoom(false)}\n        open={showAddRoom}\n      />\n\n      <Paper className=\"scroll-list-container\" sx={{ width: 300 }}>\n        <Box sx={{ px: 2 }}>\n          <Stack direction=\"row\" sx={{ alignItems: \"center\" }}>\n            <h2>Contacts</h2>\n\n            <IconButton sx={{ ml: \"auto\" }} onClick={openAddMenu}>\n              <AddIcon fontSize=\"inherit\" />\n            </IconButton>\n\n            <Menu\n              id=\"basic-menu\"\n              anchorEl={anchorEl}\n              open={showAddMenu}\n              onClose={closeAddMenu}\n              MenuListProps={{\n                'aria-labelledby': 'basic-button',\n              }}\n            >\n              <MenuItem onClick={() => { closeAddMenu(); setShowAddContact(true)}}>Add Contact</MenuItem>\n              <MenuItem onClick={() => { closeAddMenu(); setShowAddRoom(true)}}>Add Group</MenuItem>\n            </Menu>\n          </Stack>\n\n          <TextField\n            type=\"search\"\n            label=\"Search\"\n            variant=\"filled\"\n            size=\"small\"\n            fullWidth\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </Box>\n\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={tab} onChange={(_, idx) => setTab(idx)} aria-label=\"basic tabs example\">\n            <Tab label=\"Contacts\" index={0} />\n            <Tab label=\"Groups\" index={1} />\n          </Tabs>\n        </Box>\n\n        <List className=\"scroll-list\">\n          {filteredRoster.map((u) => {\n            const status = u.isRoom ? '' : u.status;\n            const color = {\n              available: \"#51b397\",\n              away: \"#f0a73e\",\n              unavailable: \"gray\",\n              \"in-meeting\": \"#ea3323\",\n            }[status] || \"gray\";\n\n            return (\n              <ListItem key={u.jid} disablePadding>\n                <ListItemButton onClick={() => setSubNav(u)}>\n                  <ListItemAvatar>\n                    <Badge\n                      componentsProps={{\n                        badge: {\n                          sx: {\n                            backgroundColor: color,\n                            border: \"2px solid white\",\n                            width: 14,\n                            height: 14,\n                            borderRadius: 7,\n                          },\n                        },\n                      }}\n                      overlap=\"circular\"\n                      badgeContent=\" \"\n                      invisible={u.isRoom}\n                      variant=\"dot\"\n                      anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'right',\n                      }}\n                    >\n                      <Avatar>\n                        {u.isRoom\n                          ? <GroupsIcon />\n                          : initials(u)}\n                      </Avatar>\n                    </Badge>\n                  </ListItemAvatar>\n\n                  <ListItemText\n                    primary={u.name}\n                    primaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                    secondary={u.user?.user_email}\n                    secondaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                    title={u.jid + (u.activity ? \" - \" + u.activity : \"\")}\n                    />\n                </ListItemButton>\n              </ListItem>\n            )})}\n        </List>\n      </Paper>\n\n      <Paper className=\"right-section\">\n        {subNav && <Message allUsers={allUsers} client={client} user={subNav} messages={chatMessages} API_BASE={API_BASE} jwt={jwt} />}\n      </Paper>\n    </>\n  );\n};\n\n// TODO put this is allUsers state\nfunction initials(u) {\n  return u.name?.split(\" \")?.slice(0, 2)?.map(n => n.substr(0, 1));\n}\n\nexport default Roster;\n","import { useState } from 'react';\nimport {\n  Box,\n  Button,\n  TextField,\n  Paper,\n  Stack,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemAvatar,\n  ListItemText,\n  Avatar,\n  Autocomplete,\n} from \"@mui/material\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\n\nimport AddIcon from '@mui/icons-material/Add';\nimport GroupsIcon from '@mui/icons-material/Groups';\n\nimport Message from \"./message\";\n\nimport db from \"./db\";\n\nconst AddChatPrompt = ({ open, close, add, allUsers }) => {\n  const [newContact, setNewContact] = useState(\"\");\n\n  const onAdd = () => {\n    add(newContact);\n    close();\n  }\n\n  return (\n    <Dialog open={open} onClose={close}>\n      <DialogTitle>Find a User</DialogTitle>\n\n      <DialogContent>\n        <Autocomplete\n          sx={{ width: 400, my: 1 }}\n          onChange={(_, u) => u && setNewContact(u.id)}\n          options={allUsers.map(u => ({\n            label: userDisplayName(u),\n            id: u.user_id,\n          }))}\n          renderInput={(params) => <TextField {...params} label=\"User\" />}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={close}>Cancel</Button>\n        <Button onClick={onAdd}>Add</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n// TODO use teh name property\nconst userDisplayName = (u) => `${u.user_firstname} ${u.user_lastname} (${u.user_email})`;\n\nconst Messages = ({ client, allUsers, roster, jwt, API_BASE }) => {\n  const [search, setSearch] = useState(\"\");\n  const [subNav, setSubNav] = useState(null);\n  const [showAddChat, setShowAddChat] = useState(false);\n\n  // pull out all of the unique IDs from all of the messages\n  const tos = useLiveQuery(() => db.messages.orderBy(\"to\").uniqueKeys()) || [];\n  const froms = useLiveQuery(() => db.messages.orderBy(\"from\").uniqueKeys()) || [];\n  const jids = tos.concat(froms).filter((v, i, a) => a.indexOf(v) === i); // all unique jids\n\n  const users = jids?.map(jid => { // add names\n    const user = allUsers.find((u) => jid.includes(u.user_id));\n    const name = user?.name // user names come from all users\n      || roster.find((r) => r.jid === jid)?.name // room names will be in your roster\n      || jid;\n\n    return { jid, user, name };\n  });\n\n  const filteredUsers = users?.filter((u) => { // filter by search\n    const s = search.toLowerCase();\n    return u.name?.toLowerCase().includes(s)\n      || s.includes(u.name?.toLowerCase())\n      || u.user?.user_email?.includes(s)\n      || s.includes(u.user?.user_email);\n  });\n\n  const addChat = (uuid) => {\n    console.log(\"addChat\", uuid);\n    const jid = `${uuid}@${client.config.server}`;\n    console.log(\"jid\", jid);\n    // TODO\n  };\n\n  return (\n    <>\n      <AddChatPrompt\n        add={addChat}\n        close={() => setShowAddChat(false)}\n        open={showAddChat}\n        allUsers={allUsers}\n      />\n\n      <Paper className=\"scroll-list-container\" sx={{ width: 300 }}>\n        <Box sx={{ px: 2 }}>\n          <Stack direction=\"row\" sx={{ alignItems: \"center\" }}>\n            <h2>Chat</h2>\n            {/* <IconButton sx={{ ml: \"auto\" }} onClick={() => setShowAddChat(true)}> */}\n            {/*   <AddIcon fontSize=\"inherit\" /> */}\n            {/* </IconButton> */}\n          </Stack>\n\n          <TextField\n            type=\"search\"\n            label=\"Search\"\n            variant=\"filled\"\n            size=\"small\"\n            fullWidth\n            onChange={(e) => setSearch(e.target.value)}\n            />\n        </Box>\n\n        <List className=\"scroll-list\">\n          {filteredUsers.map((u) => (\n            <ListItem key={u.jid} disablePadding>\n              <ListItemButton onClick={() => setSubNav(u)}>\n                <ListItemAvatar>\n                  <Avatar>\n                    {u.isRoom\n                      ? <GroupsIcon />\n                      : initials(u)}\n                  </Avatar>\n                </ListItemAvatar>\n\n                <ListItemText\n                  primary={u.name}\n                  primaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  secondary={u.user?.user_email}\n                  secondaryTypographyProps={{ textOverflow: \"ellipsis\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}\n                  title={u.jid}\n                />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n\n      <Paper className=\"right-section\">\n        {subNav && <Message allUsers={allUsers} client={client} user={subNav} API_BASE={API_BASE} jwt={jwt} />}\n      </Paper>\n    </>\n  );\n};\n\n// TODO put this is allUsers state\nfunction initials(u) {\n  return u.name?.split(\" \")?.slice(0, 2)?.map(n => n.substr(0, 1));\n}\n\nexport default Messages;\n","import { Agent, JXT } from 'stanza';\nimport { IQ, ReceivedMessage } from 'stanza/protocol';\n\n// 1. Declare our new custom stanza extension type\nexport interface InboxMessage extends ReceivedMessage {\n  result?: InboxResult;\n}\n\nexport interface InboxResult {\n  forwarded?: InboxMessage;\n}\n\nexport interface InboxMessage {\n  message?: string;\n}\n\n// 2. Begin injecting our plugin's type information into StanzaJS.\ndeclare module 'stanza' {\n\n    // 3. Declare a new method for the StanzaJS agent\n    export interface Agent {\n        getInbox(): Promise<IQ>\n    }\n\n    // 4. Declare our event types. (Event names are the fields in AgentEvents.)\n    export interface AgentEvents {\n      inbox: InboxMessage;\n    }\n\n    // 5. Stanza definitions MUST be placed in the Stanzas namespace\n    namespace Stanzas {\n\n        // 6. Attach our new definition to Message stanzas\n        export interface Message {\n            result?: InboxResult;\n        }\n    }\n}\n\n\n// 7. Create a plugin function\nexport default function (client: Agent, stanzas: JXT.Registry) {\n\n    // 8. Create and register our custom stanza definition\n    stanzas.define({\n        element: 'result',\n        fields: {\n            unread: JXT.attribute('unread'),\n            queryid: JXT.attribute('queryid'),\n        },\n        namespace: 'erlang-solutions.com:xmpp:inbox:0',\n        path: 'message.result'\n    });\n\n    stanzas.define({\n        element: 'forwarded',\n        fields: {\n            unread: JXT.attribute('unread')\n        },\n        namespace: 'urn:xmpp:forward:0',\n        path: 'message.result.forwarded'\n    });\n\n    stanzas.define({\n        element: 'inbox',\n        fields: {\n            result: JXT.text()\n        },\n        namespace: 'erlang-solutions.com:xmpp:inbox:0',\n        path: 'iq.inbox'\n    });\n\n    // 9. Add API to the StanzaJS agent for sending\n    client.getInbox = () => {\n        return client.sendIQ({\n            type: 'set',\n            inbox: \"test\",\n        });\n    };\n\n    // 10. Listen for incoming inbox data and emit our own event\n    client.on('message', msg => {\n        if (msg.result) {\n            client.emit('inbox', msg);\n        }\n    });\n};\n","import { useState, useEffect, useContext } from \"react\";\nimport * as XMPP from \"stanza\";\n\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Snackbar,\n  Alert,\n} from \"@mui/material\";\n\nimport db from \"./db\";\nimport \"./App.css\";\nimport SideBar from \"./sidebar\";\nimport Roster from \"./roster\";\nimport Messages from \"./messages\";\n\nimport IqInbox from './inbox.ts';\n\nwindow.db = db;\n\nconst API_BASE = \"https://saas-api.visionable.one\";\nconst PROTOCOL = \"wss\";\nconst PORT = \"5443\";\nconst ENDPOINT = \"ws-xmpp\";\n\nconst resource = localStorage.getItem(\"xmpp-resource\") || crypto.randomUUID();\nlocalStorage.setItem(\"xmpp-resource\", resource);\n\nconst initXMPP = async (jid, password, hostname) =>\n  XMPP.createClient({\n    jid,\n    password,\n    resource,\n    transports: {\n      websocket: `${PROTOCOL}://${hostname}:${PORT}/${ENDPOINT}`,\n    },\n  });\n\nconst App = ({ signOutAWS, user }) => {\n  const [client, setClient] = useState(null);\n  const [jwt, setJwt] = useState(\"\");\n  const [roster, setRoster] = useState([]);\n  const [presence, setPresence] = useState({});\n  const [activities, setActivities] = useState({});\n  const [incomingInvites, setIncomingInvites] = useState([]);\n  const [inviteResponses, setInviteResponses] = useState({});\n  const [allUsers, setAllUsers] = useState([]);\n  const [nav, setNav] = useState(\"contacts\");\n  const [connected, setConnected] = useState(false);\n  const [server] = useState(\"saas.visionable.one\");\n\n  const [serviceName, ...[domain]] = server.split(/\\.(.*)/s); // split out the serviceName from the rest of the host\n  const xmppHostname = `${serviceName}-msg.${domain}`; // e.g. saas-msg.visionable.one\n  const mucHostname = `muclight.${xmppHostname}`; // e.g. muclight.saas-msg.visionable.one\n\n  const signIn = async () => {\n    if (client) {\n      return; // only sign in once\n    }\n\n    if (localStorage.getItem(\"username\") !== user.username) {\n      await db.messages.clear();\n    }\n    localStorage.setItem(\"username\", user.username);\n\n    try {\n      const { signInUserSession: session } = user;\n      const jwt = session.idToken.jwtToken;\n      setJwt(jwt);\n      const jid = `${user.username}@${xmppHostname}`;\n      const xmpp = await initXMPP(jid, jwt, xmppHostname);\n\n      xmpp.use(IqInbox);\n\n      setClient(xmpp);\n      setConnected(true);\n\n      const cognitoUsers = await getAllUsers(jwt);\n      const extendedUsers = cognitoUsers.map((u) => ({ ...u, name: userFullName(u) }));\n      setAllUsers(extendedUsers);\n\n      window.client = xmpp;\n\n      xmpp.on(\"session:started\", async () => {\n        xmpp.updateCaps();\n        xmpp.sendPresence({\n          legacyCapabilities: xmpp.disco.getCaps() // have to enable this to get PEP notifications\n        });\n        xmpp.enableKeepAlive();\n        xmpp.enableCarbons();\n\n        const roster = (await xmpp.getRoster()).items;\n        setRoster(roster);\n\n        // get \"inbox\"\n        // const res = await xmpp.getInbox();\n        // console.log(\"INBOX RES\", res);\n\n        // Get all of the messages up until the last one I've seen\n        const lastMessage = await db.messages.orderBy(\"timestamp\").last();\n        getAllMessages({ client: xmpp, start: lastMessage?.timestamp });\n      });\n\n      xmpp.on(\"message\", (message) => {\n        if (message.type === 'meeting-invite') {\n          setIncomingInvites((prev) => [...prev, message]);\n        } else if (message.type === \"chat\" || message.type === \"groupchat\") {\n          const [before, after] = message.from.split(\"/\");\n          const group = message.type === \"chat\" ? null : before;\n          const from = message.type === \"chat\" ? before : after;\n\n          db.messages.put({\n            id: message.id,\n            from,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group,\n            timestamp: new Date(),\n          }, message.id)\n        }\n      });\n\n      xmpp.on(\"message:sent\", (message) => {\n        if (message.type === 'meeting-invite') {\n          // TODO: display something in the chat\n        } else if (message.type === \"chat\") {\n          // TODO: until acked, put a pending status\n          db.messages.put({\n            id: message.id,\n            from: xmpp.config.jid,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group: null,\n            timestamp: new Date(),\n          }, message.id)\n        }\n      });\n\n      xmpp.on(\"mam:item\", (mam) => {\n        const message = mam.archive?.item?.message;\n        const timestamp = mam.archive?.item?.delay?.timestamp;\n        if (message.type === \"chat\" || message.type === \"groupchat\") {\n          const [before, after] = message.from.split(\"/\");\n          const group = message.type === \"chat\" ? null : before;\n          const from = message.type === \"chat\" ? before : after;\n\n          db.messages.put({\n            id: message.id,\n            from,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group,\n            timestamp: new Date(),\n          }, message.id)\n        }\n      });\n\n      xmpp.on(\"inbox\", (msg) => {\n        const timestamp = msg.result?.forwarded?.delay?.stamp;\n        const message = msg.result?.forwarded?.message;\n        console.log(\"inbox message\", message)\n\n        if (!message) { return; }\n        const { to } = message;\n\n        if (message.type === \"chat\") {\n          const [from] = message.from.split(\"/\");\n\n          db.messages.put({\n            id: message.id,\n            from,\n            to: message.to,\n            body: message.body,\n            type: message.type,\n            group: null,\n            timestamp,\n          }, message.id)\n        } else if (message.type === \"groupchat\") {\n\n        }\n      });\n\n      xmpp.on(\"subscribe\", (data) => { // if someone subscribes to us..\n        xmpp.acceptSubscription(data.from); // auto accept\n        xmpp.subscribe(data.from);\n      });\n\n      xmpp.on(\"unsubscribe\", () => { // if someone removes me from their roster\n        // xmpp.unsubscribe(data.from); // remove them from ours?\n      });\n\n      xmpp.on(\"roster:update\", async (data) => { // roster item change\n        data.roster.items.forEach((r) => {\n          xmpp.searchHistory({ with: r.jid, paging: { before: \"\" }}); // get the last few messages\n        });\n\n        setRoster((await xmpp.getRoster()).items)\n      });\n\n      // if someone adds you to a room, auto accept it\n      xmpp.on(\"muc:invite\", (data) => {\n        client.joinRoom(data.room);\n      });\n\n      // created or added to a room\n      xmpp.on(\"muc:available\", async () =>\n        setRoster((await xmpp.getRoster()).items)\n      );\n\n      // no longer in a room\n      xmpp.on(\"muc:unavailable\", async () =>\n        setRoster((await xmpp.getRoster()).items)\n      );\n\n      xmpp.on(\"presence\", (data) => {\n        setPresence((prev) => ({ ...prev, [data.from]: data }))\n      });\n\n      xmpp.on(\"activity\", (data) => {\n        const { jid, activity: { text } } = data;\n        console.log(\"ACTIVITY\", jid, text);\n        setActivities((prev) => ({ ...prev, [jid]: text }));\n      });\n\n      xmpp.on(\"*\", async (type, data) => {\n        console.log(type, data);\n      });\n\n      // on disconnect, retry\n      xmpp.on(\"disconnected\", () => {\n        console.log(\"DISCONNECTED\");\n        setConnected(false);\n        // setTimeout(xmpp.connect, 3000)\n      })\n\n      xmpp.on(\"connected\", () => {\n        setConnected(true);\n      })\n\n      xmpp.connect();\n\n      window.addEventListener('beforeunload', function(event) {\n        console.log('window.beforeunload');\n        xmpp.disconnect();\n      });\n    } catch (e) {\n      console.error(\"caught\", e);\n    }\n  };\n\n  useEffect(signIn, [user]);\n\n  // extend the roster with info from the User API, presence, etc.\n  const extendedRoster = roster.map(r => {\n    const user = allUsers.find(u => r.jid.includes(u.user_id));\n    const name = r.name // if the roster item has a name\n      ? r.name // use that\n      : user // otherwise, if there's a corresponding user from the User API\n        ? userFullName(user) // get the name of that\n        : r.jid;// otherwise, just show their JID\n\n    // grab all of the resources that we've been given presence for this user\n    const statuses = Object.values(presence)\n      .filter((u) => u.from.includes(r.jid))\n      .filter((u) => u.type !== 'unavailable')\n      .map((u) => u.status || 'available');\n\n    const status = statuses.length === 0 // if they have no resources online\n      ? 'unavailable' // they're unavailable\n      : statuses.some((s) => s === 'in-meeting') // if _any_ resource is in a meeting\n        ? 'in-meeting' // show in-meeting\n        : statuses.every((s) => s === 'away') // if _all_ of their resources are away\n          ? 'away' // show away\n          : statuses.every((s) => s === 'available') // if _all_ of their resources are available\n            ? 'available' // show available\n            : 'available'; // otherwise, if they have other online resources, show available\n\n    return {\n      ...r,\n      user,\n      name,\n      status,\n      statuses,\n      activity: activities[r.jid],\n      isRoom: !!r.groups?.[0]?.includes(\"muc\"),\n    };\n  });\n  window.presence = presence;\n  window.roster = extendedRoster;\n  window.activities = activities;\n\n  console.log('new presence list', presence);\n  console.log(\"extended roster\", extendedRoster);\n\n  // find my own user from the User API\n  const me = allUsers.find((u) => client.jid.match(u.user_id)) || {};\n\n  const reconnect = async () => {\n    console.log(\"reconnecting\");\n    // client.config.credentials.password = user.signInUserSession.idToken.jwtToken;\n    client.updateConfig({ ...(client.config.credentials), password: user.signInUserSession.idToken.jwtToken });\n    client.connect();\n  };\n\n  const signOut = async () => {\n    client.disconnect();\n    setConnected(false);\n    setRoster([]);\n    setPresence({});\n    db.messages.clear();\n    localStorage.removeItem(\"visionable-xmpp-hostname\"); // grab this from context\n    signOutAWS();\n  };\n\n  const acceptInvite = (message) => {\n    setInviteResponses((prev) => ({ ...prev, [message.id]: \"accept\" }))\n    client.sendMessage({ to: message.from, body: message.id, type: 'meeting-invite-accept' });\n  };\n\n  const rejectInvite = (message) => {\n    setInviteResponses((prev) => ({ ...prev, [message.id]: \"reject\" }))\n    client.sendMessage({ to: message.from, body: message.id, type: 'meeting-invite-reject' });\n  };\n\n  /*\n  const changeName = () => {\n    client.publishVCard({ fullName: newName });\n  };\n\n  const getVCard = async () => {\n    try {\n      const card = await client.getVCard(jid);\n      console.log(\"my card\", card);\n      setNewName(card?.fullName);\n    } catch (e) {\n      console.error(\"Error getting vcard\", e);\n    }\n  };\n\n  const getMUCLightRooms = async () => {\n    const res = await client.getDiscoItems(MUC_LIGHT_HOSTNAME);\n  }\n\n  const uploadFile = (e) => {\n    Array.from(e.target.files).forEach(async (f) => {\n      const { name, size, type: mediaType } = f; // TODO files with spaces in name fail\n      console.log('file', name, size, mediaType);\n      const service = await client.getUploadService();\n      console.log('service', service);\n      const slot = await client.getUploadSlot(service.jid, { name, size, mediaType })\n      console.log('slot', slot);\n      const { download: downloadUrl, upload: { url: uploadUrl } } = slot;\n      console.log('got urls', downloadUrl, uploadUrl);\n      const res = await fetch(uploadUrl, {\n        method: \"PUT\",\n        body: f,\n        headers: { \"x-amz-acl\": \"public-read\" },\n      });\n      console.log('res', res);\n\n      if (to) { // send notification\n        client.sendMessage({ to, body: downloadUrl, type: 'file-upload' });\n      }\n    })\n  }\n*/\n\n  if (!client) {\n    return (\n      <div className=\"App\">Loading</div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <SideBar nav={nav} setNav={setNav} signOut={signOut} client={client} me={me} />\n\n      <Snackbar\n        onClick={reconnect}\n        open={!connected}\n        anchorOrigin={{ horizontal: \"center\", vertical: \"bottom\" }}\n        sx={{ cursor: \"pointer\" }}\n      >\n        <Alert severity=\"error\" sx={{ width: '100%' }}>Disconnected. Click here to reconnect</Alert>\n      </Snackbar>\n\n      <IncomingInvites\n        accept={acceptInvite}\n        reject={rejectInvite}\n        invites={incomingInvites}\n        responses={inviteResponses} />\n\n      <Box className=\"main\">\n        {nav === 'contacts'\n          ? <Roster\n            roster={extendedRoster}\n            // presence={presence}\n            allUsers={allUsers}\n            client={client}\n            API_BASE={API_BASE}\n            MUC_LIGHT_HOSTNAME={mucHostname}\n            jwt={jwt}\n            />\n          : nav === 'messages'\n            ? <Messages\n              roster={extendedRoster}\n              // presence={presence}\n              allUsers={allUsers}\n              client={client}\n              API_BASE={API_BASE}\n              MUC_LIGHT_HOSTNAME={mucHostname}\n              jwt={jwt}\n              />\n            : null}\n      </Box>\n    </div>\n  );\n};\n\nconst IncomingInvites = ({ accept, reject, invites, responses }) =>\n  invites.filter((m) => !responses[m.id]).map((m) => (\n    <Dialog key={m.id} open={true}>\n      <DialogTitle>Meeting Invite</DialogTitle>\n      <DialogContent>\n        <p>Invite ID: {m.id}</p>\n        <p>From: {m.from}</p>\n        <p>Meeting ID: {m.body}</p>\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"error\" onClick={() => reject(m)}>Reject</Button>\n        <Button onClick={() => accept(m)}>Accept</Button>\n      </DialogActions>\n    </Dialog>\n  ));\n\nconst getAllUsers = async (jwt) => {\n  const res = await fetch(`${API_BASE}/api/user`, { headers: { Authorization: jwt } });\n  return res.ok ? res.json() : [];\n}\n\nfunction userFullName(user) {\n  return user?.name\n  ? user.name\n    : user?.user_displayname\n      ? user.user_displayname\n      : user?.user_firstname\n        ? `${user.user_firstname} ${user.user_lastname}`\n        : \"[No Name]\";\n}\n\nasync function getAllMessages({ client, start, after }) {\n  const paging = after ? { after } : {};\n  const { complete, paging: { last } } = await client.searchHistory({ start, paging });\n\n  if (!complete) {\n    getAllMessages({ client, after: last });\n  }\n}\n\nexport default App;\n","import React, { useState, useEffect, createContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nimport Amplify from \"aws-amplify\";\nimport { Authenticator } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\n\nconst Context = createContext({});\n\nconst HOSTNAME_KEY = \"visionable-xmpp-hostname\";\nconst lastHostname = localStorage.getItem(HOSTNAME_KEY);\nconst hostname = lastHostname || prompt(\"Enter hostname\", \"saas.visionable.one\");\nlocalStorage.setItem(HOSTNAME_KEY, hostname);\n\nconst AppContainer = () => {\n  const [config, setConfig] = useState(null);\n\n  const configure = async () => {\n    const json = await getServiceConfig(hostname)\n\n    Amplify.configure({\n      Auth: {\n        region: json['aws-region'],\n        userPoolId: json['aws-user-pool-id'],\n        userPoolWebClientId: json['aws-user-pool-client-id'],\n      },\n    });\n\n    setConfig(json);\n  };\n\n  useEffect(() => configure(), []);\n\n  const value = {\n    HOSTNAME_KEY\n  };\n\n  return !config\n    ? null\n    : (\n      <Context.Provider value={value}>\n        <Authenticator>\n          {({ signOut, user }) => (\n            <App signOutAWS={signOut} user={user} />\n          )}\n        </Authenticator>\n      </Context.Provider>\n    );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nasync function getServiceConfig(hostname) {\n  try {\n    const res = await fetch(`https://${hostname}/config.json`, { mode: \"cors\" });\n    return await res.json();\n  } catch(e) {\n    console.log(e);\n    alert(\"Error requesting configuration data for this service\");\n    localStorage.removeItem(HOSTNAME_KEY);\n    window.location.reload();\n  }\n}\n"],"sourceRoot":""}