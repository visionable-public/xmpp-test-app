import logo from './logo.svg';
import './App.css';
import { useEffect, useState } from 'react';

import { client, xml } from '@xmpp/client';
import debug from '@xmpp/debug';
import setupRoster from '@xmpp-plugins/roster';
import parse from '@xmpp/xml';

async function init(username, password) {
  const xmpp = client({
    // service: 'wss://jabber.visionable.io:5443/ws',
    // service: 'wss://saas-msg.visionable.one:5443/ws-xmpp',
    service: 'ws://saas-msg.visionable.one:5280/ws-xmpp',
    // domain: 'jabber.visionable.io',
    domain: 'saas-msg.visionable.one',
    username,
    password,
    // username: 'eb0c3608-67b4-4582-b22d-e5d385b71023', // dswan@visionable.com
    // password: 'eyJraWQiOiJDXC9iM0hEbFppQlVyOXVnWmZIV2hlaU5jY3Y1K25QWll2dUlxSEtiNVllMD0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJlYjBjMzYwOC02N2I0LTQ1ODItYjIyZC1lNWQzODViNzEwMjMiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tXC91cy1lYXN0LTFfTHI3WExEYkpxIiwiY29nbml0bzp1c2VybmFtZSI6ImViMGMzNjA4LTY3YjQtNDU4Mi1iMjJkLWU1ZDM4NWI3MTAyMyIsImN1c3RvbTp0ZW5hbnRfaWQiOiIxIiwiZ2l2ZW5fbmFtZSI6IkR1c3RpbiIsIm9yaWdpbl9qdGkiOiIyNWEwM2I2Yy1hOTBjLTQ4NWQtOWIwNS0zNTA1OGM2Nzg4N2UiLCJhdWQiOiI2bG4wdDU2bWcâ€¦YtZTMzNDFmMTVlNDU3IiwiZXhwIjoxNjQwODc4NTIzLCJpYXQiOjE2NDA3OTIxMjMsImp0aSI6ImIzNGIxNTZkLWQxMWItNDFiYy04NzU2LTRkY2Q5ZjdiOWIzYSIsImVtYWlsIjoiZHN3YW5AdmlzaW9uYWJsZS5jb20ifQ.HhcjRhNxflJt_uBzI3WUXczEBc4LiUbCJ4LuUIymcQujY6Yw69NcJIf9mzrl6C5CMEi8a-qkwdmhXkCRH4JKcCzKMuv-BYn0FsbMdx390bHKZlxe6ivsqU-0x44-jHTIK688sger7eNi2FxiUuNDSY3WH6Y68NTV3bc03Qouwf91ySb_y4YMyRMTjtdiKAzJYRUVp-Igb-OY0-dP_JWuC-jgPe0eROcQbF3-Wwxx4HNu3D8Xr6UMem2fmWuFmL3ZXtYPCAnnXbgTUunaxzhbT2aYFwh4iGYtftKgGqaivAQDL8-tspU0KAEjT-x-bFJMYH1w7SCPxTApD5lUgUYnBQ', // dswan@visionable.com
  });

  // debug(xmpp, true);

  return xmpp;
}

function App() {
  const [client, setClient] = useState(null);
  // const [username, setUsername] = useState("dswan@jabber.visionable.io");
  const [username, setUsername] = useState("dswan@saas-msg.visionable.one");
  const [password, setPassword] = useState("green123");
  const [message, setMessage] = useState("");
  const [logs, setLogs] = useState("");
  const [to, setTo] = useState("");
  const [online, setOnline] = useState(false);
  const [textarea, setTextarea] = useState(null);
  const [status, setStatus] = useState("");

  const signIn = async () => {
    const xmpp = await init(username, password);

    setClient(xmpp);

    xmpp.on("error", (err) => {
      console.error("error", err);
    });

    xmpp.on("offline", (e) => {
      log("offline");
      setOnline(false);
    });

    xmpp.on("stanza", async (stanza) => {
      log(stanza);
    });

    xmpp.on("online", async (address) => {
      console.log('online', address);
      setOnline(true);

      await xmpp.send(xml("presence"));
    });

    const roster = setupRoster(xmpp)
    console.log(roster);

    roster.on('set', ({item, version}) => {
      console.log(`Roster version ${version} received`, item)
    })

    roster.get().then((roster) => {
      console.log('got roster', roster);
    }).catch((e) => {
      console.log('caught roster error', e);
    });

    xmpp.start().then((e) => {
      setOnline(true);
    }).catch((e) => {
      log(e.message);
    });
  };

  const signOut = async () => {
    client.stop().then((e) => {
      setOnline(false);
    }).catch((e) => {
      log(e.message);
    });
  };

  const log = (msg) => {
    console.log(msg, typeof msg);
    const formatted = formatXml(msg.toString(), "  ");
    setLogs(prev => `${prev}${formatted}\n\n`);
    textarea.scrollTop = textarea.scrollHeight; // scroll to the bottom
  };

  const clearLog = () => setLogs("");

  const sendMessage = () => {
    console.log('sending message', message, to);
    const msg = xml("message", { type: "chat", to }, xml("body", {}, message));
    client.send(msg);
  };

  const registerModPushOff = () => {
    const id = "randomrandomrequestid2"; // +new Date();
    const token = 'urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6uro=';
    const server = 'jabber.visionable.io';

    const msg = xml("iq", { type: "set", to: server, id: id },
      xml("command", { xmlns: "http://jabber.org/protocol/commands", node: "register-push-fcm", action: "execute" },
        xml("x", { xmlns: 'jabber:x:data', type: 'submit' },
          xml("field", { var: "token" },
            xml("value", null, token)
          )
        )
      )
    );

    client.send(msg);
  };

  const listPushRegistrations = () => {
    const id = +new Date();
    const server = 'jabber.visionable.io';

    const msg = parse(`
      <iq type="set" to="${server}" id="${id}">
        <command xmlns="http://jabber.org/protocol/commands"
                 node="list-push-registrations"
                 action="execute">
        </command>
      </iq>`
    );

    client.send(msg);
  };

  const sendStatus = () => {
    client.send(xml("presence", null, xml("status", null, status)));
  };

  const getMessageArchive = () => {
    const req = xml("iq", { type: "set", id: "get-archive" },
      xml("query", { xmlns: "urn:xmpp:mam:2", queryid: "f27" })
    );

    // client.iqCaller.request(req);
    client.send(req);
  };

  return (
    <div className="App">
      <input placeholder="Username" onChange={(e) => setUsername(e.target.value)} value={username} disabled={online} />
      <input placeholder="Password" type="password" onChange={(e) => setPassword(e.target.value)} value={password} disabled={online} />

      <button onClick={signIn} disabled={online}>Sign in</button>
      <button onClick={signOut} disabled={!online}>Sign out</button>

      <textarea placeholder="Log" className="logs" value={logs} readOnly ref={el => setTextarea(el)} />
      <button onClick={clearLog}>Clear Logs</button>

      <input placeholder="To" onChange={(e) => setTo(e.target.value)} value={to} />
      <input placeholder="Message" onChange={(e) => setMessage(e.target.value)} value={message} />
      <button onClick={sendMessage}>Send</button>

      <button onClick={registerModPushOff}>Register mod_pushoff</button>
      <button onClick={listPushRegistrations}>List Push Registrations</button>

      <input placeholder="Status" onChange={(e) => setStatus(e.target.value)} value={status} />
      <button onClick={sendStatus}>Set Status</button>

      <button onClick={getMessageArchive}>Get Message Archive</button>
    </div>
  );
}

function formatXml(xml, tab) { // tab = optional indent value, default is tab (\t)
    var formatted = '', indent= '';
    tab = tab || '\t';
    xml.split(/>\s*</).forEach(function(node) {
        if (node.match( /^\/\w/ )) indent = indent.substring(tab.length); // decrease indent by one 'tab'
        formatted += indent + '<' + node + '>\r\n';
        if (node.match( /^<?\w[^>]*[^\/]$/ )) indent += tab;              // increase indent
    });
    return formatted.substring(1, formatted.length-3);
}

export default App;
